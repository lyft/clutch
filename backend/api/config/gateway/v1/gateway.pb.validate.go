// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config/gateway/v1/gateway.proto

package gatewayv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _gateway_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Config) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGateway() == nil {
		return ConfigValidationError{
			field:  "Gateway",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGateway()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "Gateway",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResolvers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  fmt.Sprintf("Resolvers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on TCPSocket with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TCPSocket) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetAddress()) < 1 {
		return TCPSocketValidationError{
			field:  "Address",
			reason: "value length must be at least 1 bytes",
		}
	}

	if m.GetPort() > 65535 {
		return TCPSocketValidationError{
			field:  "Port",
			reason: "value must be less than or equal to 65535",
		}
	}

	// no validation rules for Secure

	return nil
}

// TCPSocketValidationError is the validation error returned by
// TCPSocket.Validate if the designated constraints aren't met.
type TCPSocketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TCPSocketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TCPSocketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TCPSocketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TCPSocketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TCPSocketValidationError) ErrorName() string { return "TCPSocketValidationError" }

// Error satisfies the builtin error interface
func (e TCPSocketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTCPSocket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TCPSocketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TCPSocketValidationError{}

// Validate checks the field values on Listener with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Listener) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Socket.(type) {

	case *Listener_Tcp:

		if v, ok := interface{}(m.GetTcp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListenerValidationError{
					field:  "Tcp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ListenerValidationError{
			field:  "Socket",
			reason: "value is required",
		}

	}

	return nil
}

// ListenerValidationError is the validation error returned by
// Listener.Validate if the designated constraints aren't met.
type ListenerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListenerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListenerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListenerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListenerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListenerValidationError) ErrorName() string { return "ListenerValidationError" }

// Error satisfies the builtin error interface
func (e ListenerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListener.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListenerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListenerValidationError{}

// Validate checks the field values on Stats with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Stats) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetFlushInterval(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return StatsValidationError{
				field:  "FlushInterval",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		gte := time.Duration(0*time.Second + 100000000*time.Nanosecond)

		if dur < gte {
			return StatsValidationError{
				field:  "FlushInterval",
				reason: "value must be greater than or equal to 100ms",
			}
		}

	}

	if v, ok := interface{}(m.GetGoRuntimeStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatsValidationError{
				field:  "GoRuntimeStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Reporter.(type) {

	case *Stats_LogReporter_:

		if v, ok := interface{}(m.GetLogReporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatsValidationError{
					field:  "LogReporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Stats_StatsdReporter_:

		if v, ok := interface{}(m.GetStatsdReporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatsValidationError{
					field:  "StatsdReporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// StatsValidationError is the validation error returned by Stats.Validate if
// the designated constraints aren't met.
type StatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatsValidationError) ErrorName() string { return "StatsValidationError" }

// Error satisfies the builtin error interface
func (e StatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatsValidationError{}

// Validate checks the field values on Timeouts with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Timeouts) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetDefault() == nil {
		return TimeoutsValidationError{
			field:  "Default",
			reason: "value is required",
		}
	}

	if d := m.GetDefault(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return TimeoutsValidationError{
				field:  "Default",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		gte := time.Duration(1*time.Second + 0*time.Nanosecond)

		if dur < gte {
			return TimeoutsValidationError{
				field:  "Default",
				reason: "value must be greater than or equal to 1s",
			}
		}

	}

	for idx, item := range m.GetOverrides() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeoutsValidationError{
					field:  fmt.Sprintf("Overrides[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TimeoutsValidationError is the validation error returned by
// Timeouts.Validate if the designated constraints aren't met.
type TimeoutsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeoutsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeoutsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeoutsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeoutsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeoutsValidationError) ErrorName() string { return "TimeoutsValidationError" }

// Error satisfies the builtin error interface
func (e TimeoutsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeouts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeoutsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeoutsValidationError{}

// Validate checks the field values on GatewayOptions with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GatewayOptions) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetListener() == nil {
		return GatewayOptionsValidationError{
			field:  "Listener",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetListener()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "Listener",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetJsonGrpcLoopbackListener()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "JsonGrpcLoopbackListener",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetLogger() == nil {
		return GatewayOptionsValidationError{
			field:  "Logger",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetLogger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "Logger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetStats() == nil {
		return GatewayOptionsValidationError{
			field:  "Stats",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTimeouts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "Timeouts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMiddleware() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GatewayOptionsValidationError{
					field:  fmt.Sprintf("Middleware[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetAssets()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "Assets",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnablePprof

	if v, ok := interface{}(m.GetAccesslog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "Accesslog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GatewayOptionsValidationError is the validation error returned by
// GatewayOptions.Validate if the designated constraints aren't met.
type GatewayOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayOptionsValidationError) ErrorName() string { return "GatewayOptionsValidationError" }

// Error satisfies the builtin error interface
func (e GatewayOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayOptionsValidationError{}

// Validate checks the field values on Assets with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Assets) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Provider.(type) {

	case *Assets_S3:

		if v, ok := interface{}(m.GetS3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetsValidationError{
					field:  "S3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AssetsValidationError is the validation error returned by Assets.Validate if
// the designated constraints aren't met.
type AssetsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetsValidationError) ErrorName() string { return "AssetsValidationError" }

// Error satisfies the builtin error interface
func (e AssetsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetsValidationError{}

// Validate checks the field values on Logger with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Logger) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Level

	switch m.Format.(type) {

	case *Logger_Pretty:
		// no validation rules for Pretty

	}

	return nil
}

// LoggerValidationError is the validation error returned by Logger.Validate if
// the designated constraints aren't met.
type LoggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoggerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoggerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoggerValidationError) ErrorName() string { return "LoggerValidationError" }

// Error satisfies the builtin error interface
func (e LoggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoggerValidationError{}

// Validate checks the field values on Middleware with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Middleware) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) < 1 {
		return MiddlewareValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	if v, ok := interface{}(m.GetTypedConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MiddlewareValidationError{
				field:  "TypedConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MiddlewareValidationError is the validation error returned by
// Middleware.Validate if the designated constraints aren't met.
type MiddlewareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiddlewareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiddlewareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiddlewareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiddlewareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiddlewareValidationError) ErrorName() string { return "MiddlewareValidationError" }

// Error satisfies the builtin error interface
func (e MiddlewareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddleware.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiddlewareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiddlewareValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Service) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) < 1 {
		return ServiceValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	if v, ok := interface{}(m.GetTypedConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "TypedConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on Resolver with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Resolver) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) < 1 {
		return ResolverValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	if v, ok := interface{}(m.GetTypedConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResolverValidationError{
				field:  "TypedConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResolverValidationError is the validation error returned by
// Resolver.Validate if the designated constraints aren't met.
type ResolverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolverValidationError) ErrorName() string { return "ResolverValidationError" }

// Error satisfies the builtin error interface
func (e ResolverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolverValidationError{}

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Module) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) < 1 {
		return ModuleValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	if v, ok := interface{}(m.GetTypedConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModuleValidationError{
				field:  "TypedConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on Stats_LogReporter with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Stats_LogReporter) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// Stats_LogReporterValidationError is the validation error returned by
// Stats_LogReporter.Validate if the designated constraints aren't met.
type Stats_LogReporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Stats_LogReporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Stats_LogReporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Stats_LogReporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Stats_LogReporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Stats_LogReporterValidationError) ErrorName() string {
	return "Stats_LogReporterValidationError"
}

// Error satisfies the builtin error interface
func (e Stats_LogReporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats_LogReporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Stats_LogReporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Stats_LogReporterValidationError{}

// Validate checks the field values on Stats_StatsdReporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Stats_StatsdReporter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	switch m.TagMode.(type) {

	case *Stats_StatsdReporter_PointTags_:

		if v, ok := interface{}(m.GetPointTags()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Stats_StatsdReporterValidationError{
					field:  "PointTags",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// Stats_StatsdReporterValidationError is the validation error returned by
// Stats_StatsdReporter.Validate if the designated constraints aren't met.
type Stats_StatsdReporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Stats_StatsdReporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Stats_StatsdReporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Stats_StatsdReporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Stats_StatsdReporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Stats_StatsdReporterValidationError) ErrorName() string {
	return "Stats_StatsdReporterValidationError"
}

// Error satisfies the builtin error interface
func (e Stats_StatsdReporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats_StatsdReporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Stats_StatsdReporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Stats_StatsdReporterValidationError{}

// Validate checks the field values on Stats_GoRuntimeStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Stats_GoRuntimeStats) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetCollectionInterval(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return Stats_GoRuntimeStatsValidationError{
				field:  "CollectionInterval",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		gte := time.Duration(0*time.Second + 100000000*time.Nanosecond)

		if dur < gte {
			return Stats_GoRuntimeStatsValidationError{
				field:  "CollectionInterval",
				reason: "value must be greater than or equal to 100ms",
			}
		}

	}

	return nil
}

// Stats_GoRuntimeStatsValidationError is the validation error returned by
// Stats_GoRuntimeStats.Validate if the designated constraints aren't met.
type Stats_GoRuntimeStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Stats_GoRuntimeStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Stats_GoRuntimeStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Stats_GoRuntimeStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Stats_GoRuntimeStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Stats_GoRuntimeStatsValidationError) ErrorName() string {
	return "Stats_GoRuntimeStatsValidationError"
}

// Error satisfies the builtin error interface
func (e Stats_GoRuntimeStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats_GoRuntimeStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Stats_GoRuntimeStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Stats_GoRuntimeStatsValidationError{}

// Validate checks the field values on Stats_StatsdReporter_PointTags with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Stats_StatsdReporter_PointTags) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetSeparator()) < 1 {
		return Stats_StatsdReporter_PointTagsValidationError{
			field:  "Separator",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// Stats_StatsdReporter_PointTagsValidationError is the validation error
// returned by Stats_StatsdReporter_PointTags.Validate if the designated
// constraints aren't met.
type Stats_StatsdReporter_PointTagsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Stats_StatsdReporter_PointTagsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Stats_StatsdReporter_PointTagsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Stats_StatsdReporter_PointTagsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Stats_StatsdReporter_PointTagsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Stats_StatsdReporter_PointTagsValidationError) ErrorName() string {
	return "Stats_StatsdReporter_PointTagsValidationError"
}

// Error satisfies the builtin error interface
func (e Stats_StatsdReporter_PointTagsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats_StatsdReporter_PointTags.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Stats_StatsdReporter_PointTagsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Stats_StatsdReporter_PointTagsValidationError{}

// Validate checks the field values on Timeouts_Entry with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Timeouts_Entry) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Service

	// no validation rules for Method

	if m.GetTimeout() == nil {
		return Timeouts_EntryValidationError{
			field:  "Timeout",
			reason: "value is required",
		}
	}

	if d := m.GetTimeout(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return Timeouts_EntryValidationError{
				field:  "Timeout",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		gte := time.Duration(1*time.Second + 0*time.Nanosecond)

		if dur < gte {
			return Timeouts_EntryValidationError{
				field:  "Timeout",
				reason: "value must be greater than or equal to 1s",
			}
		}

	}

	return nil
}

// Timeouts_EntryValidationError is the validation error returned by
// Timeouts_Entry.Validate if the designated constraints aren't met.
type Timeouts_EntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Timeouts_EntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Timeouts_EntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Timeouts_EntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Timeouts_EntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Timeouts_EntryValidationError) ErrorName() string { return "Timeouts_EntryValidationError" }

// Error satisfies the builtin error interface
func (e Timeouts_EntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeouts_Entry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Timeouts_EntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Timeouts_EntryValidationError{}

// Validate checks the field values on Assets_S3Provider with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Assets_S3Provider) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Region

	// no validation rules for Bucket

	// no validation rules for Key

	return nil
}

// Assets_S3ProviderValidationError is the validation error returned by
// Assets_S3Provider.Validate if the designated constraints aren't met.
type Assets_S3ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Assets_S3ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Assets_S3ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Assets_S3ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Assets_S3ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Assets_S3ProviderValidationError) ErrorName() string {
	return "Assets_S3ProviderValidationError"
}

// Error satisfies the builtin error interface
func (e Assets_S3ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssets_S3Provider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Assets_S3ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Assets_S3ProviderValidationError{}
