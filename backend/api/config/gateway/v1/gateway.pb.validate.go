// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config/gateway/v1/gateway.proto

package gatewayv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGateway() == nil {
		err := ConfigValidationError{
			field:  "Gateway",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetGateway()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Gateway",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Gateway",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGateway()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "Gateway",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResolvers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Resolvers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Resolvers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  fmt.Sprintf("Resolvers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on TCPSocket with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TCPSocket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TCPSocket with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TCPSocketMultiError, or nil
// if none found.
func (m *TCPSocket) ValidateAll() error {
	return m.validate(true)
}

func (m *TCPSocket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetAddress()) < 1 {
		err := TCPSocketValidationError{
			field:  "Address",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPort() > 65535 {
		err := TCPSocketValidationError{
			field:  "Port",
			reason: "value must be less than or equal to 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Secure

	if len(errors) > 0 {
		return TCPSocketMultiError(errors)
	}

	return nil
}

// TCPSocketMultiError is an error wrapping multiple validation errors returned
// by TCPSocket.ValidateAll() if the designated constraints aren't met.
type TCPSocketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TCPSocketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TCPSocketMultiError) AllErrors() []error { return m }

// TCPSocketValidationError is the validation error returned by
// TCPSocket.Validate if the designated constraints aren't met.
type TCPSocketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TCPSocketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TCPSocketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TCPSocketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TCPSocketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TCPSocketValidationError) ErrorName() string { return "TCPSocketValidationError" }

// Error satisfies the builtin error interface
func (e TCPSocketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTCPSocket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TCPSocketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TCPSocketValidationError{}

// Validate checks the field values on Listener with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Listener) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Listener with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListenerMultiError, or nil
// if none found.
func (m *Listener) ValidateAll() error {
	return m.validate(true)
}

func (m *Listener) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofSocketPresent := false
	switch v := m.Socket.(type) {
	case *Listener_Tcp:
		if v == nil {
			err := ListenerValidationError{
				field:  "Socket",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSocketPresent = true

		if all {
			switch v := interface{}(m.GetTcp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListenerValidationError{
						field:  "Tcp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListenerValidationError{
						field:  "Tcp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTcp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListenerValidationError{
					field:  "Tcp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofSocketPresent {
		err := ListenerValidationError{
			field:  "Socket",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListenerMultiError(errors)
	}

	return nil
}

// ListenerMultiError is an error wrapping multiple validation errors returned
// by Listener.ValidateAll() if the designated constraints aren't met.
type ListenerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListenerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListenerMultiError) AllErrors() []error { return m }

// ListenerValidationError is the validation error returned by
// Listener.Validate if the designated constraints aren't met.
type ListenerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListenerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListenerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListenerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListenerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListenerValidationError) ErrorName() string { return "ListenerValidationError" }

// Error satisfies the builtin error interface
func (e ListenerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListener.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListenerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListenerValidationError{}

// Validate checks the field values on Stats with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Stats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stats with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StatsMultiError, or nil if none found.
func (m *Stats) ValidateAll() error {
	return m.validate(true)
}

func (m *Stats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetFlushInterval(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = StatsValidationError{
				field:  "FlushInterval",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gte := time.Duration(0*time.Second + 100000000*time.Nanosecond)

			if dur < gte {
				err := StatsValidationError{
					field:  "FlushInterval",
					reason: "value must be greater than or equal to 100ms",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if all {
		switch v := interface{}(m.GetGoRuntimeStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "GoRuntimeStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "GoRuntimeStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGoRuntimeStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatsValidationError{
				field:  "GoRuntimeStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Prefix

	switch v := m.Reporter.(type) {
	case *Stats_LogReporter_:
		if v == nil {
			err := StatsValidationError{
				field:  "Reporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLogReporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatsValidationError{
						field:  "LogReporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatsValidationError{
						field:  "LogReporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLogReporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatsValidationError{
					field:  "LogReporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Stats_StatsdReporter_:
		if v == nil {
			err := StatsValidationError{
				field:  "Reporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStatsdReporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatsValidationError{
						field:  "StatsdReporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatsValidationError{
						field:  "StatsdReporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStatsdReporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatsValidationError{
					field:  "StatsdReporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Stats_PrometheusReporter_:
		if v == nil {
			err := StatsValidationError{
				field:  "Reporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPrometheusReporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatsValidationError{
						field:  "PrometheusReporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatsValidationError{
						field:  "PrometheusReporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPrometheusReporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatsValidationError{
					field:  "PrometheusReporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StatsMultiError(errors)
	}

	return nil
}

// StatsMultiError is an error wrapping multiple validation errors returned by
// Stats.ValidateAll() if the designated constraints aren't met.
type StatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatsMultiError) AllErrors() []error { return m }

// StatsValidationError is the validation error returned by Stats.Validate if
// the designated constraints aren't met.
type StatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatsValidationError) ErrorName() string { return "StatsValidationError" }

// Error satisfies the builtin error interface
func (e StatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatsValidationError{}

// Validate checks the field values on Timeouts with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Timeouts) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Timeouts with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeoutsMultiError, or nil
// if none found.
func (m *Timeouts) ValidateAll() error {
	return m.validate(true)
}

func (m *Timeouts) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDefault() == nil {
		err := TimeoutsValidationError{
			field:  "Default",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetDefault(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = TimeoutsValidationError{
				field:  "Default",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gte := time.Duration(1*time.Second + 0*time.Nanosecond)

			if dur < gte {
				err := TimeoutsValidationError{
					field:  "Default",
					reason: "value must be greater than or equal to 1s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	for idx, item := range m.GetOverrides() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeoutsValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeoutsValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeoutsValidationError{
					field:  fmt.Sprintf("Overrides[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TimeoutsMultiError(errors)
	}

	return nil
}

// TimeoutsMultiError is an error wrapping multiple validation errors returned
// by Timeouts.ValidateAll() if the designated constraints aren't met.
type TimeoutsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeoutsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeoutsMultiError) AllErrors() []error { return m }

// TimeoutsValidationError is the validation error returned by
// Timeouts.Validate if the designated constraints aren't met.
type TimeoutsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeoutsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeoutsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeoutsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeoutsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeoutsValidationError) ErrorName() string { return "TimeoutsValidationError" }

// Error satisfies the builtin error interface
func (e TimeoutsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeouts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeoutsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeoutsValidationError{}

// Validate checks the field values on GatewayOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GatewayOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GatewayOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GatewayOptionsMultiError,
// or nil if none found.
func (m *GatewayOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *GatewayOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListener() == nil {
		err := GatewayOptionsValidationError{
			field:  "Listener",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListener()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "Listener",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "Listener",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListener()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "Listener",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetJsonGrpcLoopbackListener()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "JsonGrpcLoopbackListener",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "JsonGrpcLoopbackListener",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJsonGrpcLoopbackListener()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "JsonGrpcLoopbackListener",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetLogger() == nil {
		err := GatewayOptionsValidationError{
			field:  "Logger",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLogger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "Logger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "Logger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "Logger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetStats() == nil {
		err := GatewayOptionsValidationError{
			field:  "Stats",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeouts()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "Timeouts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "Timeouts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeouts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "Timeouts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMiddleware() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GatewayOptionsValidationError{
						field:  fmt.Sprintf("Middleware[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GatewayOptionsValidationError{
						field:  fmt.Sprintf("Middleware[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GatewayOptionsValidationError{
					field:  fmt.Sprintf("Middleware[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetAssets()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "Assets",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "Assets",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAssets()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "Assets",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnablePprof

	if all {
		switch v := interface{}(m.GetAccesslog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "Accesslog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "Accesslog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccesslog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "Accesslog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxResponseSizeBytes

	if all {
		switch v := interface{}(m.GetSecureCookies()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "SecureCookies",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GatewayOptionsValidationError{
					field:  "SecureCookies",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecureCookies()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayOptionsValidationError{
				field:  "SecureCookies",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GatewayOptionsMultiError(errors)
	}

	return nil
}

// GatewayOptionsMultiError is an error wrapping multiple validation errors
// returned by GatewayOptions.ValidateAll() if the designated constraints
// aren't met.
type GatewayOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GatewayOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GatewayOptionsMultiError) AllErrors() []error { return m }

// GatewayOptionsValidationError is the validation error returned by
// GatewayOptions.Validate if the designated constraints aren't met.
type GatewayOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayOptionsValidationError) ErrorName() string { return "GatewayOptionsValidationError" }

// Error satisfies the builtin error interface
func (e GatewayOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayOptionsValidationError{}

// Validate checks the field values on Assets with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Assets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Assets with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AssetsMultiError, or nil if none found.
func (m *Assets) ValidateAll() error {
	return m.validate(true)
}

func (m *Assets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Provider.(type) {
	case *Assets_S3:
		if v == nil {
			err := AssetsValidationError{
				field:  "Provider",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetS3()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetsValidationError{
						field:  "S3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetsValidationError{
						field:  "S3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetS3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetsValidationError{
					field:  "S3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AssetsMultiError(errors)
	}

	return nil
}

// AssetsMultiError is an error wrapping multiple validation errors returned by
// Assets.ValidateAll() if the designated constraints aren't met.
type AssetsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetsMultiError) AllErrors() []error { return m }

// AssetsValidationError is the validation error returned by Assets.Validate if
// the designated constraints aren't met.
type AssetsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetsValidationError) ErrorName() string { return "AssetsValidationError" }

// Error satisfies the builtin error interface
func (e AssetsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetsValidationError{}

// Validate checks the field values on Logger with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Logger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Logger with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LoggerMultiError, or nil if none found.
func (m *Logger) ValidateAll() error {
	return m.validate(true)
}

func (m *Logger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Level

	// no validation rules for Namespace

	switch v := m.Format.(type) {
	case *Logger_Pretty:
		if v == nil {
			err := LoggerValidationError{
				field:  "Format",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Pretty
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LoggerMultiError(errors)
	}

	return nil
}

// LoggerMultiError is an error wrapping multiple validation errors returned by
// Logger.ValidateAll() if the designated constraints aren't met.
type LoggerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoggerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoggerMultiError) AllErrors() []error { return m }

// LoggerValidationError is the validation error returned by Logger.Validate if
// the designated constraints aren't met.
type LoggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoggerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoggerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoggerValidationError) ErrorName() string { return "LoggerValidationError" }

// Error satisfies the builtin error interface
func (e LoggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoggerValidationError{}

// Validate checks the field values on Middleware with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Middleware) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Middleware with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MiddlewareMultiError, or
// nil if none found.
func (m *Middleware) ValidateAll() error {
	return m.validate(true)
}

func (m *Middleware) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) < 1 {
		err := MiddlewareValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTypedConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MiddlewareValidationError{
					field:  "TypedConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MiddlewareValidationError{
					field:  "TypedConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTypedConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MiddlewareValidationError{
				field:  "TypedConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MiddlewareMultiError(errors)
	}

	return nil
}

// MiddlewareMultiError is an error wrapping multiple validation errors
// returned by Middleware.ValidateAll() if the designated constraints aren't met.
type MiddlewareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiddlewareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiddlewareMultiError) AllErrors() []error { return m }

// MiddlewareValidationError is the validation error returned by
// Middleware.Validate if the designated constraints aren't met.
type MiddlewareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiddlewareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiddlewareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiddlewareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiddlewareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiddlewareValidationError) ErrorName() string { return "MiddlewareValidationError" }

// Error satisfies the builtin error interface
func (e MiddlewareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddleware.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiddlewareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiddlewareValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) < 1 {
		err := ServiceValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTypedConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "TypedConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "TypedConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTypedConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "TypedConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on Resolver with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resolver) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resolver with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResolverMultiError, or nil
// if none found.
func (m *Resolver) ValidateAll() error {
	return m.validate(true)
}

func (m *Resolver) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) < 1 {
		err := ResolverValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTypedConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResolverValidationError{
					field:  "TypedConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResolverValidationError{
					field:  "TypedConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTypedConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResolverValidationError{
				field:  "TypedConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResolverMultiError(errors)
	}

	return nil
}

// ResolverMultiError is an error wrapping multiple validation errors returned
// by Resolver.ValidateAll() if the designated constraints aren't met.
type ResolverMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolverMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolverMultiError) AllErrors() []error { return m }

// ResolverValidationError is the validation error returned by
// Resolver.Validate if the designated constraints aren't met.
type ResolverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolverValidationError) ErrorName() string { return "ResolverValidationError" }

// Error satisfies the builtin error interface
func (e ResolverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolverValidationError{}

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Module) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ModuleMultiError, or nil if none found.
func (m *Module) ValidateAll() error {
	return m.validate(true)
}

func (m *Module) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) < 1 {
		err := ModuleValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTypedConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModuleValidationError{
					field:  "TypedConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModuleValidationError{
					field:  "TypedConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTypedConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModuleValidationError{
				field:  "TypedConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModuleMultiError(errors)
	}

	return nil
}

// ModuleMultiError is an error wrapping multiple validation errors returned by
// Module.ValidateAll() if the designated constraints aren't met.
type ModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModuleMultiError) AllErrors() []error { return m }

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on Stats_LogReporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Stats_LogReporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stats_LogReporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Stats_LogReporterMultiError, or nil if none found.
func (m *Stats_LogReporter) ValidateAll() error {
	return m.validate(true)
}

func (m *Stats_LogReporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Stats_LogReporterMultiError(errors)
	}

	return nil
}

// Stats_LogReporterMultiError is an error wrapping multiple validation errors
// returned by Stats_LogReporter.ValidateAll() if the designated constraints
// aren't met.
type Stats_LogReporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Stats_LogReporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Stats_LogReporterMultiError) AllErrors() []error { return m }

// Stats_LogReporterValidationError is the validation error returned by
// Stats_LogReporter.Validate if the designated constraints aren't met.
type Stats_LogReporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Stats_LogReporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Stats_LogReporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Stats_LogReporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Stats_LogReporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Stats_LogReporterValidationError) ErrorName() string {
	return "Stats_LogReporterValidationError"
}

// Error satisfies the builtin error interface
func (e Stats_LogReporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats_LogReporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Stats_LogReporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Stats_LogReporterValidationError{}

// Validate checks the field values on Stats_StatsdReporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Stats_StatsdReporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stats_StatsdReporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Stats_StatsdReporterMultiError, or nil if none found.
func (m *Stats_StatsdReporter) ValidateAll() error {
	return m.validate(true)
}

func (m *Stats_StatsdReporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	switch v := m.TagMode.(type) {
	case *Stats_StatsdReporter_PointTags_:
		if v == nil {
			err := Stats_StatsdReporterValidationError{
				field:  "TagMode",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPointTags()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Stats_StatsdReporterValidationError{
						field:  "PointTags",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Stats_StatsdReporterValidationError{
						field:  "PointTags",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPointTags()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Stats_StatsdReporterValidationError{
					field:  "PointTags",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return Stats_StatsdReporterMultiError(errors)
	}

	return nil
}

// Stats_StatsdReporterMultiError is an error wrapping multiple validation
// errors returned by Stats_StatsdReporter.ValidateAll() if the designated
// constraints aren't met.
type Stats_StatsdReporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Stats_StatsdReporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Stats_StatsdReporterMultiError) AllErrors() []error { return m }

// Stats_StatsdReporterValidationError is the validation error returned by
// Stats_StatsdReporter.Validate if the designated constraints aren't met.
type Stats_StatsdReporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Stats_StatsdReporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Stats_StatsdReporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Stats_StatsdReporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Stats_StatsdReporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Stats_StatsdReporterValidationError) ErrorName() string {
	return "Stats_StatsdReporterValidationError"
}

// Error satisfies the builtin error interface
func (e Stats_StatsdReporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats_StatsdReporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Stats_StatsdReporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Stats_StatsdReporterValidationError{}

// Validate checks the field values on Stats_PrometheusReporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Stats_PrometheusReporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stats_PrometheusReporter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Stats_PrometheusReporterMultiError, or nil if none found.
func (m *Stats_PrometheusReporter) ValidateAll() error {
	return m.validate(true)
}

func (m *Stats_PrometheusReporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HandlerPath

	if len(errors) > 0 {
		return Stats_PrometheusReporterMultiError(errors)
	}

	return nil
}

// Stats_PrometheusReporterMultiError is an error wrapping multiple validation
// errors returned by Stats_PrometheusReporter.ValidateAll() if the designated
// constraints aren't met.
type Stats_PrometheusReporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Stats_PrometheusReporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Stats_PrometheusReporterMultiError) AllErrors() []error { return m }

// Stats_PrometheusReporterValidationError is the validation error returned by
// Stats_PrometheusReporter.Validate if the designated constraints aren't met.
type Stats_PrometheusReporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Stats_PrometheusReporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Stats_PrometheusReporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Stats_PrometheusReporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Stats_PrometheusReporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Stats_PrometheusReporterValidationError) ErrorName() string {
	return "Stats_PrometheusReporterValidationError"
}

// Error satisfies the builtin error interface
func (e Stats_PrometheusReporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats_PrometheusReporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Stats_PrometheusReporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Stats_PrometheusReporterValidationError{}

// Validate checks the field values on Stats_GoRuntimeStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Stats_GoRuntimeStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stats_GoRuntimeStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Stats_GoRuntimeStatsMultiError, or nil if none found.
func (m *Stats_GoRuntimeStats) ValidateAll() error {
	return m.validate(true)
}

func (m *Stats_GoRuntimeStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetCollectionInterval(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = Stats_GoRuntimeStatsValidationError{
				field:  "CollectionInterval",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gte := time.Duration(0*time.Second + 100000000*time.Nanosecond)

			if dur < gte {
				err := Stats_GoRuntimeStatsValidationError{
					field:  "CollectionInterval",
					reason: "value must be greater than or equal to 100ms",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return Stats_GoRuntimeStatsMultiError(errors)
	}

	return nil
}

// Stats_GoRuntimeStatsMultiError is an error wrapping multiple validation
// errors returned by Stats_GoRuntimeStats.ValidateAll() if the designated
// constraints aren't met.
type Stats_GoRuntimeStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Stats_GoRuntimeStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Stats_GoRuntimeStatsMultiError) AllErrors() []error { return m }

// Stats_GoRuntimeStatsValidationError is the validation error returned by
// Stats_GoRuntimeStats.Validate if the designated constraints aren't met.
type Stats_GoRuntimeStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Stats_GoRuntimeStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Stats_GoRuntimeStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Stats_GoRuntimeStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Stats_GoRuntimeStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Stats_GoRuntimeStatsValidationError) ErrorName() string {
	return "Stats_GoRuntimeStatsValidationError"
}

// Error satisfies the builtin error interface
func (e Stats_GoRuntimeStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats_GoRuntimeStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Stats_GoRuntimeStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Stats_GoRuntimeStatsValidationError{}

// Validate checks the field values on Stats_StatsdReporter_PointTags with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Stats_StatsdReporter_PointTags) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stats_StatsdReporter_PointTags with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Stats_StatsdReporter_PointTagsMultiError, or nil if none found.
func (m *Stats_StatsdReporter_PointTags) ValidateAll() error {
	return m.validate(true)
}

func (m *Stats_StatsdReporter_PointTags) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetSeparator()) < 1 {
		err := Stats_StatsdReporter_PointTagsValidationError{
			field:  "Separator",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Stats_StatsdReporter_PointTagsMultiError(errors)
	}

	return nil
}

// Stats_StatsdReporter_PointTagsMultiError is an error wrapping multiple
// validation errors returned by Stats_StatsdReporter_PointTags.ValidateAll()
// if the designated constraints aren't met.
type Stats_StatsdReporter_PointTagsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Stats_StatsdReporter_PointTagsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Stats_StatsdReporter_PointTagsMultiError) AllErrors() []error { return m }

// Stats_StatsdReporter_PointTagsValidationError is the validation error
// returned by Stats_StatsdReporter_PointTags.Validate if the designated
// constraints aren't met.
type Stats_StatsdReporter_PointTagsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Stats_StatsdReporter_PointTagsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Stats_StatsdReporter_PointTagsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Stats_StatsdReporter_PointTagsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Stats_StatsdReporter_PointTagsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Stats_StatsdReporter_PointTagsValidationError) ErrorName() string {
	return "Stats_StatsdReporter_PointTagsValidationError"
}

// Error satisfies the builtin error interface
func (e Stats_StatsdReporter_PointTagsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats_StatsdReporter_PointTags.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Stats_StatsdReporter_PointTagsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Stats_StatsdReporter_PointTagsValidationError{}

// Validate checks the field values on Timeouts_Entry with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Timeouts_Entry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Timeouts_Entry with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Timeouts_EntryMultiError,
// or nil if none found.
func (m *Timeouts_Entry) ValidateAll() error {
	return m.validate(true)
}

func (m *Timeouts_Entry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Service

	// no validation rules for Method

	if m.GetTimeout() == nil {
		err := Timeouts_EntryValidationError{
			field:  "Timeout",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetTimeout(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = Timeouts_EntryValidationError{
				field:  "Timeout",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gte := time.Duration(1*time.Second + 0*time.Nanosecond)

			if dur < gte {
				err := Timeouts_EntryValidationError{
					field:  "Timeout",
					reason: "value must be greater than or equal to 1s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return Timeouts_EntryMultiError(errors)
	}

	return nil
}

// Timeouts_EntryMultiError is an error wrapping multiple validation errors
// returned by Timeouts_Entry.ValidateAll() if the designated constraints
// aren't met.
type Timeouts_EntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Timeouts_EntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Timeouts_EntryMultiError) AllErrors() []error { return m }

// Timeouts_EntryValidationError is the validation error returned by
// Timeouts_Entry.Validate if the designated constraints aren't met.
type Timeouts_EntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Timeouts_EntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Timeouts_EntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Timeouts_EntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Timeouts_EntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Timeouts_EntryValidationError) ErrorName() string { return "Timeouts_EntryValidationError" }

// Error satisfies the builtin error interface
func (e Timeouts_EntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeouts_Entry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Timeouts_EntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Timeouts_EntryValidationError{}

// Validate checks the field values on Assets_S3Provider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Assets_S3Provider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Assets_S3Provider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Assets_S3ProviderMultiError, or nil if none found.
func (m *Assets_S3Provider) ValidateAll() error {
	return m.validate(true)
}

func (m *Assets_S3Provider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for Bucket

	// no validation rules for Key

	if len(errors) > 0 {
		return Assets_S3ProviderMultiError(errors)
	}

	return nil
}

// Assets_S3ProviderMultiError is an error wrapping multiple validation errors
// returned by Assets_S3Provider.ValidateAll() if the designated constraints
// aren't met.
type Assets_S3ProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Assets_S3ProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Assets_S3ProviderMultiError) AllErrors() []error { return m }

// Assets_S3ProviderValidationError is the validation error returned by
// Assets_S3Provider.Validate if the designated constraints aren't met.
type Assets_S3ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Assets_S3ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Assets_S3ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Assets_S3ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Assets_S3ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Assets_S3ProviderValidationError) ErrorName() string {
	return "Assets_S3ProviderValidationError"
}

// Error satisfies the builtin error interface
func (e Assets_S3ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssets_S3Provider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Assets_S3ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Assets_S3ProviderValidationError{}
