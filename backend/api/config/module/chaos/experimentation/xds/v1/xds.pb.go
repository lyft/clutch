// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: config/module/chaos/experimentation/xds/v1/xds.proto

package xdsv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mapping from typeUrl of registered experiment type to its RTDS resource generator configuration.
	PerConfigRtdsGeneratorTypeConfiguration map[string]*Config_PerConfigRTDSResourceGeneratorTypeConfig `protobuf:"bytes,1,rep,name=per_config_rtds_generator_type_configuration,json=perConfigRtdsGeneratorTypeConfiguration,proto3" json:"per_config_rtds_generator_type_configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Mapping from typeUrl of registered experiment type to its ECDS resource generator configuration.
	PerConfigEcdsGeneratorTypeConfiguration map[string]*Config_PerConfigECDSResourceGeneratorTypeConfig `protobuf:"bytes,2,rep,name=per_config_ecds_generator_type_configuration,json=perConfigEcdsGeneratorTypeConfiguration,proto3" json:"per_config_ecds_generator_type_configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Interval in seconds between refreshes of xDS data from the backing store.
	CacheRefreshInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=cache_refresh_interval,json=cacheRefreshInterval,proto3" json:"cache_refresh_interval,omitempty"`
	// Name of the RTDS layer in Envoy config i.e. envoy.yaml
	// https://www.envoyproxy.io/docs/envoy/latest/configuration/operations/runtime#config-runtime-rtds.
	RtdsLayerName string `protobuf:"bytes,4,opt,name=rtds_layer_name,json=rtdsLayerName,proto3" json:"rtds_layer_name,omitempty"`
	// The resource TTL to set for xDS resources.
	ResourceTtl *durationpb.Duration `protobuf:"bytes,5,opt,name=resource_ttl,json=resourceTtl,proto3" json:"resource_ttl,omitempty"`
	// The interval at which to send heartbeat responses for TTL'd resources.
	HeartbeatInterval *durationpb.Duration `protobuf:"bytes,6,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	// Specifies which clusters ECDS is enabled for, causing faults to be communicated over ECDS instead of RTDS where
	// supported. Currently, allowing all cluster is not supported.
	EcdsAllowList *Config_ECDSAllowList `protobuf:"bytes,7,opt,name=ecds_allow_list,json=ecdsAllowList,proto3" json:"ecds_allow_list,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetPerConfigRtdsGeneratorTypeConfiguration() map[string]*Config_PerConfigRTDSResourceGeneratorTypeConfig {
	if x != nil {
		return x.PerConfigRtdsGeneratorTypeConfiguration
	}
	return nil
}

func (x *Config) GetPerConfigEcdsGeneratorTypeConfiguration() map[string]*Config_PerConfigECDSResourceGeneratorTypeConfig {
	if x != nil {
		return x.PerConfigEcdsGeneratorTypeConfiguration
	}
	return nil
}

func (x *Config) GetCacheRefreshInterval() *durationpb.Duration {
	if x != nil {
		return x.CacheRefreshInterval
	}
	return nil
}

func (x *Config) GetRtdsLayerName() string {
	if x != nil {
		return x.RtdsLayerName
	}
	return ""
}

func (x *Config) GetResourceTtl() *durationpb.Duration {
	if x != nil {
		return x.ResourceTtl
	}
	return nil
}

func (x *Config) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *Config) GetEcdsAllowList() *Config_ECDSAllowList {
	if x != nil {
		return x.EcdsAllowList
	}
	return nil
}

type Config_PerConfigRTDSResourceGeneratorTypeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of RTDS resource generators to evaluate for each config type.
	ResourceGenerators []*anypb.Any `protobuf:"bytes,1,rep,name=resource_generators,json=resourceGenerators,proto3" json:"resource_generators,omitempty"`
}

func (x *Config_PerConfigRTDSResourceGeneratorTypeConfig) Reset() {
	*x = Config_PerConfigRTDSResourceGeneratorTypeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_PerConfigRTDSResourceGeneratorTypeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_PerConfigRTDSResourceGeneratorTypeConfig) ProtoMessage() {}

func (x *Config_PerConfigRTDSResourceGeneratorTypeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_PerConfigRTDSResourceGeneratorTypeConfig.ProtoReflect.Descriptor instead.
func (*Config_PerConfigRTDSResourceGeneratorTypeConfig) Descriptor() ([]byte, []int) {
	return file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Config_PerConfigRTDSResourceGeneratorTypeConfig) GetResourceGenerators() []*anypb.Any {
	if x != nil {
		return x.ResourceGenerators
	}
	return nil
}

type Config_PerConfigECDSResourceGeneratorTypeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of ECDS resource generators to evaluate for each config type.
	ResourceGenerators []*anypb.Any `protobuf:"bytes,1,rep,name=resource_generators,json=resourceGenerators,proto3" json:"resource_generators,omitempty"`
}

func (x *Config_PerConfigECDSResourceGeneratorTypeConfig) Reset() {
	*x = Config_PerConfigECDSResourceGeneratorTypeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_PerConfigECDSResourceGeneratorTypeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_PerConfigECDSResourceGeneratorTypeConfig) ProtoMessage() {}

func (x *Config_PerConfigECDSResourceGeneratorTypeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_PerConfigECDSResourceGeneratorTypeConfig.ProtoReflect.Descriptor instead.
func (*Config_PerConfigECDSResourceGeneratorTypeConfig) Descriptor() ([]byte, []int) {
	return file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Config_PerConfigECDSResourceGeneratorTypeConfig) GetResourceGenerators() []*anypb.Any {
	if x != nil {
		return x.ResourceGenerators
	}
	return nil
}

type Config_ECDSAllowList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnabledClusters []string `protobuf:"bytes,1,rep,name=enabled_clusters,json=enabledClusters,proto3" json:"enabled_clusters,omitempty"`
}

func (x *Config_ECDSAllowList) Reset() {
	*x = Config_ECDSAllowList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_ECDSAllowList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_ECDSAllowList) ProtoMessage() {}

func (x *Config_ECDSAllowList) ProtoReflect() protoreflect.Message {
	mi := &file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_ECDSAllowList.ProtoReflect.Descriptor instead.
func (*Config_ECDSAllowList) Descriptor() ([]byte, []int) {
	return file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Config_ECDSAllowList) GetEnabledClusters() []string {
	if x != nil {
		return x.EnabledClusters
	}
	return nil
}

var File_config_module_chaos_experimentation_xds_v1_xds_proto protoreflect.FileDescriptor

var file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDesc = []byte{
	0x0a, 0x34, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x63, 0x68, 0x61, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x78, 0x64, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x0b,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc5, 0x01, 0x0a, 0x2c, 0x70, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x74, 0x64, 0x73, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x66, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x78, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x74, 0x64, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x27, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x74, 0x64, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xc5, 0x01, 0x0a, 0x2c, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x65, 0x63, 0x64, 0x73, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x63, 0x64, 0x73,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x27, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x63, 0x64, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x16, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0xaa, 0x01, 0x04, 0x2a, 0x02, 0x08, 0x00, 0x52,
	0x14, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x0f, 0x72, 0x74, 0x64, 0x73, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0d, 0x72, 0x74, 0x64, 0x73, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0xaa, 0x01, 0x04, 0x2a,
	0x02, 0x08, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x74, 0x6c,
	0x12, 0x54, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0xaa, 0x01, 0x04, 0x2a,
	0x02, 0x08, 0x00, 0x52, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x6f, 0x0a, 0x0f, 0x65, 0x63, 0x64, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x78, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x43, 0x44, 0x53, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x65, 0x63, 0x64, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x7b, 0x0a, 0x28, 0x50, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x54, 0x44, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x1a, 0x7b, 0x0a, 0x28, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x43, 0x44, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x4f, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x12, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x1a, 0xbe, 0x01, 0x0a, 0x2c, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x74, 0x64, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x78, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x78, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x54, 0x44, 0x53, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0xbe, 0x01, 0x0a, 0x2c, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x63, 0x64, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x78, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6f,
	0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x43, 0x44, 0x53, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x0d, 0x45, 0x43, 0x44, 0x53, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x42, 0x55, 0x5a, 0x53, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x79, 0x66, 0x74, 0x2f, 0x63, 0x6c, 0x75,
	0x74, 0x63, 0x68, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x68,
	0x61, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x78, 0x64, 0x73, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDescOnce sync.Once
	file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDescData = file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDesc
)

func file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDescGZIP() []byte {
	file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDescOnce.Do(func() {
		file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDescData)
	})
	return file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDescData
}

var file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_config_module_chaos_experimentation_xds_v1_xds_proto_goTypes = []interface{}{
	(*Config)(nil), // 0: clutch.config.module.chaos.experimentation.xds.v1.Config
	(*Config_PerConfigRTDSResourceGeneratorTypeConfig)(nil), // 1: clutch.config.module.chaos.experimentation.xds.v1.Config.PerConfigRTDSResourceGeneratorTypeConfig
	(*Config_PerConfigECDSResourceGeneratorTypeConfig)(nil), // 2: clutch.config.module.chaos.experimentation.xds.v1.Config.PerConfigECDSResourceGeneratorTypeConfig
	nil,                          // 3: clutch.config.module.chaos.experimentation.xds.v1.Config.PerConfigRtdsGeneratorTypeConfigurationEntry
	nil,                          // 4: clutch.config.module.chaos.experimentation.xds.v1.Config.PerConfigEcdsGeneratorTypeConfigurationEntry
	(*Config_ECDSAllowList)(nil), // 5: clutch.config.module.chaos.experimentation.xds.v1.Config.ECDSAllowList
	(*durationpb.Duration)(nil),  // 6: google.protobuf.Duration
	(*anypb.Any)(nil),            // 7: google.protobuf.Any
}
var file_config_module_chaos_experimentation_xds_v1_xds_proto_depIdxs = []int32{
	3,  // 0: clutch.config.module.chaos.experimentation.xds.v1.Config.per_config_rtds_generator_type_configuration:type_name -> clutch.config.module.chaos.experimentation.xds.v1.Config.PerConfigRtdsGeneratorTypeConfigurationEntry
	4,  // 1: clutch.config.module.chaos.experimentation.xds.v1.Config.per_config_ecds_generator_type_configuration:type_name -> clutch.config.module.chaos.experimentation.xds.v1.Config.PerConfigEcdsGeneratorTypeConfigurationEntry
	6,  // 2: clutch.config.module.chaos.experimentation.xds.v1.Config.cache_refresh_interval:type_name -> google.protobuf.Duration
	6,  // 3: clutch.config.module.chaos.experimentation.xds.v1.Config.resource_ttl:type_name -> google.protobuf.Duration
	6,  // 4: clutch.config.module.chaos.experimentation.xds.v1.Config.heartbeat_interval:type_name -> google.protobuf.Duration
	5,  // 5: clutch.config.module.chaos.experimentation.xds.v1.Config.ecds_allow_list:type_name -> clutch.config.module.chaos.experimentation.xds.v1.Config.ECDSAllowList
	7,  // 6: clutch.config.module.chaos.experimentation.xds.v1.Config.PerConfigRTDSResourceGeneratorTypeConfig.resource_generators:type_name -> google.protobuf.Any
	7,  // 7: clutch.config.module.chaos.experimentation.xds.v1.Config.PerConfigECDSResourceGeneratorTypeConfig.resource_generators:type_name -> google.protobuf.Any
	1,  // 8: clutch.config.module.chaos.experimentation.xds.v1.Config.PerConfigRtdsGeneratorTypeConfigurationEntry.value:type_name -> clutch.config.module.chaos.experimentation.xds.v1.Config.PerConfigRTDSResourceGeneratorTypeConfig
	2,  // 9: clutch.config.module.chaos.experimentation.xds.v1.Config.PerConfigEcdsGeneratorTypeConfigurationEntry.value:type_name -> clutch.config.module.chaos.experimentation.xds.v1.Config.PerConfigECDSResourceGeneratorTypeConfig
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_config_module_chaos_experimentation_xds_v1_xds_proto_init() }
func file_config_module_chaos_experimentation_xds_v1_xds_proto_init() {
	if File_config_module_chaos_experimentation_xds_v1_xds_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_PerConfigRTDSResourceGeneratorTypeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_PerConfigECDSResourceGeneratorTypeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_ECDSAllowList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_module_chaos_experimentation_xds_v1_xds_proto_goTypes,
		DependencyIndexes: file_config_module_chaos_experimentation_xds_v1_xds_proto_depIdxs,
		MessageInfos:      file_config_module_chaos_experimentation_xds_v1_xds_proto_msgTypes,
	}.Build()
	File_config_module_chaos_experimentation_xds_v1_xds_proto = out.File
	file_config_module_chaos_experimentation_xds_v1_xds_proto_rawDesc = nil
	file_config_module_chaos_experimentation_xds_v1_xds_proto_goTypes = nil
	file_config_module_chaos_experimentation_xds_v1_xds_proto_depIdxs = nil
}
