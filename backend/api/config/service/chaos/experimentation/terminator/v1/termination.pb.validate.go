// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config/service/chaos/experimentation/terminator/v1/termination.proto

package terminatorv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Config) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetPerConfigTypeConfiguration() {
		_ = val

		// no validation rules for PerConfigTypeConfiguration[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  fmt.Sprintf("PerConfigTypeConfiguration[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if d := m.GetOuterLoopInterval(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			return ConfigValidationError{
				field:  "OuterLoopInterval",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		gt := time.Duration(0*time.Second + 0*time.Nanosecond)

		if dur <= gt {
			return ConfigValidationError{
				field:  "OuterLoopInterval",
				reason: "value must be greater than 0s",
			}
		}

	}

	if d := m.GetPerExperimentCheckInterval(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			return ConfigValidationError{
				field:  "PerExperimentCheckInterval",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		gt := time.Duration(0*time.Second + 0*time.Nanosecond)

		if dur <= gt {
			return ConfigValidationError{
				field:  "PerExperimentCheckInterval",
				reason: "value must be greater than 0s",
			}
		}

	}

	return nil
}

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on MaxTimeTerminationCriterion with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxTimeTerminationCriterion) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetMaxDuration(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			return MaxTimeTerminationCriterionValidationError{
				field:  "MaxDuration",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		gt := time.Duration(0*time.Second + 0*time.Nanosecond)

		if dur <= gt {
			return MaxTimeTerminationCriterionValidationError{
				field:  "MaxDuration",
				reason: "value must be greater than 0s",
			}
		}

	}

	return nil
}

// MaxTimeTerminationCriterionValidationError is the validation error returned
// by MaxTimeTerminationCriterion.Validate if the designated constraints
// aren't met.
type MaxTimeTerminationCriterionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxTimeTerminationCriterionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxTimeTerminationCriterionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxTimeTerminationCriterionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxTimeTerminationCriterionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxTimeTerminationCriterionValidationError) ErrorName() string {
	return "MaxTimeTerminationCriterionValidationError"
}

// Error satisfies the builtin error interface
func (e MaxTimeTerminationCriterionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxTimeTerminationCriterion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxTimeTerminationCriterionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxTimeTerminationCriterionValidationError{}

// Validate checks the field values on Config_PerConfigTypeConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Config_PerConfigTypeConfig) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTerminationCriteria()) < 1 {
		return Config_PerConfigTypeConfigValidationError{
			field:  "TerminationCriteria",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetTerminationCriteria() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Config_PerConfigTypeConfigValidationError{
					field:  fmt.Sprintf("TerminationCriteria[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// Config_PerConfigTypeConfigValidationError is the validation error returned
// by Config_PerConfigTypeConfig.Validate if the designated constraints aren't met.
type Config_PerConfigTypeConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Config_PerConfigTypeConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Config_PerConfigTypeConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Config_PerConfigTypeConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Config_PerConfigTypeConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Config_PerConfigTypeConfigValidationError) ErrorName() string {
	return "Config_PerConfigTypeConfigValidationError"
}

// Error satisfies the builtin error interface
func (e Config_PerConfigTypeConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig_PerConfigTypeConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Config_PerConfigTypeConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Config_PerConfigTypeConfigValidationError{}
