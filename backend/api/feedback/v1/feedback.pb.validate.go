// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: feedback/v1/feedback.proto

package feedbackv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetSurveysRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetSurveysRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetOrigins()) < 1 {
		return GetSurveysRequestValidationError{
			field:  "Origins",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetOrigins() {
		_, _ = idx, item

		if _, ok := _GetSurveysRequest_Origins_NotInLookup[item]; ok {
			return GetSurveysRequestValidationError{
				field:  fmt.Sprintf("Origins[%v]", idx),
				reason: "value must not be in list [0]",
			}
		}

		if _, ok := Origin_name[int32(item)]; !ok {
			return GetSurveysRequestValidationError{
				field:  fmt.Sprintf("Origins[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
		}

	}

	// no validation rules for User

	return nil
}

// GetSurveysRequestValidationError is the validation error returned by
// GetSurveysRequest.Validate if the designated constraints aren't met.
type GetSurveysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSurveysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSurveysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSurveysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSurveysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSurveysRequestValidationError) ErrorName() string {
	return "GetSurveysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSurveysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSurveysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSurveysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSurveysRequestValidationError{}

var _GetSurveysRequest_Origins_NotInLookup = map[Origin]struct{}{
	0: {},
}

// Validate checks the field values on RatingOptions with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RatingOptions) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for One

	// no validation rules for Two

	// no validation rules for Three

	return nil
}

// RatingOptionsValidationError is the validation error returned by
// RatingOptions.Validate if the designated constraints aren't met.
type RatingOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RatingOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RatingOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RatingOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RatingOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RatingOptionsValidationError) ErrorName() string { return "RatingOptionsValidationError" }

// Error satisfies the builtin error interface
func (e RatingOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRatingOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RatingOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RatingOptionsValidationError{}

// Validate checks the field values on Survey with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Survey) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Prompt

	// no validation rules for FreeformPrompt

	if v, ok := interface{}(m.GetRatingOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyValidationError{
				field:  "RatingOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Show

	return nil
}

// SurveyValidationError is the validation error returned by Survey.Validate if
// the designated constraints aren't met.
type SurveyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurveyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurveyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurveyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurveyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurveyValidationError) ErrorName() string { return "SurveyValidationError" }

// Error satisfies the builtin error interface
func (e SurveyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurvey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurveyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurveyValidationError{}

// Validate checks the field values on GetSurveysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSurveysResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetOriginSurvey() {
		_ = val

		// no validation rules for OriginSurvey[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSurveysResponseValidationError{
					field:  fmt.Sprintf("OriginSurvey[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetSurveysResponseValidationError is the validation error returned by
// GetSurveysResponse.Validate if the designated constraints aren't met.
type GetSurveysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSurveysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSurveysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSurveysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSurveysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSurveysResponseValidationError) ErrorName() string {
	return "GetSurveysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSurveysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSurveysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSurveysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSurveysResponseValidationError{}

// Validate checks the field values on FeedbackMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FeedbackMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetOrigin()) < 1 {
		return FeedbackMetadataValidationError{
			field:  "Origin",
			reason: "value length must be at least 1 bytes",
		}
	}

	if m.GetSurvey() == nil {
		return FeedbackMetadataValidationError{
			field:  "Survey",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSurvey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedbackMetadataValidationError{
				field:  "Survey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserSubmitted

	return nil
}

// FeedbackMetadataValidationError is the validation error returned by
// FeedbackMetadata.Validate if the designated constraints aren't met.
type FeedbackMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackMetadataValidationError) ErrorName() string { return "FeedbackMetadataValidationError" }

// Error satisfies the builtin error interface
func (e FeedbackMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedbackMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackMetadataValidationError{}

// Validate checks the field values on Feedback with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Feedback) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetUserId()) < 1 {
		return FeedbackValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetUrlPath()) < 1 {
		return FeedbackValidationError{
			field:  "UrlPath",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetRating()) < 1 {
		return FeedbackValidationError{
			field:  "Rating",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for FreeformResponse

	// no validation rules for FeedbackType

	if m.GetMetadata() == nil {
		return FeedbackValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedbackValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FeedbackValidationError is the validation error returned by
// Feedback.Validate if the designated constraints aren't met.
type FeedbackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackValidationError) ErrorName() string { return "FeedbackValidationError" }

// Error satisfies the builtin error interface
func (e FeedbackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedback.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackValidationError{}

// Validate checks the field values on CreateFeedbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateFeedbackRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if m.GetFeedback() == nil {
		return CreateFeedbackRequestValidationError{
			field:  "Feedback",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetFeedback()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFeedbackRequestValidationError{
				field:  "Feedback",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateFeedbackRequestValidationError is the validation error returned by
// CreateFeedbackRequest.Validate if the designated constraints aren't met.
type CreateFeedbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFeedbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFeedbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFeedbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFeedbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFeedbackRequestValidationError) ErrorName() string {
	return "CreateFeedbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFeedbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFeedbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFeedbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFeedbackRequestValidationError{}

// Validate checks the field values on CreateFeedbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateFeedbackResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateFeedbackResponseValidationError is the validation error returned by
// CreateFeedbackResponse.Validate if the designated constraints aren't met.
type CreateFeedbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFeedbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFeedbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFeedbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFeedbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFeedbackResponseValidationError) ErrorName() string {
	return "CreateFeedbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFeedbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFeedbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFeedbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFeedbackResponseValidationError{}

// Validate checks the field values on Submission with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Submission) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSubmittedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "SubmittedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFeedabck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "Feedabck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SubmissionValidationError is the validation error returned by
// Submission.Validate if the designated constraints aren't met.
type SubmissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmissionValidationError) ErrorName() string { return "SubmissionValidationError" }

// Error satisfies the builtin error interface
func (e SubmissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmissionValidationError{}
