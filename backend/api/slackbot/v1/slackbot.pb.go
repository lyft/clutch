// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: slackbot/v1/slackbot.proto

package slackbotv1

import (
	_ "github.com/lyft/clutch/backend/api/api/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// For more details, see:
// https://api.slack.com/apis/connections/events-api#receiving_events
// https://api.slack.com/enterprise/apps/reference#event
type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A verification token to validate the event originated from Slack
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// if where the event occured is an external shared channel
	IsExtSharedChannel bool `protobuf:"varint,2,opt,name=is_ext_shared_channel,json=isExtSharedChannel,proto3" json:"is_ext_shared_channel,omitempty"`
	// The unique identifier of the workspace where the event occurred
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// The unique identifier of the installed Slack application
	ApiAppId string `protobuf:"bytes,4,opt,name=api_app_id,json=apiAppId,proto3" json:"api_app_id,omitempty"`
	// The event, an object, that happened
	Event *structpb.Value `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	// Indicates which kind of event dispatch this is
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// An identifier for this specific event, globally unique across all workspaces
	EventId string `protobuf:"bytes,7,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The epoch timestamp in seconds indicating when this event was dispatched
	EventTime int64 `protobuf:"varint,9,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// An identifier for this specific event, can be used with list of authorizations to obtain a
	// full list of installations of your app that this event is visible to
	EventContext string `protobuf:"bytes,8,opt,name=event_context,json=eventContext,proto3" json:"event_context,omitempty"`
	// An installation of the app, object type
	Authorizations *structpb.Value `protobuf:"bytes,10,opt,name=authorizations,proto3" json:"authorizations,omitempty"`
	// A randomly generated string produced by Slack. Used as part of the URL verification handshake
	// https://api.slack.com/apis/connections/events-api#the-events-api__subscribing-to-event-types__events-api-request-urls__request-url-configuration--verification__url-verification-handshake
	Challenge string `protobuf:"bytes,11,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slackbot_v1_slackbot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_slackbot_v1_slackbot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_slackbot_v1_slackbot_proto_rawDescGZIP(), []int{0}
}

func (x *EventRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *EventRequest) GetIsExtSharedChannel() bool {
	if x != nil {
		return x.IsExtSharedChannel
	}
	return false
}

func (x *EventRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *EventRequest) GetApiAppId() string {
	if x != nil {
		return x.ApiAppId
	}
	return ""
}

func (x *EventRequest) GetEvent() *structpb.Value {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *EventRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventRequest) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (x *EventRequest) GetEventContext() string {
	if x != nil {
		return x.EventContext
	}
	return ""
}

func (x *EventRequest) GetAuthorizations() *structpb.Value {
	if x != nil {
		return x.Authorizations
	}
	return nil
}

func (x *EventRequest) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

// Respond back to the Slack Events API with a challenge or a 2xx
// https://api.slack.com/apis/connections/events-api#the-events-api__responding-to-events
type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge string `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slackbot_v1_slackbot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_slackbot_v1_slackbot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_slackbot_v1_slackbot_proto_rawDescGZIP(), []int{1}
}

func (x *EventResponse) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

var File_slackbot_v1_slackbot_proto protoreflect.FileDescriptor

var file_slackbot_v1_slackbot_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6c,
	0x61, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6c,
	0x75, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x1a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x03, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a,
	0x15, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73,
	0x45, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x70, 0x69, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x32, 0x80, 0x01, 0x0a, 0x0b, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x42,
	0x6f, 0x74, 0x41, 0x50, 0x49, 0x12, 0x71, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x62,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x3a,
	0x01, 0x2a, 0xaa, 0xe1, 0x1c, 0x02, 0x08, 0x02, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x79, 0x66, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x74,
	0x63, 0x68, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x6c, 0x61, 0x63, 0x6b,
	0x62, 0x6f, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_slackbot_v1_slackbot_proto_rawDescOnce sync.Once
	file_slackbot_v1_slackbot_proto_rawDescData = file_slackbot_v1_slackbot_proto_rawDesc
)

func file_slackbot_v1_slackbot_proto_rawDescGZIP() []byte {
	file_slackbot_v1_slackbot_proto_rawDescOnce.Do(func() {
		file_slackbot_v1_slackbot_proto_rawDescData = protoimpl.X.CompressGZIP(file_slackbot_v1_slackbot_proto_rawDescData)
	})
	return file_slackbot_v1_slackbot_proto_rawDescData
}

var file_slackbot_v1_slackbot_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_slackbot_v1_slackbot_proto_goTypes = []interface{}{
	(*EventRequest)(nil),   // 0: clutch.slackbot.v1.EventRequest
	(*EventResponse)(nil),  // 1: clutch.slackbot.v1.EventResponse
	(*structpb.Value)(nil), // 2: google.protobuf.Value
}
var file_slackbot_v1_slackbot_proto_depIdxs = []int32{
	2, // 0: clutch.slackbot.v1.EventRequest.event:type_name -> google.protobuf.Value
	2, // 1: clutch.slackbot.v1.EventRequest.authorizations:type_name -> google.protobuf.Value
	0, // 2: clutch.slackbot.v1.SlackBotAPI.Event:input_type -> clutch.slackbot.v1.EventRequest
	1, // 3: clutch.slackbot.v1.SlackBotAPI.Event:output_type -> clutch.slackbot.v1.EventResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_slackbot_v1_slackbot_proto_init() }
func file_slackbot_v1_slackbot_proto_init() {
	if File_slackbot_v1_slackbot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_slackbot_v1_slackbot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slackbot_v1_slackbot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_slackbot_v1_slackbot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_slackbot_v1_slackbot_proto_goTypes,
		DependencyIndexes: file_slackbot_v1_slackbot_proto_depIdxs,
		MessageInfos:      file_slackbot_v1_slackbot_proto_msgTypes,
	}.Build()
	File_slackbot_v1_slackbot_proto = out.File
	file_slackbot_v1_slackbot_proto_rawDesc = nil
	file_slackbot_v1_slackbot_proto_goTypes = nil
	file_slackbot_v1_slackbot_proto_depIdxs = nil
}
