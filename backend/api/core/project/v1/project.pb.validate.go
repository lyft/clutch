// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/project/v1/project.proto

package projectv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Project) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProjectMultiError, or nil if none found.
func (m *Project) ValidateAll() error {
	return m.validate(true)
}

func (m *Project) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Tier

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ProjectValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ProjectValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ProjectValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetDependencies()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "Dependencies",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "Dependencies",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDependencies()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "Dependencies",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOncall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "Oncall",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "Oncall",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOncall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "Oncall",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectMultiError(errors)
	}
	return nil
}

// ProjectMultiError is an error wrapping multiple validation errors returned
// by Project.ValidateAll() if the designated constraints aren't met.
type ProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMultiError) AllErrors() []error { return m }

// ProjectValidationError is the validation error returned by Project.Validate
// if the designated constraints aren't met.
type ProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectValidationError) ErrorName() string { return "ProjectValidationError" }

// Error satisfies the builtin error interface
func (e ProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectValidationError{}

// Validate checks the field values on ProjectDependencies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectDependencies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectDependencies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectDependenciesMultiError, or nil if none found.
func (m *ProjectDependencies) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectDependencies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetUpstreams()))
		i := 0
		for key := range m.GetUpstreams() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetUpstreams()[key]
			_ = val

			// no validation rules for Upstreams[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ProjectDependenciesValidationError{
							field:  fmt.Sprintf("Upstreams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ProjectDependenciesValidationError{
							field:  fmt.Sprintf("Upstreams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ProjectDependenciesValidationError{
						field:  fmt.Sprintf("Upstreams[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetDownstreams()))
		i := 0
		for key := range m.GetDownstreams() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDownstreams()[key]
			_ = val

			// no validation rules for Downstreams[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ProjectDependenciesValidationError{
							field:  fmt.Sprintf("Downstreams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ProjectDependenciesValidationError{
							field:  fmt.Sprintf("Downstreams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ProjectDependenciesValidationError{
						field:  fmt.Sprintf("Downstreams[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ProjectDependenciesMultiError(errors)
	}
	return nil
}

// ProjectDependenciesMultiError is an error wrapping multiple validation
// errors returned by ProjectDependencies.ValidateAll() if the designated
// constraints aren't met.
type ProjectDependenciesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectDependenciesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectDependenciesMultiError) AllErrors() []error { return m }

// ProjectDependenciesValidationError is the validation error returned by
// ProjectDependencies.Validate if the designated constraints aren't met.
type ProjectDependenciesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectDependenciesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectDependenciesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectDependenciesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectDependenciesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectDependenciesValidationError) ErrorName() string {
	return "ProjectDependenciesValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectDependenciesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectDependencies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectDependenciesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectDependenciesValidationError{}

// Validate checks the field values on Dependency with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Dependency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Dependency with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DependencyMultiError, or
// nil if none found.
func (m *Dependency) ValidateAll() error {
	return m.validate(true)
}

func (m *Dependency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DependencyMultiError(errors)
	}
	return nil
}

// DependencyMultiError is an error wrapping multiple validation errors
// returned by Dependency.ValidateAll() if the designated constraints aren't met.
type DependencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DependencyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DependencyMultiError) AllErrors() []error { return m }

// DependencyValidationError is the validation error returned by
// Dependency.Validate if the designated constraints aren't met.
type DependencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DependencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DependencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DependencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DependencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DependencyValidationError) ErrorName() string { return "DependencyValidationError" }

// Error satisfies the builtin error interface
func (e DependencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDependency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DependencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DependencyValidationError{}

// Validate checks the field values on OnCall with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OnCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnCall with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OnCallMultiError, or nil if none found.
func (m *OnCall) ValidateAll() error {
	return m.validate(true)
}

func (m *OnCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagerduty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OnCallValidationError{
					field:  "Pagerduty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OnCallValidationError{
					field:  "Pagerduty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagerduty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnCallValidationError{
				field:  "Pagerduty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OnCallMultiError(errors)
	}
	return nil
}

// OnCallMultiError is an error wrapping multiple validation errors returned by
// OnCall.ValidateAll() if the designated constraints aren't met.
type OnCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnCallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnCallMultiError) AllErrors() []error { return m }

// OnCallValidationError is the validation error returned by OnCall.Validate if
// the designated constraints aren't met.
type OnCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnCallValidationError) ErrorName() string { return "OnCallValidationError" }

// Error satisfies the builtin error interface
func (e OnCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnCallValidationError{}

// Validate checks the field values on PagerDuty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PagerDuty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagerDuty with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PagerDutyMultiError, or nil
// if none found.
func (m *PagerDuty) ValidateAll() error {
	return m.validate(true)
}

func (m *PagerDuty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PagerDutyMultiError(errors)
	}
	return nil
}

// PagerDutyMultiError is an error wrapping multiple validation errors returned
// by PagerDuty.ValidateAll() if the designated constraints aren't met.
type PagerDutyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagerDutyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagerDutyMultiError) AllErrors() []error { return m }

// PagerDutyValidationError is the validation error returned by
// PagerDuty.Validate if the designated constraints aren't met.
type PagerDutyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagerDutyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagerDutyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagerDutyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagerDutyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagerDutyValidationError) ErrorName() string { return "PagerDutyValidationError" }

// Error satisfies the builtin error interface
func (e PagerDutyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagerDuty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagerDutyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagerDutyValidationError{}
