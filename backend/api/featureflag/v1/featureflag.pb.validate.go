// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: featureflag/v1/featureflag.proto

package featureflagv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetFlagsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetFlagsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetFlagsRequestValidationError is the validation error returned by
// GetFlagsRequest.Validate if the designated constraints aren't met.
type GetFlagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFlagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFlagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFlagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFlagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFlagsRequestValidationError) ErrorName() string { return "GetFlagsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFlagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFlagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFlagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFlagsRequestValidationError{}

// Validate checks the field values on Flag with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Flag) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *Flag_BooleanValue:
		// no validation rules for BooleanValue

	}

	return nil
}

// FlagValidationError is the validation error returned by Flag.Validate if the
// designated constraints aren't met.
type FlagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlagValidationError) ErrorName() string { return "FlagValidationError" }

// Error satisfies the builtin error interface
func (e FlagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlagValidationError{}

// Validate checks the field values on GetFlagsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetFlagsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetFlags() {
		_ = val

		// no validation rules for Flags[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFlagsResponseValidationError{
					field:  fmt.Sprintf("Flags[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetFlagsResponseValidationError is the validation error returned by
// GetFlagsResponse.Validate if the designated constraints aren't met.
type GetFlagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFlagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFlagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFlagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFlagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFlagsResponseValidationError) ErrorName() string { return "GetFlagsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFlagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFlagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFlagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFlagsResponseValidationError{}
