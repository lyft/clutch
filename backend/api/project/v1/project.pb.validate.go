// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: project/v1/project.proto

package projectv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetProjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetProjectsRequestValidationError is the validation error returned by
// GetProjectsRequest.Validate if the designated constraints aren't met.
type GetProjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectsRequestValidationError) ErrorName() string {
	return "GetProjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectsRequestValidationError{}

// Validate checks the field values on ProjectResult with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProjectResult) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectResultValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectResultValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProjectResultValidationError is the validation error returned by
// ProjectResult.Validate if the designated constraints aren't met.
type ProjectResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectResultValidationError) ErrorName() string { return "ProjectResultValidationError" }

// Error satisfies the builtin error interface
func (e ProjectResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectResultValidationError{}

// Validate checks the field values on GetProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetResults() {
		_ = val

		// no validation rules for Results[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProjectsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetProjectsResponseValidationError is the validation error returned by
// GetProjectsResponse.Validate if the designated constraints aren't met.
type GetProjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectsResponseValidationError) ErrorName() string {
	return "GetProjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectsResponseValidationError{}

// Validate checks the field values on ProjectResult_From with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProjectResult_From) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Selected

	return nil
}

// ProjectResult_FromValidationError is the validation error returned by
// ProjectResult_From.Validate if the designated constraints aren't met.
type ProjectResult_FromValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectResult_FromValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectResult_FromValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectResult_FromValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectResult_FromValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectResult_FromValidationError) ErrorName() string {
	return "ProjectResult_FromValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectResult_FromValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectResult_From.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectResult_FromValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectResult_FromValidationError{}
