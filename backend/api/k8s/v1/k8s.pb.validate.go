// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: k8s/v1/k8s.proto

package k8sv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _k_8_s_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DescribePodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribePodRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetClientset()) < 1 {
		return DescribePodRequestValidationError{
			field:  "Clientset",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetCluster()) < 1 {
		return DescribePodRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetNamespace()) < 1 {
		return DescribePodRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetName()) < 1 {
		return DescribePodRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	for key, val := range m.GetLabels() {
		_ = val

		if len(key) < 1 {
			return DescribePodRequestValidationError{
				field:  fmt.Sprintf("Labels[%v]", key),
				reason: "value length must be at least 1 bytes",
			}
		}

		// no validation rules for Labels[key]
	}

	return nil
}

// DescribePodRequestValidationError is the validation error returned by
// DescribePodRequest.Validate if the designated constraints aren't met.
type DescribePodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePodRequestValidationError) ErrorName() string {
	return "DescribePodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePodRequestValidationError{}

// Validate checks the field values on DescribePodResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribePodResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribePodResponseValidationError{
				field:  "Pod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribePodResponseValidationError is the validation error returned by
// DescribePodResponse.Validate if the designated constraints aren't met.
type DescribePodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePodResponseValidationError) ErrorName() string {
	return "DescribePodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePodResponseValidationError{}

// Validate checks the field values on Container with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Container) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for State

	// no validation rules for Ready

	return nil
}

// ContainerValidationError is the validation error returned by
// Container.Validate if the designated constraints aren't met.
type ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerValidationError) ErrorName() string { return "ContainerValidationError" }

// Error satisfies the builtin error interface
func (e ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerValidationError{}

// Validate checks the field values on Pod with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Pod) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Cluster

	// no validation rules for Namespace

	// no validation rules for Name

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PodValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NodeIp

	// no validation rules for PodIp

	// no validation rules for State

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	// no validation rules for Annotations

	return nil
}

// PodValidationError is the validation error returned by Pod.Validate if the
// designated constraints aren't met.
type PodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodValidationError) ErrorName() string { return "PodValidationError" }

// Error satisfies the builtin error interface
func (e PodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodValidationError{}

// Validate checks the field values on ListPodsOptions with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListPodsOptions) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Labels

	return nil
}

// ListPodsOptionsValidationError is the validation error returned by
// ListPodsOptions.Validate if the designated constraints aren't met.
type ListPodsOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPodsOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPodsOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPodsOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPodsOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPodsOptionsValidationError) ErrorName() string { return "ListPodsOptionsValidationError" }

// Error satisfies the builtin error interface
func (e ListPodsOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPodsOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPodsOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPodsOptionsValidationError{}

// Validate checks the field values on DeletePodRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeletePodRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetClientset()) < 1 {
		return DeletePodRequestValidationError{
			field:  "Clientset",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetCluster()) < 1 {
		return DeletePodRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetNamespace()) < 1 {
		return DeletePodRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetName()) < 1 {
		return DeletePodRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// DeletePodRequestValidationError is the validation error returned by
// DeletePodRequest.Validate if the designated constraints aren't met.
type DeletePodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePodRequestValidationError) ErrorName() string { return "DeletePodRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeletePodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePodRequestValidationError{}

// Validate checks the field values on DeletePodResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeletePodResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeletePodResponseValidationError is the validation error returned by
// DeletePodResponse.Validate if the designated constraints aren't met.
type DeletePodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePodResponseValidationError) ErrorName() string {
	return "DeletePodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePodResponseValidationError{}

// Validate checks the field values on HPA with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *HPA) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Cluster

	// no validation rules for Namespace

	// no validation rules for Name

	if v, ok := interface{}(m.GetSizing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HPAValidationError{
				field:  "Sizing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	// no validation rules for Annotations

	return nil
}

// HPAValidationError is the validation error returned by HPA.Validate if the
// designated constraints aren't met.
type HPAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HPAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HPAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HPAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HPAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HPAValidationError) ErrorName() string { return "HPAValidationError" }

// Error satisfies the builtin error interface
func (e HPAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHPA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HPAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HPAValidationError{}

// Validate checks the field values on ResizeHPARequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResizeHPARequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetClientset()) < 1 {
		return ResizeHPARequestValidationError{
			field:  "Clientset",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetCluster()) < 1 {
		return ResizeHPARequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetNamespace()) < 1 {
		return ResizeHPARequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetName()) < 1 {
		return ResizeHPARequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	if m.GetSizing() == nil {
		return ResizeHPARequestValidationError{
			field:  "Sizing",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSizing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResizeHPARequestValidationError{
				field:  "Sizing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResizeHPARequestValidationError is the validation error returned by
// ResizeHPARequest.Validate if the designated constraints aren't met.
type ResizeHPARequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResizeHPARequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResizeHPARequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResizeHPARequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResizeHPARequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResizeHPARequestValidationError) ErrorName() string { return "ResizeHPARequestValidationError" }

// Error satisfies the builtin error interface
func (e ResizeHPARequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResizeHPARequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResizeHPARequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResizeHPARequestValidationError{}

// Validate checks the field values on ResizeHPAResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResizeHPAResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ResizeHPAResponseValidationError is the validation error returned by
// ResizeHPAResponse.Validate if the designated constraints aren't met.
type ResizeHPAResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResizeHPAResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResizeHPAResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResizeHPAResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResizeHPAResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResizeHPAResponseValidationError) ErrorName() string {
	return "ResizeHPAResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResizeHPAResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResizeHPAResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResizeHPAResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResizeHPAResponseValidationError{}

// Validate checks the field values on Deployment with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Deployment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Cluster

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for Labels

	// no validation rules for Annotations

	return nil
}

// DeploymentValidationError is the validation error returned by
// Deployment.Validate if the designated constraints aren't met.
type DeploymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentValidationError) ErrorName() string { return "DeploymentValidationError" }

// Error satisfies the builtin error interface
func (e DeploymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentValidationError{}

// Validate checks the field values on UpdateDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDeploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetClientset()) < 1 {
		return UpdateDeploymentRequestValidationError{
			field:  "Clientset",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetCluster()) < 1 {
		return UpdateDeploymentRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetNamespace()) < 1 {
		return UpdateDeploymentRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetName()) < 1 {
		return UpdateDeploymentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	if m.GetFields() == nil {
		return UpdateDeploymentRequestValidationError{
			field:  "Fields",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeploymentRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateDeploymentRequestValidationError is the validation error returned by
// UpdateDeploymentRequest.Validate if the designated constraints aren't met.
type UpdateDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeploymentRequestValidationError) ErrorName() string {
	return "UpdateDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeploymentRequestValidationError{}

// Validate checks the field values on UpdateDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDeploymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateDeploymentResponseValidationError is the validation error returned by
// UpdateDeploymentResponse.Validate if the designated constraints aren't met.
type UpdateDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeploymentResponseValidationError) ErrorName() string {
	return "UpdateDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeploymentResponseValidationError{}

// Validate checks the field values on ExpectedObjectMetaFields with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExpectedObjectMetaFields) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetLabels() {
		_ = val

		if len(key) < 1 {
			return ExpectedObjectMetaFieldsValidationError{
				field:  fmt.Sprintf("Labels[%v]", key),
				reason: "value length must be at least 1 bytes",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpectedObjectMetaFieldsValidationError{
					field:  fmt.Sprintf("Labels[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetAnnotations() {
		_ = val

		if len(key) < 1 {
			return ExpectedObjectMetaFieldsValidationError{
				field:  fmt.Sprintf("Annotations[%v]", key),
				reason: "value length must be at least 1 bytes",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpectedObjectMetaFieldsValidationError{
					field:  fmt.Sprintf("Annotations[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ExpectedObjectMetaFieldsValidationError is the validation error returned by
// ExpectedObjectMetaFields.Validate if the designated constraints aren't met.
type ExpectedObjectMetaFieldsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpectedObjectMetaFieldsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpectedObjectMetaFieldsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpectedObjectMetaFieldsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpectedObjectMetaFieldsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpectedObjectMetaFieldsValidationError) ErrorName() string {
	return "ExpectedObjectMetaFieldsValidationError"
}

// Error satisfies the builtin error interface
func (e ExpectedObjectMetaFieldsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpectedObjectMetaFields.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpectedObjectMetaFieldsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpectedObjectMetaFieldsValidationError{}

// Validate checks the field values on ObjectMetaFields with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ObjectMetaFields) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetLabels() {
		_ = val

		if len(key) < 1 {
			return ObjectMetaFieldsValidationError{
				field:  fmt.Sprintf("Labels[%v]", key),
				reason: "value length must be at least 1 bytes",
			}
		}

		// no validation rules for Labels[key]
	}

	for key, val := range m.GetAnnotations() {
		_ = val

		if len(key) < 1 {
			return ObjectMetaFieldsValidationError{
				field:  fmt.Sprintf("Annotations[%v]", key),
				reason: "value length must be at least 1 bytes",
			}
		}

		// no validation rules for Annotations[key]
	}

	return nil
}

// ObjectMetaFieldsValidationError is the validation error returned by
// ObjectMetaFields.Validate if the designated constraints aren't met.
type ObjectMetaFieldsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectMetaFieldsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectMetaFieldsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectMetaFieldsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectMetaFieldsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectMetaFieldsValidationError) ErrorName() string { return "ObjectMetaFieldsValidationError" }

// Error satisfies the builtin error interface
func (e ObjectMetaFieldsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectMetaFields.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectMetaFieldsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectMetaFieldsValidationError{}

// Validate checks the field values on RemoveObjectMetaFields with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveObjectMetaFields) Validate() error {
	if m == nil {
		return nil
	}

	_RemoveObjectMetaFields_Labels_Unique := make(map[string]struct{}, len(m.GetLabels()))

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if _, exists := _RemoveObjectMetaFields_Labels_Unique[item]; exists {
			return RemoveObjectMetaFieldsValidationError{
				field:  fmt.Sprintf("Labels[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_RemoveObjectMetaFields_Labels_Unique[item] = struct{}{}
		}

		// no validation rules for Labels[idx]
	}

	_RemoveObjectMetaFields_Annotations_Unique := make(map[string]struct{}, len(m.GetAnnotations()))

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if _, exists := _RemoveObjectMetaFields_Annotations_Unique[item]; exists {
			return RemoveObjectMetaFieldsValidationError{
				field:  fmt.Sprintf("Annotations[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_RemoveObjectMetaFields_Annotations_Unique[item] = struct{}{}
		}

		// no validation rules for Annotations[idx]
	}

	return nil
}

// RemoveObjectMetaFieldsValidationError is the validation error returned by
// RemoveObjectMetaFields.Validate if the designated constraints aren't met.
type RemoveObjectMetaFieldsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveObjectMetaFieldsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveObjectMetaFieldsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveObjectMetaFieldsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveObjectMetaFieldsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveObjectMetaFieldsValidationError) ErrorName() string {
	return "RemoveObjectMetaFieldsValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveObjectMetaFieldsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveObjectMetaFields.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveObjectMetaFieldsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveObjectMetaFieldsValidationError{}

// Validate checks the field values on HPA_Sizing with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *HPA_Sizing) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MinReplicas

	// no validation rules for MaxReplicas

	// no validation rules for CurrentReplicas

	// no validation rules for DesiredReplicas

	return nil
}

// HPA_SizingValidationError is the validation error returned by
// HPA_Sizing.Validate if the designated constraints aren't met.
type HPA_SizingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HPA_SizingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HPA_SizingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HPA_SizingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HPA_SizingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HPA_SizingValidationError) ErrorName() string { return "HPA_SizingValidationError" }

// Error satisfies the builtin error interface
func (e HPA_SizingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHPA_Sizing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HPA_SizingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HPA_SizingValidationError{}

// Validate checks the field values on ResizeHPARequest_Sizing with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResizeHPARequest_Sizing) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Min

	// no validation rules for Max

	return nil
}

// ResizeHPARequest_SizingValidationError is the validation error returned by
// ResizeHPARequest_Sizing.Validate if the designated constraints aren't met.
type ResizeHPARequest_SizingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResizeHPARequest_SizingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResizeHPARequest_SizingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResizeHPARequest_SizingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResizeHPARequest_SizingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResizeHPARequest_SizingValidationError) ErrorName() string {
	return "ResizeHPARequest_SizingValidationError"
}

// Error satisfies the builtin error interface
func (e ResizeHPARequest_SizingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResizeHPARequest_Sizing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResizeHPARequest_SizingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResizeHPARequest_SizingValidationError{}

// Validate checks the field values on UpdateDeploymentRequest_Fields with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDeploymentRequest_Fields) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetLabels() {
		_ = val

		if len(key) < 1 {
			return UpdateDeploymentRequest_FieldsValidationError{
				field:  fmt.Sprintf("Labels[%v]", key),
				reason: "value length must be at least 1 bytes",
			}
		}

		// no validation rules for Labels[key]
	}

	for key, val := range m.GetAnnotations() {
		_ = val

		if len(key) < 1 {
			return UpdateDeploymentRequest_FieldsValidationError{
				field:  fmt.Sprintf("Annotations[%v]", key),
				reason: "value length must be at least 1 bytes",
			}
		}

		// no validation rules for Annotations[key]
	}

	return nil
}

// UpdateDeploymentRequest_FieldsValidationError is the validation error
// returned by UpdateDeploymentRequest_Fields.Validate if the designated
// constraints aren't met.
type UpdateDeploymentRequest_FieldsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeploymentRequest_FieldsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeploymentRequest_FieldsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeploymentRequest_FieldsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeploymentRequest_FieldsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeploymentRequest_FieldsValidationError) ErrorName() string {
	return "UpdateDeploymentRequest_FieldsValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeploymentRequest_FieldsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeploymentRequest_Fields.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeploymentRequest_FieldsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeploymentRequest_FieldsValidationError{}
