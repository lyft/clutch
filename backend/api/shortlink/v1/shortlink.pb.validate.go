// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shortlink/v1/shortlink.proto

package shortlinkv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateShortlinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShortlinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortlinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShortlinkRequestMultiError, or nil if none found.
func (m *CreateShortlinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortlinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetPath()) < 1 {
		err := CreateShortlinkRequestValidationError{
			field:  "Path",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetState()) < 1 {
		err := CreateShortlinkRequestValidationError{
			field:  "State",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetState() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateShortlinkRequestValidationError{
						field:  fmt.Sprintf("State[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateShortlinkRequestValidationError{
						field:  fmt.Sprintf("State[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateShortlinkRequestValidationError{
					field:  fmt.Sprintf("State[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateShortlinkRequestMultiError(errors)
	}
	return nil
}

// CreateShortlinkRequestMultiError is an error wrapping multiple validation
// errors returned by CreateShortlinkRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateShortlinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortlinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortlinkRequestMultiError) AllErrors() []error { return m }

// CreateShortlinkRequestValidationError is the validation error returned by
// CreateShortlinkRequest.Validate if the designated constraints aren't met.
type CreateShortlinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortlinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortlinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortlinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortlinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortlinkRequestValidationError) ErrorName() string {
	return "CreateShortlinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortlinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortlinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortlinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortlinkRequestValidationError{}

// Validate checks the field values on CreateShortlinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShortlinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortlinkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShortlinkResponseMultiError, or nil if none found.
func (m *CreateShortlinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortlinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Link

	if len(errors) > 0 {
		return CreateShortlinkResponseMultiError(errors)
	}
	return nil
}

// CreateShortlinkResponseMultiError is an error wrapping multiple validation
// errors returned by CreateShortlinkResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateShortlinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortlinkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortlinkResponseMultiError) AllErrors() []error { return m }

// CreateShortlinkResponseValidationError is the validation error returned by
// CreateShortlinkResponse.Validate if the designated constraints aren't met.
type CreateShortlinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortlinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortlinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortlinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortlinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortlinkResponseValidationError) ErrorName() string {
	return "CreateShortlinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortlinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortlinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortlinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortlinkResponseValidationError{}

// Validate checks the field values on GetShortlinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShortlinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShortlinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShortlinkRequestMultiError, or nil if none found.
func (m *GetShortlinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShortlinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetShortlinkHash()) < 1 {
		err := GetShortlinkRequestValidationError{
			field:  "ShortlinkHash",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetShortlinkRequestMultiError(errors)
	}
	return nil
}

// GetShortlinkRequestMultiError is an error wrapping multiple validation
// errors returned by GetShortlinkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetShortlinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShortlinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShortlinkRequestMultiError) AllErrors() []error { return m }

// GetShortlinkRequestValidationError is the validation error returned by
// GetShortlinkRequest.Validate if the designated constraints aren't met.
type GetShortlinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShortlinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShortlinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShortlinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShortlinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShortlinkRequestValidationError) ErrorName() string {
	return "GetShortlinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShortlinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShortlinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShortlinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShortlinkRequestValidationError{}

// Validate checks the field values on GetShortlinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShortlinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShortlinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShortlinkResponseMultiError, or nil if none found.
func (m *GetShortlinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShortlinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	for idx, item := range m.GetState() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetShortlinkResponseValidationError{
						field:  fmt.Sprintf("State[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetShortlinkResponseValidationError{
						field:  fmt.Sprintf("State[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetShortlinkResponseValidationError{
					field:  fmt.Sprintf("State[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetShortlinkResponseMultiError(errors)
	}
	return nil
}

// GetShortlinkResponseMultiError is an error wrapping multiple validation
// errors returned by GetShortlinkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShortlinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShortlinkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShortlinkResponseMultiError) AllErrors() []error { return m }

// GetShortlinkResponseValidationError is the validation error returned by
// GetShortlinkResponse.Validate if the designated constraints aren't met.
type GetShortlinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShortlinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShortlinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShortlinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShortlinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShortlinkResponseValidationError) ErrorName() string {
	return "GetShortlinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShortlinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShortlinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShortlinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShortlinkResponseValidationError{}

// Validate checks the field values on ShareableState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareableState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareableState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareableStateMultiError,
// or nil if none found.
func (m *ShareableState) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareableState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetKey()) < 1 {
		err := ShareableStateValidationError{
			field:  "Key",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetState() == nil {
		err := ShareableStateValidationError{
			field:  "State",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetState(); a != nil {

	}

	if len(errors) > 0 {
		return ShareableStateMultiError(errors)
	}
	return nil
}

// ShareableStateMultiError is an error wrapping multiple validation errors
// returned by ShareableState.ValidateAll() if the designated constraints
// aren't met.
type ShareableStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareableStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareableStateMultiError) AllErrors() []error { return m }

// ShareableStateValidationError is the validation error returned by
// ShareableState.Validate if the designated constraints aren't met.
type ShareableStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareableStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareableStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareableStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareableStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareableStateValidationError) ErrorName() string { return "ShareableStateValidationError" }

// Error satisfies the builtin error interface
func (e ShareableStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareableState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareableStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareableStateValidationError{}
