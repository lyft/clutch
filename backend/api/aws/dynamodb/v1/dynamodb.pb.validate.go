// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aws/dynamodb/v1/dynamodb.proto

package ddbv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Table with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Table) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Region

	for idx, item := range m.GetGlobalSecondaryIndexes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TableValidationError{
					field:  fmt.Sprintf("GlobalSecondaryIndexes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetProvisionedThroughput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TableValidationError{
				field:  "ProvisionedThroughput",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	return nil
}

// TableValidationError is the validation error returned by Table.Validate if
// the designated constraints aren't met.
type TableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TableValidationError) ErrorName() string { return "TableValidationError" }

// Error satisfies the builtin error interface
func (e TableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TableValidationError{}

// Validate checks the field values on GlobalSecondaryIndex with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GlobalSecondaryIndex) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetProvisionedThroughput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalSecondaryIndexValidationError{
				field:  "ProvisionedThroughput",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	return nil
}

// GlobalSecondaryIndexValidationError is the validation error returned by
// GlobalSecondaryIndex.Validate if the designated constraints aren't met.
type GlobalSecondaryIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalSecondaryIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalSecondaryIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalSecondaryIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalSecondaryIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalSecondaryIndexValidationError) ErrorName() string {
	return "GlobalSecondaryIndexValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalSecondaryIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalSecondaryIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalSecondaryIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalSecondaryIndexValidationError{}

// Validate checks the field values on IndexUpdateAction with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IndexUpdateAction) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetIndexThroughput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexUpdateActionValidationError{
				field:  "IndexThroughput",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IndexUpdateActionValidationError is the validation error returned by
// IndexUpdateAction.Validate if the designated constraints aren't met.
type IndexUpdateActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexUpdateActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexUpdateActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexUpdateActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexUpdateActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexUpdateActionValidationError) ErrorName() string {
	return "IndexUpdateActionValidationError"
}

// Error satisfies the builtin error interface
func (e IndexUpdateActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexUpdateAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexUpdateActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexUpdateActionValidationError{}

// Validate checks the field values on Throughput with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Throughput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WriteCapacityUnits

	// no validation rules for ReadCapacityUnits

	return nil
}

// ThroughputValidationError is the validation error returned by
// Throughput.Validate if the designated constraints aren't met.
type ThroughputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThroughputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThroughputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThroughputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThroughputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThroughputValidationError) ErrorName() string { return "ThroughputValidationError" }

// Error satisfies the builtin error interface
func (e ThroughputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThroughput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThroughputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThroughputValidationError{}

// Validate checks the field values on DescribeTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeTableRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTableName()) < 1 {
		return DescribeTableRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetRegion()) < 1 {
		return DescribeTableRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// DescribeTableRequestValidationError is the validation error returned by
// DescribeTableRequest.Validate if the designated constraints aren't met.
type DescribeTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTableRequestValidationError) ErrorName() string {
	return "DescribeTableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTableRequestValidationError{}

// Validate checks the field values on DescribeTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeTableResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeTableResponseValidationError{
				field:  "Table",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeTableResponseValidationError is the validation error returned by
// DescribeTableResponse.Validate if the designated constraints aren't met.
type DescribeTableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTableResponseValidationError) ErrorName() string {
	return "DescribeTableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTableResponseValidationError{}

// Validate checks the field values on IncreaseCapacityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IncreaseCapacityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTableName()) < 1 {
		return IncreaseCapacityRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetRegion()) < 1 {
		return IncreaseCapacityRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
	}

	if v, ok := interface{}(m.GetTableThroughput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IncreaseCapacityRequestValidationError{
				field:  "TableThroughput",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetGsiUpdates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IncreaseCapacityRequestValidationError{
					field:  fmt.Sprintf("GsiUpdates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// IncreaseCapacityRequestValidationError is the validation error returned by
// IncreaseCapacityRequest.Validate if the designated constraints aren't met.
type IncreaseCapacityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncreaseCapacityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncreaseCapacityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncreaseCapacityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncreaseCapacityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncreaseCapacityRequestValidationError) ErrorName() string {
	return "IncreaseCapacityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IncreaseCapacityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncreaseCapacityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncreaseCapacityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncreaseCapacityRequestValidationError{}

// Validate checks the field values on IncreaseCapacityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IncreaseCapacityResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IncreaseCapacityResponseValidationError{
				field:  "Table",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IncreaseCapacityResponseValidationError is the validation error returned by
// IncreaseCapacityResponse.Validate if the designated constraints aren't met.
type IncreaseCapacityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncreaseCapacityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncreaseCapacityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncreaseCapacityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncreaseCapacityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncreaseCapacityResponseValidationError) ErrorName() string {
	return "IncreaseCapacityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IncreaseCapacityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncreaseCapacityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncreaseCapacityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncreaseCapacityResponseValidationError{}
