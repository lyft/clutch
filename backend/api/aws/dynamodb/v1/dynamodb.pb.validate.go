// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aws/dynamodb/v1/dynamodb.proto

package ddbv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Table with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Table) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Table with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TableMultiError, or nil if none found.
func (m *Table) ValidateAll() error {
	return m.validate(true)
}

func (m *Table) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Region

	for idx, item := range m.GetGlobalSecondaryIndexes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TableValidationError{
						field:  fmt.Sprintf("GlobalSecondaryIndexes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TableValidationError{
						field:  fmt.Sprintf("GlobalSecondaryIndexes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TableValidationError{
					field:  fmt.Sprintf("GlobalSecondaryIndexes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetProvisionedThroughput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TableValidationError{
					field:  "ProvisionedThroughput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TableValidationError{
					field:  "ProvisionedThroughput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvisionedThroughput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TableValidationError{
				field:  "ProvisionedThroughput",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for BillingMode

	// no validation rules for Account

	for idx, item := range m.GetKeySchemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TableValidationError{
						field:  fmt.Sprintf("KeySchemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TableValidationError{
						field:  fmt.Sprintf("KeySchemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TableValidationError{
					field:  fmt.Sprintf("KeySchemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttributeDefinitions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TableValidationError{
						field:  fmt.Sprintf("AttributeDefinitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TableValidationError{
						field:  fmt.Sprintf("AttributeDefinitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TableValidationError{
					field:  fmt.Sprintf("AttributeDefinitions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TableMultiError(errors)
	}

	return nil
}

// TableMultiError is an error wrapping multiple validation errors returned by
// Table.ValidateAll() if the designated constraints aren't met.
type TableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TableMultiError) AllErrors() []error { return m }

// TableValidationError is the validation error returned by Table.Validate if
// the designated constraints aren't met.
type TableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TableValidationError) ErrorName() string { return "TableValidationError" }

// Error satisfies the builtin error interface
func (e TableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TableValidationError{}

// Validate checks the field values on GlobalSecondaryIndex with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GlobalSecondaryIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalSecondaryIndex with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalSecondaryIndexMultiError, or nil if none found.
func (m *GlobalSecondaryIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalSecondaryIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetProvisionedThroughput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalSecondaryIndexValidationError{
					field:  "ProvisionedThroughput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalSecondaryIndexValidationError{
					field:  "ProvisionedThroughput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvisionedThroughput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalSecondaryIndexValidationError{
				field:  "ProvisionedThroughput",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return GlobalSecondaryIndexMultiError(errors)
	}

	return nil
}

// GlobalSecondaryIndexMultiError is an error wrapping multiple validation
// errors returned by GlobalSecondaryIndex.ValidateAll() if the designated
// constraints aren't met.
type GlobalSecondaryIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalSecondaryIndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalSecondaryIndexMultiError) AllErrors() []error { return m }

// GlobalSecondaryIndexValidationError is the validation error returned by
// GlobalSecondaryIndex.Validate if the designated constraints aren't met.
type GlobalSecondaryIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalSecondaryIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalSecondaryIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalSecondaryIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalSecondaryIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalSecondaryIndexValidationError) ErrorName() string {
	return "GlobalSecondaryIndexValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalSecondaryIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalSecondaryIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalSecondaryIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalSecondaryIndexValidationError{}

// Validate checks the field values on IndexUpdateAction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IndexUpdateAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexUpdateAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexUpdateActionMultiError, or nil if none found.
func (m *IndexUpdateAction) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexUpdateAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetIndexThroughput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexUpdateActionValidationError{
					field:  "IndexThroughput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexUpdateActionValidationError{
					field:  "IndexThroughput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndexThroughput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexUpdateActionValidationError{
				field:  "IndexThroughput",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IndexUpdateActionMultiError(errors)
	}

	return nil
}

// IndexUpdateActionMultiError is an error wrapping multiple validation errors
// returned by IndexUpdateAction.ValidateAll() if the designated constraints
// aren't met.
type IndexUpdateActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexUpdateActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexUpdateActionMultiError) AllErrors() []error { return m }

// IndexUpdateActionValidationError is the validation error returned by
// IndexUpdateAction.Validate if the designated constraints aren't met.
type IndexUpdateActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexUpdateActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexUpdateActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexUpdateActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexUpdateActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexUpdateActionValidationError) ErrorName() string {
	return "IndexUpdateActionValidationError"
}

// Error satisfies the builtin error interface
func (e IndexUpdateActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexUpdateAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexUpdateActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexUpdateActionValidationError{}

// Validate checks the field values on Throughput with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Throughput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Throughput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ThroughputMultiError, or
// nil if none found.
func (m *Throughput) ValidateAll() error {
	return m.validate(true)
}

func (m *Throughput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WriteCapacityUnits

	// no validation rules for ReadCapacityUnits

	if len(errors) > 0 {
		return ThroughputMultiError(errors)
	}

	return nil
}

// ThroughputMultiError is an error wrapping multiple validation errors
// returned by Throughput.ValidateAll() if the designated constraints aren't met.
type ThroughputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThroughputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThroughputMultiError) AllErrors() []error { return m }

// ThroughputValidationError is the validation error returned by
// Throughput.Validate if the designated constraints aren't met.
type ThroughputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThroughputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThroughputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThroughputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThroughputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThroughputValidationError) ErrorName() string { return "ThroughputValidationError" }

// Error satisfies the builtin error interface
func (e ThroughputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThroughput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThroughputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThroughputValidationError{}

// Validate checks the field values on KeySchema with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KeySchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeySchema with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KeySchemaMultiError, or nil
// if none found.
func (m *KeySchema) ValidateAll() error {
	return m.validate(true)
}

func (m *KeySchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AttributeName

	// no validation rules for Type

	if len(errors) > 0 {
		return KeySchemaMultiError(errors)
	}

	return nil
}

// KeySchemaMultiError is an error wrapping multiple validation errors returned
// by KeySchema.ValidateAll() if the designated constraints aren't met.
type KeySchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeySchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeySchemaMultiError) AllErrors() []error { return m }

// KeySchemaValidationError is the validation error returned by
// KeySchema.Validate if the designated constraints aren't met.
type KeySchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeySchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeySchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeySchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeySchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeySchemaValidationError) ErrorName() string { return "KeySchemaValidationError" }

// Error satisfies the builtin error interface
func (e KeySchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeySchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeySchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeySchemaValidationError{}

// Validate checks the field values on AttributeDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttributeDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttributeDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttributeDefinitionMultiError, or nil if none found.
func (m *AttributeDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *AttributeDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AttributeName

	// no validation rules for AttributeType

	if len(errors) > 0 {
		return AttributeDefinitionMultiError(errors)
	}

	return nil
}

// AttributeDefinitionMultiError is an error wrapping multiple validation
// errors returned by AttributeDefinition.ValidateAll() if the designated
// constraints aren't met.
type AttributeDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttributeDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttributeDefinitionMultiError) AllErrors() []error { return m }

// AttributeDefinitionValidationError is the validation error returned by
// AttributeDefinition.Validate if the designated constraints aren't met.
type AttributeDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeDefinitionValidationError) ErrorName() string {
	return "AttributeDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e AttributeDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeDefinitionValidationError{}

// Validate checks the field values on ContinuousBackups with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContinuousBackups) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContinuousBackups with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContinuousBackupsMultiError, or nil if none found.
func (m *ContinuousBackups) ValidateAll() error {
	return m.validate(true)
}

func (m *ContinuousBackups) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContinuousBackupsStatus

	// no validation rules for PointInTimeRecoveryStatus

	if all {
		switch v := interface{}(m.GetEarliestRestorableDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinuousBackupsValidationError{
					field:  "EarliestRestorableDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinuousBackupsValidationError{
					field:  "EarliestRestorableDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEarliestRestorableDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinuousBackupsValidationError{
				field:  "EarliestRestorableDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLatestRestorableDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinuousBackupsValidationError{
					field:  "LatestRestorableDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinuousBackupsValidationError{
					field:  "LatestRestorableDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatestRestorableDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinuousBackupsValidationError{
				field:  "LatestRestorableDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContinuousBackupsMultiError(errors)
	}

	return nil
}

// ContinuousBackupsMultiError is an error wrapping multiple validation errors
// returned by ContinuousBackups.ValidateAll() if the designated constraints
// aren't met.
type ContinuousBackupsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContinuousBackupsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContinuousBackupsMultiError) AllErrors() []error { return m }

// ContinuousBackupsValidationError is the validation error returned by
// ContinuousBackups.Validate if the designated constraints aren't met.
type ContinuousBackupsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContinuousBackupsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContinuousBackupsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContinuousBackupsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContinuousBackupsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContinuousBackupsValidationError) ErrorName() string {
	return "ContinuousBackupsValidationError"
}

// Error satisfies the builtin error interface
func (e ContinuousBackupsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContinuousBackups.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContinuousBackupsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContinuousBackupsValidationError{}

// Validate checks the field values on DescribeTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeTableRequestMultiError, or nil if none found.
func (m *DescribeTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetTableName()) < 1 {
		err := DescribeTableRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRegion()) < 1 {
		err := DescribeTableRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetAccount()) < 1 {
		err := DescribeTableRequestValidationError{
			field:  "Account",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeTableRequestMultiError(errors)
	}

	return nil
}

// DescribeTableRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeTableRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTableRequestMultiError) AllErrors() []error { return m }

// DescribeTableRequestValidationError is the validation error returned by
// DescribeTableRequest.Validate if the designated constraints aren't met.
type DescribeTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTableRequestValidationError) ErrorName() string {
	return "DescribeTableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTableRequestValidationError{}

// Validate checks the field values on DescribeTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeTableResponseMultiError, or nil if none found.
func (m *DescribeTableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeTableResponseValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeTableResponseValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeTableResponseValidationError{
				field:  "Table",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeTableResponseMultiError(errors)
	}

	return nil
}

// DescribeTableResponseMultiError is an error wrapping multiple validation
// errors returned by DescribeTableResponse.ValidateAll() if the designated
// constraints aren't met.
type DescribeTableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTableResponseMultiError) AllErrors() []error { return m }

// DescribeTableResponseValidationError is the validation error returned by
// DescribeTableResponse.Validate if the designated constraints aren't met.
type DescribeTableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTableResponseValidationError) ErrorName() string {
	return "DescribeTableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTableResponseValidationError{}

// Validate checks the field values on DescribeContinuousBackupsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeContinuousBackupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeContinuousBackupsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeContinuousBackupsRequestMultiError, or nil if none found.
func (m *DescribeContinuousBackupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeContinuousBackupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetTableName()) < 1 {
		err := DescribeContinuousBackupsRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRegion()) < 1 {
		err := DescribeContinuousBackupsRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetAccount()) < 1 {
		err := DescribeContinuousBackupsRequestValidationError{
			field:  "Account",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeContinuousBackupsRequestMultiError(errors)
	}

	return nil
}

// DescribeContinuousBackupsRequestMultiError is an error wrapping multiple
// validation errors returned by
// DescribeContinuousBackupsRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeContinuousBackupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeContinuousBackupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeContinuousBackupsRequestMultiError) AllErrors() []error { return m }

// DescribeContinuousBackupsRequestValidationError is the validation error
// returned by DescribeContinuousBackupsRequest.Validate if the designated
// constraints aren't met.
type DescribeContinuousBackupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeContinuousBackupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeContinuousBackupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeContinuousBackupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeContinuousBackupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeContinuousBackupsRequestValidationError) ErrorName() string {
	return "DescribeContinuousBackupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeContinuousBackupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeContinuousBackupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeContinuousBackupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeContinuousBackupsRequestValidationError{}

// Validate checks the field values on DescribeContinuousBackupsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeContinuousBackupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeContinuousBackupsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeContinuousBackupsResponseMultiError, or nil if none found.
func (m *DescribeContinuousBackupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeContinuousBackupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContinuousBackups()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeContinuousBackupsResponseValidationError{
					field:  "ContinuousBackups",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeContinuousBackupsResponseValidationError{
					field:  "ContinuousBackups",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContinuousBackups()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeContinuousBackupsResponseValidationError{
				field:  "ContinuousBackups",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeContinuousBackupsResponseMultiError(errors)
	}

	return nil
}

// DescribeContinuousBackupsResponseMultiError is an error wrapping multiple
// validation errors returned by
// DescribeContinuousBackupsResponse.ValidateAll() if the designated
// constraints aren't met.
type DescribeContinuousBackupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeContinuousBackupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeContinuousBackupsResponseMultiError) AllErrors() []error { return m }

// DescribeContinuousBackupsResponseValidationError is the validation error
// returned by DescribeContinuousBackupsResponse.Validate if the designated
// constraints aren't met.
type DescribeContinuousBackupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeContinuousBackupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeContinuousBackupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeContinuousBackupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeContinuousBackupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeContinuousBackupsResponseValidationError) ErrorName() string {
	return "DescribeContinuousBackupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeContinuousBackupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeContinuousBackupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeContinuousBackupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeContinuousBackupsResponseValidationError{}

// Validate checks the field values on UpdateCapacityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCapacityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCapacityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCapacityRequestMultiError, or nil if none found.
func (m *UpdateCapacityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCapacityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetTableName()) < 1 {
		err := UpdateCapacityRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRegion()) < 1 {
		err := UpdateCapacityRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTableThroughput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCapacityRequestValidationError{
					field:  "TableThroughput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCapacityRequestValidationError{
					field:  "TableThroughput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTableThroughput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCapacityRequestValidationError{
				field:  "TableThroughput",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetGsiUpdates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCapacityRequestValidationError{
						field:  fmt.Sprintf("GsiUpdates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCapacityRequestValidationError{
						field:  fmt.Sprintf("GsiUpdates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCapacityRequestValidationError{
					field:  fmt.Sprintf("GsiUpdates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IgnoreMaximums

	if len(m.GetAccount()) < 1 {
		err := UpdateCapacityRequestValidationError{
			field:  "Account",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCapacityRequestMultiError(errors)
	}

	return nil
}

// UpdateCapacityRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCapacityRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCapacityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCapacityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCapacityRequestMultiError) AllErrors() []error { return m }

// UpdateCapacityRequestValidationError is the validation error returned by
// UpdateCapacityRequest.Validate if the designated constraints aren't met.
type UpdateCapacityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCapacityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCapacityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCapacityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCapacityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCapacityRequestValidationError) ErrorName() string {
	return "UpdateCapacityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCapacityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCapacityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCapacityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCapacityRequestValidationError{}

// Validate checks the field values on UpdateCapacityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCapacityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCapacityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCapacityResponseMultiError, or nil if none found.
func (m *UpdateCapacityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCapacityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCapacityResponseValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCapacityResponseValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCapacityResponseValidationError{
				field:  "Table",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCapacityResponseMultiError(errors)
	}

	return nil
}

// UpdateCapacityResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCapacityResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCapacityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCapacityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCapacityResponseMultiError) AllErrors() []error { return m }

// UpdateCapacityResponseValidationError is the validation error returned by
// UpdateCapacityResponse.Validate if the designated constraints aren't met.
type UpdateCapacityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCapacityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCapacityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCapacityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCapacityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCapacityResponseValidationError) ErrorName() string {
	return "UpdateCapacityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCapacityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCapacityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCapacityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCapacityResponseValidationError{}
