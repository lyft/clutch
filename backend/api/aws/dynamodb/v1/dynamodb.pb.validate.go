// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aws/dynamodb/v1/dynamodb.proto

package ddbv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Table with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Table) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Region

	for idx, item := range m.GetGlobalSecondaryIndexes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TableValidationError{
					field:  fmt.Sprintf("GlobalSecondaryIndexes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCapacity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TableValidationError{
				field:  "Capacity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TableValidationError is the validation error returned by Table.Validate if
// the designated constraints aren't met.
type TableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TableValidationError) ErrorName() string { return "TableValidationError" }

// Error satisfies the builtin error interface
func (e TableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TableValidationError{}

// Validate checks the field values on GlobalSecondaryIndex with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GlobalSecondaryIndex) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetCapacity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalSecondaryIndexValidationError{
				field:  "Capacity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalSecondaryIndexValidationError is the validation error returned by
// GlobalSecondaryIndex.Validate if the designated constraints aren't met.
type GlobalSecondaryIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalSecondaryIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalSecondaryIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalSecondaryIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalSecondaryIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalSecondaryIndexValidationError) ErrorName() string {
	return "GlobalSecondaryIndexValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalSecondaryIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalSecondaryIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalSecondaryIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalSecondaryIndexValidationError{}

// Validate checks the field values on ProvisionedThroughput with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProvisionedThroughput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WriteCapacityUnits

	// no validation rules for ReadCapacityUnits

	return nil
}

// ProvisionedThroughputValidationError is the validation error returned by
// ProvisionedThroughput.Validate if the designated constraints aren't met.
type ProvisionedThroughputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionedThroughputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionedThroughputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionedThroughputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionedThroughputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionedThroughputValidationError) ErrorName() string {
	return "ProvisionedThroughputValidationError"
}

// Error satisfies the builtin error interface
func (e ProvisionedThroughputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionedThroughput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionedThroughputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionedThroughputValidationError{}

// Validate checks the field values on GetTableRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetTableRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTableName()) < 1 {
		return GetTableRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetRegion()) < 1 {
		return GetTableRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// GetTableRequestValidationError is the validation error returned by
// GetTableRequest.Validate if the designated constraints aren't met.
type GetTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTableRequestValidationError) ErrorName() string { return "GetTableRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTableRequestValidationError{}

// Validate checks the field values on GetTableResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetTableResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTableResponseValidationError{
				field:  "Table",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTableResponseValidationError is the validation error returned by
// GetTableResponse.Validate if the designated constraints aren't met.
type GetTableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTableResponseValidationError) ErrorName() string { return "GetTableResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTableResponseValidationError{}

// Validate checks the field values on UpdateTableCapacityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTableCapacityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTableName()) < 1 {
		return UpdateTableCapacityRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetRegion()) < 1 {
		return UpdateTableCapacityRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for TargetTableRcu

	// no validation rules for TargetTableWcu

	return nil
}

// UpdateTableCapacityRequestValidationError is the validation error returned
// by UpdateTableCapacityRequest.Validate if the designated constraints aren't met.
type UpdateTableCapacityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTableCapacityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTableCapacityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTableCapacityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTableCapacityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTableCapacityRequestValidationError) ErrorName() string {
	return "UpdateTableCapacityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTableCapacityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTableCapacityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTableCapacityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTableCapacityRequestValidationError{}

// Validate checks the field values on UpdateTableCapacityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTableCapacityResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateTableCapacityResponseValidationError is the validation error returned
// by UpdateTableCapacityResponse.Validate if the designated constraints
// aren't met.
type UpdateTableCapacityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTableCapacityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTableCapacityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTableCapacityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTableCapacityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTableCapacityResponseValidationError) ErrorName() string {
	return "UpdateTableCapacityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTableCapacityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTableCapacityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTableCapacityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTableCapacityResponseValidationError{}

// Validate checks the field values on UpdateGSICapacityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGSICapacityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTableName()) < 1 {
		return UpdateGSICapacityRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetRegion()) < 1 {
		return UpdateGSICapacityRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetIndexName()) < 1 {
		return UpdateGSICapacityRequestValidationError{
			field:  "IndexName",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for TargetIndexRcu

	// no validation rules for TargetIndexWcu

	return nil
}

// UpdateGSICapacityRequestValidationError is the validation error returned by
// UpdateGSICapacityRequest.Validate if the designated constraints aren't met.
type UpdateGSICapacityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGSICapacityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGSICapacityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGSICapacityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGSICapacityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGSICapacityRequestValidationError) ErrorName() string {
	return "UpdateGSICapacityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGSICapacityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGSICapacityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGSICapacityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGSICapacityRequestValidationError{}

// Validate checks the field values on UpdateGSICapacityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGSICapacityResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateGSICapacityResponseValidationError is the validation error returned by
// UpdateGSICapacityResponse.Validate if the designated constraints aren't met.
type UpdateGSICapacityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGSICapacityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGSICapacityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGSICapacityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGSICapacityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGSICapacityResponseValidationError) ErrorName() string {
	return "UpdateGSICapacityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGSICapacityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGSICapacityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGSICapacityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGSICapacityResponseValidationError{}
