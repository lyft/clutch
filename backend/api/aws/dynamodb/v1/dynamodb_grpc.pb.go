// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: aws/dynamodb/v1/dynamodb.proto

package ddbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DDBAPI_DescribeTable_FullMethodName             = "/clutch.aws.dynamodb.v1.DDBAPI/DescribeTable"
	DDBAPI_DescribeContinuousBackups_FullMethodName = "/clutch.aws.dynamodb.v1.DDBAPI/DescribeContinuousBackups"
	DDBAPI_UpdateCapacity_FullMethodName            = "/clutch.aws.dynamodb.v1.DDBAPI/UpdateCapacity"
)

// DDBAPIClient is the client API for DDBAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DDBAPIClient interface {
	DescribeTable(ctx context.Context, in *DescribeTableRequest, opts ...grpc.CallOption) (*DescribeTableResponse, error)
	DescribeContinuousBackups(ctx context.Context, in *DescribeContinuousBackupsRequest, opts ...grpc.CallOption) (*DescribeContinuousBackupsResponse, error)
	UpdateCapacity(ctx context.Context, in *UpdateCapacityRequest, opts ...grpc.CallOption) (*UpdateCapacityResponse, error)
}

type dDBAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDDBAPIClient(cc grpc.ClientConnInterface) DDBAPIClient {
	return &dDBAPIClient{cc}
}

func (c *dDBAPIClient) DescribeTable(ctx context.Context, in *DescribeTableRequest, opts ...grpc.CallOption) (*DescribeTableResponse, error) {
	out := new(DescribeTableResponse)
	err := c.cc.Invoke(ctx, DDBAPI_DescribeTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDBAPIClient) DescribeContinuousBackups(ctx context.Context, in *DescribeContinuousBackupsRequest, opts ...grpc.CallOption) (*DescribeContinuousBackupsResponse, error) {
	out := new(DescribeContinuousBackupsResponse)
	err := c.cc.Invoke(ctx, DDBAPI_DescribeContinuousBackups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDBAPIClient) UpdateCapacity(ctx context.Context, in *UpdateCapacityRequest, opts ...grpc.CallOption) (*UpdateCapacityResponse, error) {
	out := new(UpdateCapacityResponse)
	err := c.cc.Invoke(ctx, DDBAPI_UpdateCapacity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DDBAPIServer is the server API for DDBAPI service.
// All implementations should embed UnimplementedDDBAPIServer
// for forward compatibility
type DDBAPIServer interface {
	DescribeTable(context.Context, *DescribeTableRequest) (*DescribeTableResponse, error)
	DescribeContinuousBackups(context.Context, *DescribeContinuousBackupsRequest) (*DescribeContinuousBackupsResponse, error)
	UpdateCapacity(context.Context, *UpdateCapacityRequest) (*UpdateCapacityResponse, error)
}

// UnimplementedDDBAPIServer should be embedded to have forward compatible implementations.
type UnimplementedDDBAPIServer struct {
}

func (UnimplementedDDBAPIServer) DescribeTable(context.Context, *DescribeTableRequest) (*DescribeTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTable not implemented")
}
func (UnimplementedDDBAPIServer) DescribeContinuousBackups(context.Context, *DescribeContinuousBackupsRequest) (*DescribeContinuousBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeContinuousBackups not implemented")
}
func (UnimplementedDDBAPIServer) UpdateCapacity(context.Context, *UpdateCapacityRequest) (*UpdateCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCapacity not implemented")
}

// UnsafeDDBAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DDBAPIServer will
// result in compilation errors.
type UnsafeDDBAPIServer interface {
	mustEmbedUnimplementedDDBAPIServer()
}

func RegisterDDBAPIServer(s grpc.ServiceRegistrar, srv DDBAPIServer) {
	s.RegisterService(&DDBAPI_ServiceDesc, srv)
}

func _DDBAPI_DescribeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDBAPIServer).DescribeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DDBAPI_DescribeTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDBAPIServer).DescribeTable(ctx, req.(*DescribeTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDBAPI_DescribeContinuousBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeContinuousBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDBAPIServer).DescribeContinuousBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DDBAPI_DescribeContinuousBackups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDBAPIServer).DescribeContinuousBackups(ctx, req.(*DescribeContinuousBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDBAPI_UpdateCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDBAPIServer).UpdateCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DDBAPI_UpdateCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDBAPIServer).UpdateCapacity(ctx, req.(*UpdateCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DDBAPI_ServiceDesc is the grpc.ServiceDesc for DDBAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DDBAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clutch.aws.dynamodb.v1.DDBAPI",
	HandlerType: (*DDBAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeTable",
			Handler:    _DDBAPI_DescribeTable_Handler,
		},
		{
			MethodName: "DescribeContinuousBackups",
			Handler:    _DDBAPI_DescribeContinuousBackups_Handler,
		},
		{
			MethodName: "UpdateCapacity",
			Handler:    _DDBAPI_UpdateCapacity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aws/dynamodb/v1/dynamodb.proto",
}
