// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aws/kinesis/v1/kinesis.proto

package kinesisv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetStreamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetStreamRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StreamName

	// no validation rules for Region

	return nil
}

// GetStreamRequestValidationError is the validation error returned by
// GetStreamRequest.Validate if the designated constraints aren't met.
type GetStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStreamRequestValidationError) ErrorName() string { return "GetStreamRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStreamRequestValidationError{}

// Validate checks the field values on GetStreamResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetStreamResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStream()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStreamResponseValidationError{
				field:  "Stream",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetStreamResponseValidationError is the validation error returned by
// GetStreamResponse.Validate if the designated constraints aren't met.
type GetStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStreamResponseValidationError) ErrorName() string {
	return "GetStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStreamResponseValidationError{}

// Validate checks the field values on UpdateShardCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateShardCountRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StreamName

	// no validation rules for Region

	// no validation rules for TargetShardCount

	return nil
}

// UpdateShardCountRequestValidationError is the validation error returned by
// UpdateShardCountRequest.Validate if the designated constraints aren't met.
type UpdateShardCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShardCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShardCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShardCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShardCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShardCountRequestValidationError) ErrorName() string {
	return "UpdateShardCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShardCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShardCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShardCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShardCountRequestValidationError{}

// Validate checks the field values on UpdateShardCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateShardCountResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateShardCountResponseValidationError is the validation error returned by
// UpdateShardCountResponse.Validate if the designated constraints aren't met.
type UpdateShardCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShardCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShardCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShardCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShardCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShardCountResponseValidationError) ErrorName() string {
	return "UpdateShardCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShardCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShardCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShardCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShardCountResponseValidationError{}

// Validate checks the field values on Stream with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Stream) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StreamName

	// no validation rules for Region

	// no validation rules for CurrentShardCount

	return nil
}

// StreamValidationError is the validation error returned by Stream.Validate if
// the designated constraints aren't met.
type StreamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamValidationError) ErrorName() string { return "StreamValidationError" }

// Error satisfies the builtin error interface
func (e StreamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamValidationError{}
