// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kinesisv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// KinesisAPIClient is the client API for KinesisAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KinesisAPIClient interface {
	GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error)
	UpdateShardCount(ctx context.Context, in *UpdateShardCountRequest, opts ...grpc.CallOption) (*UpdateShardCountResponse, error)
}

type kinesisAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewKinesisAPIClient(cc grpc.ClientConnInterface) KinesisAPIClient {
	return &kinesisAPIClient{cc}
}

func (c *kinesisAPIClient) GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error) {
	out := new(GetStreamResponse)
	err := c.cc.Invoke(ctx, "/clutch.aws.kinesis.v1.KinesisAPI/GetStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kinesisAPIClient) UpdateShardCount(ctx context.Context, in *UpdateShardCountRequest, opts ...grpc.CallOption) (*UpdateShardCountResponse, error) {
	out := new(UpdateShardCountResponse)
	err := c.cc.Invoke(ctx, "/clutch.aws.kinesis.v1.KinesisAPI/UpdateShardCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KinesisAPIServer is the server API for KinesisAPI service.
// All implementations should embed UnimplementedKinesisAPIServer
// for forward compatibility
type KinesisAPIServer interface {
	GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error)
	UpdateShardCount(context.Context, *UpdateShardCountRequest) (*UpdateShardCountResponse, error)
}

// UnimplementedKinesisAPIServer should be embedded to have forward compatible implementations.
type UnimplementedKinesisAPIServer struct {
}

func (UnimplementedKinesisAPIServer) GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedKinesisAPIServer) UpdateShardCount(context.Context, *UpdateShardCountRequest) (*UpdateShardCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShardCount not implemented")
}

// UnsafeKinesisAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KinesisAPIServer will
// result in compilation errors.
type UnsafeKinesisAPIServer interface {
	mustEmbedUnimplementedKinesisAPIServer()
}

func RegisterKinesisAPIServer(s *grpc.Server, srv KinesisAPIServer) {
	s.RegisterService(&_KinesisAPI_serviceDesc, srv)
}

func _KinesisAPI_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KinesisAPIServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clutch.aws.kinesis.v1.KinesisAPI/GetStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KinesisAPIServer).GetStream(ctx, req.(*GetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KinesisAPI_UpdateShardCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShardCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KinesisAPIServer).UpdateShardCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clutch.aws.kinesis.v1.KinesisAPI/UpdateShardCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KinesisAPIServer).UpdateShardCount(ctx, req.(*UpdateShardCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KinesisAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clutch.aws.kinesis.v1.KinesisAPI",
	HandlerType: (*KinesisAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStream",
			Handler:    _KinesisAPI_GetStream_Handler,
		},
		{
			MethodName: "UpdateShardCount",
			Handler:    _KinesisAPI_UpdateShardCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aws/kinesis/v1/kinesis.proto",
}
