// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sourcegraph/v1/sourcegraph.proto

package sourcegraphv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CompareCommitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompareCommitsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetRepository()) < 1 {
		return CompareCommitsRequestValidationError{
			field:  "Repository",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetBase()) < 1 {
		return CompareCommitsRequestValidationError{
			field:  "Base",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetHead()) < 1 {
		return CompareCommitsRequestValidationError{
			field:  "Head",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// CompareCommitsRequestValidationError is the validation error returned by
// CompareCommitsRequest.Validate if the designated constraints aren't met.
type CompareCommitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompareCommitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompareCommitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompareCommitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompareCommitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompareCommitsRequestValidationError) ErrorName() string {
	return "CompareCommitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompareCommitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompareCommitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompareCommitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompareCommitsRequestValidationError{}

// Validate checks the field values on CompareCommitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompareCommitsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCommits() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompareCommitsResponseValidationError{
					field:  fmt.Sprintf("Commits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CompareCommitsResponseValidationError is the validation error returned by
// CompareCommitsResponse.Validate if the designated constraints aren't met.
type CompareCommitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompareCommitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompareCommitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompareCommitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompareCommitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompareCommitsResponseValidationError) ErrorName() string {
	return "CompareCommitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompareCommitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompareCommitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompareCommitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompareCommitsResponseValidationError{}

// Validate checks the field values on Commit with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Commit) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Oid

	// no validation rules for Email

	// no validation rules for Message

	// no validation rules for DisplayName

	return nil
}

// CommitValidationError is the validation error returned by Commit.Validate if
// the designated constraints aren't met.
type CommitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitValidationError) ErrorName() string { return "CommitValidationError" }

// Error satisfies the builtin error interface
func (e CommitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitValidationError{}
