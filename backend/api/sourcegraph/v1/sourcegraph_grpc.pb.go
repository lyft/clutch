// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sourcegraphv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourcegraphAPIClient is the client API for SourcegraphAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourcegraphAPIClient interface {
	CompareCommits(ctx context.Context, in *CompareCommitsRequest, opts ...grpc.CallOption) (*CompareCommitsResponse, error)
}

type sourcegraphAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSourcegraphAPIClient(cc grpc.ClientConnInterface) SourcegraphAPIClient {
	return &sourcegraphAPIClient{cc}
}

func (c *sourcegraphAPIClient) CompareCommits(ctx context.Context, in *CompareCommitsRequest, opts ...grpc.CallOption) (*CompareCommitsResponse, error) {
	out := new(CompareCommitsResponse)
	err := c.cc.Invoke(ctx, "/clutch.sourcegraph.v1.SourcegraphAPI/CompareCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourcegraphAPIServer is the server API for SourcegraphAPI service.
// All implementations should embed UnimplementedSourcegraphAPIServer
// for forward compatibility
type SourcegraphAPIServer interface {
	CompareCommits(context.Context, *CompareCommitsRequest) (*CompareCommitsResponse, error)
}

// UnimplementedSourcegraphAPIServer should be embedded to have forward compatible implementations.
type UnimplementedSourcegraphAPIServer struct {
}

func (UnimplementedSourcegraphAPIServer) CompareCommits(context.Context, *CompareCommitsRequest) (*CompareCommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareCommits not implemented")
}

// UnsafeSourcegraphAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourcegraphAPIServer will
// result in compilation errors.
type UnsafeSourcegraphAPIServer interface {
	mustEmbedUnimplementedSourcegraphAPIServer()
}

func RegisterSourcegraphAPIServer(s grpc.ServiceRegistrar, srv SourcegraphAPIServer) {
	s.RegisterService(&SourcegraphAPI_ServiceDesc, srv)
}

func _SourcegraphAPI_CompareCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcegraphAPIServer).CompareCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clutch.sourcegraph.v1.SourcegraphAPI/CompareCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcegraphAPIServer).CompareCommits(ctx, req.(*CompareCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SourcegraphAPI_ServiceDesc is the grpc.ServiceDesc for SourcegraphAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SourcegraphAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clutch.sourcegraph.v1.SourcegraphAPI",
	HandlerType: (*SourcegraphAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompareCommits",
			Handler:    _SourcegraphAPI_CompareCommits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sourcegraph/v1/sourcegraph.proto",
}
