// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package envoytriagev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EnvoyTriageAPIClient is the client API for EnvoyTriageAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvoyTriageAPIClient interface {
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
}

type envoyTriageAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvoyTriageAPIClient(cc grpc.ClientConnInterface) EnvoyTriageAPIClient {
	return &envoyTriageAPIClient{cc}
}

func (c *envoyTriageAPIClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/clutch.envoytriage.v1.EnvoyTriageAPI/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvoyTriageAPIServer is the server API for EnvoyTriageAPI service.
// All implementations should embed UnimplementedEnvoyTriageAPIServer
// for forward compatibility
type EnvoyTriageAPIServer interface {
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
}

// UnimplementedEnvoyTriageAPIServer should be embedded to have forward compatible implementations.
type UnimplementedEnvoyTriageAPIServer struct {
}

func (UnimplementedEnvoyTriageAPIServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}

// UnsafeEnvoyTriageAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvoyTriageAPIServer will
// result in compilation errors.
type UnsafeEnvoyTriageAPIServer interface {
	mustEmbedUnimplementedEnvoyTriageAPIServer()
}

func RegisterEnvoyTriageAPIServer(s *grpc.Server, srv EnvoyTriageAPIServer) {
	s.RegisterService(&_EnvoyTriageAPI_serviceDesc, srv)
}

func _EnvoyTriageAPI_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyTriageAPIServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clutch.envoytriage.v1.EnvoyTriageAPI/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyTriageAPIServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnvoyTriageAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clutch.envoytriage.v1.EnvoyTriageAPI",
	HandlerType: (*EnvoyTriageAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _EnvoyTriageAPI_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "envoytriage/v1/envoytriage_api.proto",
}
