// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package passthrough

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PassthroughAPIClient is the client API for PassthroughAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassthroughAPIClient interface {
	RequestPassthrough(ctx context.Context, in *RequestPassthroughRequest, opts ...grpc.CallOption) (*RequestPassthroughResponse, error)
}

type passthroughAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPassthroughAPIClient(cc grpc.ClientConnInterface) PassthroughAPIClient {
	return &passthroughAPIClient{cc}
}

func (c *passthroughAPIClient) RequestPassthrough(ctx context.Context, in *RequestPassthroughRequest, opts ...grpc.CallOption) (*RequestPassthroughResponse, error) {
	out := new(RequestPassthroughResponse)
	err := c.cc.Invoke(ctx, "/clutch.passthrough.v1.PassthroughAPI/RequestPassthrough", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassthroughAPIServer is the server API for PassthroughAPI service.
// All implementations should embed UnimplementedPassthroughAPIServer
// for forward compatibility
type PassthroughAPIServer interface {
	RequestPassthrough(context.Context, *RequestPassthroughRequest) (*RequestPassthroughResponse, error)
}

// UnimplementedPassthroughAPIServer should be embedded to have forward compatible implementations.
type UnimplementedPassthroughAPIServer struct {
}

func (UnimplementedPassthroughAPIServer) RequestPassthrough(context.Context, *RequestPassthroughRequest) (*RequestPassthroughResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPassthrough not implemented")
}

// UnsafePassthroughAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassthroughAPIServer will
// result in compilation errors.
type UnsafePassthroughAPIServer interface {
	mustEmbedUnimplementedPassthroughAPIServer()
}

func RegisterPassthroughAPIServer(s grpc.ServiceRegistrar, srv PassthroughAPIServer) {
	s.RegisterService(&PassthroughAPI_ServiceDesc, srv)
}

func _PassthroughAPI_RequestPassthrough_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPassthroughRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassthroughAPIServer).RequestPassthrough(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clutch.passthrough.v1.PassthroughAPI/RequestPassthrough",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassthroughAPIServer).RequestPassthrough(ctx, req.(*RequestPassthroughRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PassthroughAPI_ServiceDesc is the grpc.ServiceDesc for PassthroughAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassthroughAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clutch.passthrough.v1.PassthroughAPI",
	HandlerType: (*PassthroughAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestPassthrough",
			Handler:    _PassthroughAPI_RequestPassthrough_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "passthrough/v1/passthrough.proto",
}
