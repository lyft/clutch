// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: chaos/experimentation/v1/experimentation.proto

package experimentationv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/lyft/clutch/backend/api/api/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateOrGetExperimentResponse_Origin int32

const (
	CreateOrGetExperimentResponse_ORIGIN_UNSPECIFIED CreateOrGetExperimentResponse_Origin = 0
	CreateOrGetExperimentResponse_ORIGIN_EXISTING    CreateOrGetExperimentResponse_Origin = 1
	CreateOrGetExperimentResponse_ORIGIN_NEW         CreateOrGetExperimentResponse_Origin = 2
)

// Enum value maps for CreateOrGetExperimentResponse_Origin.
var (
	CreateOrGetExperimentResponse_Origin_name = map[int32]string{
		0: "ORIGIN_UNSPECIFIED",
		1: "ORIGIN_EXISTING",
		2: "ORIGIN_NEW",
	}
	CreateOrGetExperimentResponse_Origin_value = map[string]int32{
		"ORIGIN_UNSPECIFIED": 0,
		"ORIGIN_EXISTING":    1,
		"ORIGIN_NEW":         2,
	}
)

func (x CreateOrGetExperimentResponse_Origin) Enum() *CreateOrGetExperimentResponse_Origin {
	p := new(CreateOrGetExperimentResponse_Origin)
	*p = x
	return p
}

func (x CreateOrGetExperimentResponse_Origin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateOrGetExperimentResponse_Origin) Descriptor() protoreflect.EnumDescriptor {
	return file_chaos_experimentation_v1_experimentation_proto_enumTypes[0].Descriptor()
}

func (CreateOrGetExperimentResponse_Origin) Type() protoreflect.EnumType {
	return &file_chaos_experimentation_v1_experimentation_proto_enumTypes[0]
}

func (x CreateOrGetExperimentResponse_Origin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateOrGetExperimentResponse_Origin.Descriptor instead.
func (CreateOrGetExperimentResponse_Origin) EnumDescriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{3, 0}
}

// The status of an experiment.
type GetExperimentsRequest_Status int32

const (
	// Unspecified status.
	GetExperimentsRequest_STATUS_UNSPECIFIED GetExperimentsRequest_Status = 0
	// Return experiments that are currently running.
	GetExperimentsRequest_STATUS_RUNNING GetExperimentsRequest_Status = 1
)

// Enum value maps for GetExperimentsRequest_Status.
var (
	GetExperimentsRequest_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_RUNNING",
	}
	GetExperimentsRequest_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_RUNNING":     1,
	}
)

func (x GetExperimentsRequest_Status) Enum() *GetExperimentsRequest_Status {
	p := new(GetExperimentsRequest_Status)
	*p = x
	return p
}

func (x GetExperimentsRequest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetExperimentsRequest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_chaos_experimentation_v1_experimentation_proto_enumTypes[1].Descriptor()
}

func (GetExperimentsRequest_Status) Type() protoreflect.EnumType {
	return &file_chaos_experimentation_v1_experimentation_proto_enumTypes[1]
}

func (x GetExperimentsRequest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetExperimentsRequest_Status.Descriptor instead.
func (GetExperimentsRequest_Status) EnumDescriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{4, 0}
}

type CreateExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data specifying the experiment to create. See `CreateExperiment` for more details.
	Data *CreateExperimentData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateExperimentRequest) Reset() {
	*x = CreateExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentRequest) ProtoMessage() {}

func (x *CreateExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentRequest.ProtoReflect.Descriptor instead.
func (*CreateExperimentRequest) Descriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{0}
}

func (x *CreateExperimentRequest) GetData() *CreateExperimentData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created experiment.
	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *CreateExperimentResponse) Reset() {
	*x = CreateExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentResponse) ProtoMessage() {}

func (x *CreateExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentResponse.ProtoReflect.Descriptor instead.
func (*CreateExperimentResponse) Descriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{1}
}

func (x *CreateExperimentResponse) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type CreateOrGetExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data specifying the experiment to fetch or create. See `CreateOrGetExperiment` for more details.
	Data *CreateExperimentData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateOrGetExperimentRequest) Reset() {
	*x = CreateOrGetExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrGetExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrGetExperimentRequest) ProtoMessage() {}

func (x *CreateOrGetExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrGetExperimentRequest.ProtoReflect.Descriptor instead.
func (*CreateOrGetExperimentRequest) Descriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{2}
}

func (x *CreateOrGetExperimentRequest) GetData() *CreateExperimentData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateOrGetExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created or fetched experiment that was requested by a caller. See `origin` to learn more
	// about how to check whether a new experiment was created as the result of the request's execution.
	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
	// The type of returned experiment - either a newly created experiment or an existing one.
	Origin CreateOrGetExperimentResponse_Origin `protobuf:"varint,2,opt,name=origin,proto3,enum=clutch.chaos.experimentation.v1.CreateOrGetExperimentResponse_Origin" json:"origin,omitempty"`
}

func (x *CreateOrGetExperimentResponse) Reset() {
	*x = CreateOrGetExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrGetExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrGetExperimentResponse) ProtoMessage() {}

func (x *CreateOrGetExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrGetExperimentResponse.ProtoReflect.Descriptor instead.
func (*CreateOrGetExperimentResponse) Descriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOrGetExperimentResponse) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

func (x *CreateOrGetExperimentResponse) GetOrigin() CreateOrGetExperimentResponse_Origin {
	if x != nil {
		return x.Origin
	}
	return CreateOrGetExperimentResponse_ORIGIN_UNSPECIFIED
}

type GetExperimentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return experiments whose config's type URL matches the provided config type URL.
	// Set to empty string to query for all.
	ConfigType string `protobuf:"bytes,1,opt,name=config_type,json=configType,proto3" json:"config_type,omitempty"`
	// Return experiments whose status is equal to the provided value.
	// Set to STATUS_UNSPECIFIED to query for all.
	Status GetExperimentsRequest_Status `protobuf:"varint,2,opt,name=status,proto3,enum=clutch.chaos.experimentation.v1.GetExperimentsRequest_Status" json:"status,omitempty"`
}

func (x *GetExperimentsRequest) Reset() {
	*x = GetExperimentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentsRequest) ProtoMessage() {}

func (x *GetExperimentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentsRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentsRequest) Descriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{4}
}

func (x *GetExperimentsRequest) GetConfigType() string {
	if x != nil {
		return x.ConfigType
	}
	return ""
}

func (x *GetExperimentsRequest) GetStatus() GetExperimentsRequest_Status {
	if x != nil {
		return x.Status
	}
	return GetExperimentsRequest_STATUS_UNSPECIFIED
}

type GetExperimentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiments []*Experiment `protobuf:"bytes,1,rep,name=experiments,proto3" json:"experiments,omitempty"`
}

func (x *GetExperimentsResponse) Reset() {
	*x = GetExperimentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentsResponse) ProtoMessage() {}

func (x *GetExperimentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentsResponse.ProtoReflect.Descriptor instead.
func (*GetExperimentsResponse) Descriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{5}
}

func (x *GetExperimentsResponse) GetExperiments() []*Experiment {
	if x != nil {
		return x.Experiments
	}
	return nil
}

type CancelExperimentRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of an experiment run to cancel.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The reason for the cancelation request.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *CancelExperimentRunRequest) Reset() {
	*x = CancelExperimentRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelExperimentRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelExperimentRunRequest) ProtoMessage() {}

func (x *CancelExperimentRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelExperimentRunRequest.ProtoReflect.Descriptor instead.
func (*CancelExperimentRunRequest) Descriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{6}
}

func (x *CancelExperimentRunRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CancelExperimentRunRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type CancelExperimentRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelExperimentRunResponse) Reset() {
	*x = CancelExperimentRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelExperimentRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelExperimentRunResponse) ProtoMessage() {}

func (x *CancelExperimentRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelExperimentRunResponse.ProtoReflect.Descriptor instead.
func (*CancelExperimentRunResponse) Descriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{7}
}

type GetListViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetListViewRequest) Reset() {
	*x = GetListViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListViewRequest) ProtoMessage() {}

func (x *GetListViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListViewRequest.ProtoReflect.Descriptor instead.
func (*GetListViewRequest) Descriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{8}
}

type GetListViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ListViewItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetListViewResponse) Reset() {
	*x = GetListViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListViewResponse) ProtoMessage() {}

func (x *GetListViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListViewResponse.ProtoReflect.Descriptor instead.
func (*GetListViewResponse) Descriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{9}
}

func (x *GetListViewResponse) GetItems() []*ListViewItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetExperimentRunDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of an experiment run whose details should be returned to the caller.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetExperimentRunDetailsRequest) Reset() {
	*x = GetExperimentRunDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentRunDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentRunDetailsRequest) ProtoMessage() {}

func (x *GetExperimentRunDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentRunDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentRunDetailsRequest) Descriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{10}
}

func (x *GetExperimentRunDetailsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetExperimentRunDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunDetails *ExperimentRunDetails `protobuf:"bytes,1,opt,name=run_details,json=runDetails,proto3" json:"run_details,omitempty"`
}

func (x *GetExperimentRunDetailsResponse) Reset() {
	*x = GetExperimentRunDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentRunDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentRunDetailsResponse) ProtoMessage() {}

func (x *GetExperimentRunDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_experimentation_v1_experimentation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentRunDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetExperimentRunDetailsResponse) Descriptor() ([]byte, []int) {
	return file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP(), []int{11}
}

func (x *GetExperimentRunDetailsResponse) GetRunDetails() *ExperimentRunDetails {
	if x != nil {
		return x.RunDetails
	}
	return nil
}

var File_chaos_experimentation_v1_experimentation_proto protoreflect.FileDescriptor

var file_chaos_experimentation_v1_experimentation_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1f, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63,
	0x68, 0x61, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6e, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61,
	0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x75,
	0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68,
	0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x45, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x02, 0x22, 0xcf, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63,
	0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x22,
	0x67, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x1a, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x18, 0x96, 0x01, 0x20, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x48, 0xb2, 0xe1, 0x1c, 0x44, 0x0a, 0x42, 0x0a, 0x3a, 0x63, 0x6c,
	0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x04, 0x7b, 0x69, 0x64, 0x7d, 0x22, 0x1d,
	0x0a, 0x1b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x74,
	0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x87, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x4c, 0xb2, 0xe1, 0x1c,
	0x48, 0x0a, 0x46, 0x0a, 0x3e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f,
	0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x04, 0x7b, 0x69, 0x64, 0x7d, 0x22, 0x79, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0b,
	0x72, 0x75, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x32, 0xda, 0x09, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x41, 0x50, 0x49, 0x12, 0xc4, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x2e, 0x63,
	0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e,
	0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0xaa, 0xe1, 0x1c, 0x02, 0x08, 0x01, 0x12, 0xd8,
	0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63,
	0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68,
	0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22,
	0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x3a, 0x01, 0x2a, 0xaa, 0xe1, 0x1c, 0x02, 0x08, 0x01, 0x12, 0xd0, 0x01, 0x0a, 0x13, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6e, 0x12, 0x3b, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x32, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6e, 0x3a, 0x01, 0x2a, 0xaa, 0xe1, 0x1c, 0x02, 0x08, 0x04, 0x12, 0xbc, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x36, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68,
	0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68,
	0x61, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xe1, 0x1c, 0x02, 0x08, 0x02, 0x12, 0xb0, 0x01, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x33, 0x2e, 0x63, 0x6c,
	0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x3a, 0x01, 0x2a, 0xaa, 0xe1, 0x1c, 0x02, 0x08, 0x02, 0x12, 0xe0,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3f, 0x2e, 0x63, 0x6c, 0x75,
	0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6c,
	0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6f, 0x73,
	0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xe1, 0x1c, 0x02, 0x08,
	0x02, 0x42, 0x4f, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6c, 0x79, 0x66, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x3b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chaos_experimentation_v1_experimentation_proto_rawDescOnce sync.Once
	file_chaos_experimentation_v1_experimentation_proto_rawDescData = file_chaos_experimentation_v1_experimentation_proto_rawDesc
)

func file_chaos_experimentation_v1_experimentation_proto_rawDescGZIP() []byte {
	file_chaos_experimentation_v1_experimentation_proto_rawDescOnce.Do(func() {
		file_chaos_experimentation_v1_experimentation_proto_rawDescData = protoimpl.X.CompressGZIP(file_chaos_experimentation_v1_experimentation_proto_rawDescData)
	})
	return file_chaos_experimentation_v1_experimentation_proto_rawDescData
}

var file_chaos_experimentation_v1_experimentation_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chaos_experimentation_v1_experimentation_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_chaos_experimentation_v1_experimentation_proto_goTypes = []interface{}{
	(CreateOrGetExperimentResponse_Origin)(0), // 0: clutch.chaos.experimentation.v1.CreateOrGetExperimentResponse.Origin
	(GetExperimentsRequest_Status)(0),         // 1: clutch.chaos.experimentation.v1.GetExperimentsRequest.Status
	(*CreateExperimentRequest)(nil),           // 2: clutch.chaos.experimentation.v1.CreateExperimentRequest
	(*CreateExperimentResponse)(nil),          // 3: clutch.chaos.experimentation.v1.CreateExperimentResponse
	(*CreateOrGetExperimentRequest)(nil),      // 4: clutch.chaos.experimentation.v1.CreateOrGetExperimentRequest
	(*CreateOrGetExperimentResponse)(nil),     // 5: clutch.chaos.experimentation.v1.CreateOrGetExperimentResponse
	(*GetExperimentsRequest)(nil),             // 6: clutch.chaos.experimentation.v1.GetExperimentsRequest
	(*GetExperimentsResponse)(nil),            // 7: clutch.chaos.experimentation.v1.GetExperimentsResponse
	(*CancelExperimentRunRequest)(nil),        // 8: clutch.chaos.experimentation.v1.CancelExperimentRunRequest
	(*CancelExperimentRunResponse)(nil),       // 9: clutch.chaos.experimentation.v1.CancelExperimentRunResponse
	(*GetListViewRequest)(nil),                // 10: clutch.chaos.experimentation.v1.GetListViewRequest
	(*GetListViewResponse)(nil),               // 11: clutch.chaos.experimentation.v1.GetListViewResponse
	(*GetExperimentRunDetailsRequest)(nil),    // 12: clutch.chaos.experimentation.v1.GetExperimentRunDetailsRequest
	(*GetExperimentRunDetailsResponse)(nil),   // 13: clutch.chaos.experimentation.v1.GetExperimentRunDetailsResponse
	(*CreateExperimentData)(nil),              // 14: clutch.chaos.experimentation.v1.CreateExperimentData
	(*Experiment)(nil),                        // 15: clutch.chaos.experimentation.v1.Experiment
	(*ListViewItem)(nil),                      // 16: clutch.chaos.experimentation.v1.ListViewItem
	(*ExperimentRunDetails)(nil),              // 17: clutch.chaos.experimentation.v1.ExperimentRunDetails
}
var file_chaos_experimentation_v1_experimentation_proto_depIdxs = []int32{
	14, // 0: clutch.chaos.experimentation.v1.CreateExperimentRequest.data:type_name -> clutch.chaos.experimentation.v1.CreateExperimentData
	15, // 1: clutch.chaos.experimentation.v1.CreateExperimentResponse.experiment:type_name -> clutch.chaos.experimentation.v1.Experiment
	14, // 2: clutch.chaos.experimentation.v1.CreateOrGetExperimentRequest.data:type_name -> clutch.chaos.experimentation.v1.CreateExperimentData
	15, // 3: clutch.chaos.experimentation.v1.CreateOrGetExperimentResponse.experiment:type_name -> clutch.chaos.experimentation.v1.Experiment
	0,  // 4: clutch.chaos.experimentation.v1.CreateOrGetExperimentResponse.origin:type_name -> clutch.chaos.experimentation.v1.CreateOrGetExperimentResponse.Origin
	1,  // 5: clutch.chaos.experimentation.v1.GetExperimentsRequest.status:type_name -> clutch.chaos.experimentation.v1.GetExperimentsRequest.Status
	15, // 6: clutch.chaos.experimentation.v1.GetExperimentsResponse.experiments:type_name -> clutch.chaos.experimentation.v1.Experiment
	16, // 7: clutch.chaos.experimentation.v1.GetListViewResponse.items:type_name -> clutch.chaos.experimentation.v1.ListViewItem
	17, // 8: clutch.chaos.experimentation.v1.GetExperimentRunDetailsResponse.run_details:type_name -> clutch.chaos.experimentation.v1.ExperimentRunDetails
	2,  // 9: clutch.chaos.experimentation.v1.ExperimentsAPI.CreateExperiment:input_type -> clutch.chaos.experimentation.v1.CreateExperimentRequest
	4,  // 10: clutch.chaos.experimentation.v1.ExperimentsAPI.CreateOrGetExperiment:input_type -> clutch.chaos.experimentation.v1.CreateOrGetExperimentRequest
	8,  // 11: clutch.chaos.experimentation.v1.ExperimentsAPI.CancelExperimentRun:input_type -> clutch.chaos.experimentation.v1.CancelExperimentRunRequest
	6,  // 12: clutch.chaos.experimentation.v1.ExperimentsAPI.GetExperiments:input_type -> clutch.chaos.experimentation.v1.GetExperimentsRequest
	10, // 13: clutch.chaos.experimentation.v1.ExperimentsAPI.GetListView:input_type -> clutch.chaos.experimentation.v1.GetListViewRequest
	12, // 14: clutch.chaos.experimentation.v1.ExperimentsAPI.GetExperimentRunDetails:input_type -> clutch.chaos.experimentation.v1.GetExperimentRunDetailsRequest
	3,  // 15: clutch.chaos.experimentation.v1.ExperimentsAPI.CreateExperiment:output_type -> clutch.chaos.experimentation.v1.CreateExperimentResponse
	5,  // 16: clutch.chaos.experimentation.v1.ExperimentsAPI.CreateOrGetExperiment:output_type -> clutch.chaos.experimentation.v1.CreateOrGetExperimentResponse
	9,  // 17: clutch.chaos.experimentation.v1.ExperimentsAPI.CancelExperimentRun:output_type -> clutch.chaos.experimentation.v1.CancelExperimentRunResponse
	7,  // 18: clutch.chaos.experimentation.v1.ExperimentsAPI.GetExperiments:output_type -> clutch.chaos.experimentation.v1.GetExperimentsResponse
	11, // 19: clutch.chaos.experimentation.v1.ExperimentsAPI.GetListView:output_type -> clutch.chaos.experimentation.v1.GetListViewResponse
	13, // 20: clutch.chaos.experimentation.v1.ExperimentsAPI.GetExperimentRunDetails:output_type -> clutch.chaos.experimentation.v1.GetExperimentRunDetailsResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_chaos_experimentation_v1_experimentation_proto_init() }
func file_chaos_experimentation_v1_experimentation_proto_init() {
	if File_chaos_experimentation_v1_experimentation_proto != nil {
		return
	}
	file_chaos_experimentation_v1_experiment_proto_init()
	file_chaos_experimentation_v1_create_experiment_data_proto_init()
	file_chaos_experimentation_v1_list_view_item_proto_init()
	file_chaos_experimentation_v1_experiment_run_details_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chaos_experimentation_v1_experimentation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_experimentation_v1_experimentation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_experimentation_v1_experimentation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrGetExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_experimentation_v1_experimentation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrGetExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_experimentation_v1_experimentation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_experimentation_v1_experimentation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_experimentation_v1_experimentation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelExperimentRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_experimentation_v1_experimentation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelExperimentRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_experimentation_v1_experimentation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_experimentation_v1_experimentation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_experimentation_v1_experimentation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentRunDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_experimentation_v1_experimentation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentRunDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chaos_experimentation_v1_experimentation_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chaos_experimentation_v1_experimentation_proto_goTypes,
		DependencyIndexes: file_chaos_experimentation_v1_experimentation_proto_depIdxs,
		EnumInfos:         file_chaos_experimentation_v1_experimentation_proto_enumTypes,
		MessageInfos:      file_chaos_experimentation_v1_experimentation_proto_msgTypes,
	}.Build()
	File_chaos_experimentation_v1_experimentation_proto = out.File
	file_chaos_experimentation_v1_experimentation_proto_rawDesc = nil
	file_chaos_experimentation_v1_experimentation_proto_goTypes = nil
	file_chaos_experimentation_v1_experimentation_proto_depIdxs = nil
}
