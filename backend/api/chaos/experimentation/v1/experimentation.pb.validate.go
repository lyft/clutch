// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chaos/experimentation/v1/experimentation.proto

package experimentationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateExperimentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateExperimentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExperimentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExperimentRequestMultiError, or nil if none found.
func (m *CreateExperimentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExperimentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := CreateExperimentRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateExperimentRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateExperimentRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateExperimentRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateExperimentRequestMultiError(errors)
	}

	return nil
}

// CreateExperimentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateExperimentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateExperimentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExperimentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExperimentRequestMultiError) AllErrors() []error { return m }

// CreateExperimentRequestValidationError is the validation error returned by
// CreateExperimentRequest.Validate if the designated constraints aren't met.
type CreateExperimentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExperimentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExperimentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExperimentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExperimentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExperimentRequestValidationError) ErrorName() string {
	return "CreateExperimentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExperimentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExperimentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExperimentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExperimentRequestValidationError{}

// Validate checks the field values on CreateExperimentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateExperimentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExperimentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExperimentResponseMultiError, or nil if none found.
func (m *CreateExperimentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExperimentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExperiment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateExperimentResponseValidationError{
					field:  "Experiment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateExperimentResponseValidationError{
					field:  "Experiment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExperiment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateExperimentResponseValidationError{
				field:  "Experiment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateExperimentResponseMultiError(errors)
	}

	return nil
}

// CreateExperimentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateExperimentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateExperimentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExperimentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExperimentResponseMultiError) AllErrors() []error { return m }

// CreateExperimentResponseValidationError is the validation error returned by
// CreateExperimentResponse.Validate if the designated constraints aren't met.
type CreateExperimentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExperimentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExperimentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExperimentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExperimentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExperimentResponseValidationError) ErrorName() string {
	return "CreateExperimentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExperimentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExperimentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExperimentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExperimentResponseValidationError{}

// Validate checks the field values on CreateOrGetExperimentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrGetExperimentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrGetExperimentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrGetExperimentRequestMultiError, or nil if none found.
func (m *CreateOrGetExperimentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrGetExperimentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := CreateOrGetExperimentRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrGetExperimentRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrGetExperimentRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrGetExperimentRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrGetExperimentRequestMultiError(errors)
	}

	return nil
}

// CreateOrGetExperimentRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrGetExperimentRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOrGetExperimentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrGetExperimentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrGetExperimentRequestMultiError) AllErrors() []error { return m }

// CreateOrGetExperimentRequestValidationError is the validation error returned
// by CreateOrGetExperimentRequest.Validate if the designated constraints
// aren't met.
type CreateOrGetExperimentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrGetExperimentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrGetExperimentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrGetExperimentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrGetExperimentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrGetExperimentRequestValidationError) ErrorName() string {
	return "CreateOrGetExperimentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrGetExperimentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrGetExperimentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrGetExperimentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrGetExperimentRequestValidationError{}

// Validate checks the field values on CreateOrGetExperimentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrGetExperimentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrGetExperimentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrGetExperimentResponseMultiError, or nil if none found.
func (m *CreateOrGetExperimentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrGetExperimentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExperiment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrGetExperimentResponseValidationError{
					field:  "Experiment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrGetExperimentResponseValidationError{
					field:  "Experiment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExperiment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrGetExperimentResponseValidationError{
				field:  "Experiment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Origin

	if len(errors) > 0 {
		return CreateOrGetExperimentResponseMultiError(errors)
	}

	return nil
}

// CreateOrGetExperimentResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrGetExperimentResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOrGetExperimentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrGetExperimentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrGetExperimentResponseMultiError) AllErrors() []error { return m }

// CreateOrGetExperimentResponseValidationError is the validation error
// returned by CreateOrGetExperimentResponse.Validate if the designated
// constraints aren't met.
type CreateOrGetExperimentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrGetExperimentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrGetExperimentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrGetExperimentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrGetExperimentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrGetExperimentResponseValidationError) ErrorName() string {
	return "CreateOrGetExperimentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrGetExperimentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrGetExperimentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrGetExperimentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrGetExperimentResponseValidationError{}

// Validate checks the field values on GetExperimentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExperimentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExperimentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExperimentsRequestMultiError, or nil if none found.
func (m *GetExperimentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExperimentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConfigType

	if _, ok := GetExperimentsRequest_Status_name[int32(m.GetStatus())]; !ok {
		err := GetExperimentsRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetExperimentsRequestMultiError(errors)
	}

	return nil
}

// GetExperimentsRequestMultiError is an error wrapping multiple validation
// errors returned by GetExperimentsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetExperimentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExperimentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExperimentsRequestMultiError) AllErrors() []error { return m }

// GetExperimentsRequestValidationError is the validation error returned by
// GetExperimentsRequest.Validate if the designated constraints aren't met.
type GetExperimentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExperimentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExperimentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExperimentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExperimentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExperimentsRequestValidationError) ErrorName() string {
	return "GetExperimentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExperimentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExperimentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExperimentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExperimentsRequestValidationError{}

// Validate checks the field values on GetExperimentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExperimentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExperimentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExperimentsResponseMultiError, or nil if none found.
func (m *GetExperimentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExperimentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExperiments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetExperimentsResponseValidationError{
						field:  fmt.Sprintf("Experiments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetExperimentsResponseValidationError{
						field:  fmt.Sprintf("Experiments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetExperimentsResponseValidationError{
					field:  fmt.Sprintf("Experiments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetExperimentsResponseMultiError(errors)
	}

	return nil
}

// GetExperimentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetExperimentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetExperimentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExperimentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExperimentsResponseMultiError) AllErrors() []error { return m }

// GetExperimentsResponseValidationError is the validation error returned by
// GetExperimentsResponse.Validate if the designated constraints aren't met.
type GetExperimentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExperimentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExperimentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExperimentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExperimentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExperimentsResponseValidationError) ErrorName() string {
	return "GetExperimentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExperimentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExperimentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExperimentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExperimentsResponseValidationError{}

// Validate checks the field values on CancelExperimentRunRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelExperimentRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelExperimentRunRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelExperimentRunRequestMultiError, or nil if none found.
func (m *CancelExperimentRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelExperimentRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetId()) < 1 {
		err := CancelExperimentRunRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReason()) > 150 {
		err := CancelExperimentRunRequestValidationError{
			field:  "Reason",
			reason: "value length must be at most 150 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetReason()) < 1 {
		err := CancelExperimentRunRequestValidationError{
			field:  "Reason",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelExperimentRunRequestMultiError(errors)
	}

	return nil
}

// CancelExperimentRunRequestMultiError is an error wrapping multiple
// validation errors returned by CancelExperimentRunRequest.ValidateAll() if
// the designated constraints aren't met.
type CancelExperimentRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelExperimentRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelExperimentRunRequestMultiError) AllErrors() []error { return m }

// CancelExperimentRunRequestValidationError is the validation error returned
// by CancelExperimentRunRequest.Validate if the designated constraints aren't met.
type CancelExperimentRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelExperimentRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelExperimentRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelExperimentRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelExperimentRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelExperimentRunRequestValidationError) ErrorName() string {
	return "CancelExperimentRunRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelExperimentRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelExperimentRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelExperimentRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelExperimentRunRequestValidationError{}

// Validate checks the field values on CancelExperimentRunResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelExperimentRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelExperimentRunResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelExperimentRunResponseMultiError, or nil if none found.
func (m *CancelExperimentRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelExperimentRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelExperimentRunResponseMultiError(errors)
	}

	return nil
}

// CancelExperimentRunResponseMultiError is an error wrapping multiple
// validation errors returned by CancelExperimentRunResponse.ValidateAll() if
// the designated constraints aren't met.
type CancelExperimentRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelExperimentRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelExperimentRunResponseMultiError) AllErrors() []error { return m }

// CancelExperimentRunResponseValidationError is the validation error returned
// by CancelExperimentRunResponse.Validate if the designated constraints
// aren't met.
type CancelExperimentRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelExperimentRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelExperimentRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelExperimentRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelExperimentRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelExperimentRunResponseValidationError) ErrorName() string {
	return "CancelExperimentRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelExperimentRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelExperimentRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelExperimentRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelExperimentRunResponseValidationError{}

// Validate checks the field values on GetListViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListViewRequestMultiError, or nil if none found.
func (m *GetListViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetListViewRequestMultiError(errors)
	}

	return nil
}

// GetListViewRequestMultiError is an error wrapping multiple validation errors
// returned by GetListViewRequest.ValidateAll() if the designated constraints
// aren't met.
type GetListViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListViewRequestMultiError) AllErrors() []error { return m }

// GetListViewRequestValidationError is the validation error returned by
// GetListViewRequest.Validate if the designated constraints aren't met.
type GetListViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListViewRequestValidationError) ErrorName() string {
	return "GetListViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListViewRequestValidationError{}

// Validate checks the field values on GetListViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListViewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListViewResponseMultiError, or nil if none found.
func (m *GetListViewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListViewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListViewResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListViewResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListViewResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListViewResponseMultiError(errors)
	}

	return nil
}

// GetListViewResponseMultiError is an error wrapping multiple validation
// errors returned by GetListViewResponse.ValidateAll() if the designated
// constraints aren't met.
type GetListViewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListViewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListViewResponseMultiError) AllErrors() []error { return m }

// GetListViewResponseValidationError is the validation error returned by
// GetListViewResponse.Validate if the designated constraints aren't met.
type GetListViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListViewResponseValidationError) ErrorName() string {
	return "GetListViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListViewResponseValidationError{}

// Validate checks the field values on GetExperimentRunDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExperimentRunDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExperimentRunDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetExperimentRunDetailsRequestMultiError, or nil if none found.
func (m *GetExperimentRunDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExperimentRunDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetId()) < 1 {
		err := GetExperimentRunDetailsRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetExperimentRunDetailsRequestMultiError(errors)
	}

	return nil
}

// GetExperimentRunDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by GetExperimentRunDetailsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetExperimentRunDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExperimentRunDetailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExperimentRunDetailsRequestMultiError) AllErrors() []error { return m }

// GetExperimentRunDetailsRequestValidationError is the validation error
// returned by GetExperimentRunDetailsRequest.Validate if the designated
// constraints aren't met.
type GetExperimentRunDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExperimentRunDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExperimentRunDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExperimentRunDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExperimentRunDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExperimentRunDetailsRequestValidationError) ErrorName() string {
	return "GetExperimentRunDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExperimentRunDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExperimentRunDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExperimentRunDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExperimentRunDetailsRequestValidationError{}

// Validate checks the field values on GetExperimentRunDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExperimentRunDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExperimentRunDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetExperimentRunDetailsResponseMultiError, or nil if none found.
func (m *GetExperimentRunDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExperimentRunDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetExperimentRunDetailsResponseValidationError{
					field:  "RunDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetExperimentRunDetailsResponseValidationError{
					field:  "RunDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetExperimentRunDetailsResponseValidationError{
				field:  "RunDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetExperimentRunDetailsResponseMultiError(errors)
	}

	return nil
}

// GetExperimentRunDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by GetExperimentRunDetailsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetExperimentRunDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExperimentRunDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExperimentRunDetailsResponseMultiError) AllErrors() []error { return m }

// GetExperimentRunDetailsResponseValidationError is the validation error
// returned by GetExperimentRunDetailsResponse.Validate if the designated
// constraints aren't met.
type GetExperimentRunDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExperimentRunDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExperimentRunDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExperimentRunDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExperimentRunDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExperimentRunDetailsResponseValidationError) ErrorName() string {
	return "GetExperimentRunDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExperimentRunDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExperimentRunDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExperimentRunDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExperimentRunDetailsResponseValidationError{}
