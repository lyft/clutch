// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: chaos/redisexperimentation/v1/redisexperimentation.proto

package redisexperimentationv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The configuration of an Redis fault.
type RedisFaultConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The targeting of the fault describing what requests are being considered for faults.
	ServiceName   string   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	RedisCommands []string `protobuf:"bytes,2,rep,name=redis_commands,json=redisCommands,proto3" json:"redis_commands,omitempty"`
	// Types that are assignable to Fault:
	//	*RedisFaultConfig_AbortFault
	//	*RedisFaultConfig_LatencyFault
	Fault isRedisFaultConfig_Fault `protobuf_oneof:"fault"`
}

func (x *RedisFaultConfig) Reset() {
	*x = RedisFaultConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisFaultConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisFaultConfig) ProtoMessage() {}

func (x *RedisFaultConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisFaultConfig.ProtoReflect.Descriptor instead.
func (*RedisFaultConfig) Descriptor() ([]byte, []int) {
	return file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDescGZIP(), []int{0}
}

func (x *RedisFaultConfig) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RedisFaultConfig) GetRedisCommands() []string {
	if x != nil {
		return x.RedisCommands
	}
	return nil
}

func (m *RedisFaultConfig) GetFault() isRedisFaultConfig_Fault {
	if m != nil {
		return m.Fault
	}
	return nil
}

func (x *RedisFaultConfig) GetAbortFault() *AbortFault {
	if x, ok := x.GetFault().(*RedisFaultConfig_AbortFault); ok {
		return x.AbortFault
	}
	return nil
}

func (x *RedisFaultConfig) GetLatencyFault() *LatencyFault {
	if x, ok := x.GetFault().(*RedisFaultConfig_LatencyFault); ok {
		return x.LatencyFault
	}
	return nil
}

type isRedisFaultConfig_Fault interface {
	isRedisFaultConfig_Fault()
}

type RedisFaultConfig_AbortFault struct {
	// The abort fault.
	AbortFault *AbortFault `protobuf:"bytes,3,opt,name=abort_fault,json=abortFault,proto3,oneof"`
}

type RedisFaultConfig_LatencyFault struct {
	// The latency fault.
	LatencyFault *LatencyFault `protobuf:"bytes,4,opt,name=latency_fault,json=latencyFault,proto3,oneof"`
}

func (*RedisFaultConfig_AbortFault) isRedisFaultConfig_Fault() {}

func (*RedisFaultConfig_LatencyFault) isRedisFaultConfig_Fault() {}

// The definition of an abort fault.
type AbortFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentage of requests the fault should be applied to.
	Percentage *FaultPercentage `protobuf:"bytes,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// The HTTP status code to insert when applying an abort fault.
	AbortStatus *FaultAbortStatus `protobuf:"bytes,2,opt,name=abort_status,json=abortStatus,proto3" json:"abort_status,omitempty"`
}

func (x *AbortFault) Reset() {
	*x = AbortFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortFault) ProtoMessage() {}

func (x *AbortFault) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortFault.ProtoReflect.Descriptor instead.
func (*AbortFault) Descriptor() ([]byte, []int) {
	return file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDescGZIP(), []int{1}
}

func (x *AbortFault) GetPercentage() *FaultPercentage {
	if x != nil {
		return x.Percentage
	}
	return nil
}

func (x *AbortFault) GetAbortStatus() *FaultAbortStatus {
	if x != nil {
		return x.AbortStatus
	}
	return nil
}

// The definition of a latency fault.
type LatencyFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentage of requests the fault should be applied to.
	Percentage *FaultPercentage `protobuf:"bytes,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// The latency duration to apply when applying a latency fault.
	LatencyDuration *FaultLatencyDuration `protobuf:"bytes,2,opt,name=latency_duration,json=latencyDuration,proto3" json:"latency_duration,omitempty"`
}

func (x *LatencyFault) Reset() {
	*x = LatencyFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatencyFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatencyFault) ProtoMessage() {}

func (x *LatencyFault) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatencyFault.ProtoReflect.Descriptor instead.
func (*LatencyFault) Descriptor() ([]byte, []int) {
	return file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDescGZIP(), []int{2}
}

func (x *LatencyFault) GetPercentage() *FaultPercentage {
	if x != nil {
		return x.Percentage
	}
	return nil
}

func (x *LatencyFault) GetLatencyDuration() *FaultLatencyDuration {
	if x != nil {
		return x.LatencyDuration
	}
	return nil
}

// The fault percentage controlling what percentage of requests considered for a fault injection
// should have the fault applied.
type FaultPercentage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The numerator of a percentage with a fixed denominator equal to 100
	// (i.e. percentage equal to 50 results in 50/100 = 50%)
	Percentage uint32 `protobuf:"varint,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *FaultPercentage) Reset() {
	*x = FaultPercentage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultPercentage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultPercentage) ProtoMessage() {}

func (x *FaultPercentage) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultPercentage.ProtoReflect.Descriptor instead.
func (*FaultPercentage) Descriptor() ([]byte, []int) {
	return file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDescGZIP(), []int{3}
}

func (x *FaultPercentage) GetPercentage() uint32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

// The abort status to apply as part of an abort fault.
type FaultAbortStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The abort HTTP status.
	HttpStatusCode uint32 `protobuf:"varint,1,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
}

func (x *FaultAbortStatus) Reset() {
	*x = FaultAbortStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultAbortStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultAbortStatus) ProtoMessage() {}

func (x *FaultAbortStatus) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultAbortStatus.ProtoReflect.Descriptor instead.
func (*FaultAbortStatus) Descriptor() ([]byte, []int) {
	return file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDescGZIP(), []int{4}
}

func (x *FaultAbortStatus) GetHttpStatusCode() uint32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

// The latency duration to apply as part of a latency fault.
type FaultLatencyDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fixed latency duration in milliseconds.
	FixedDurationMs uint32 `protobuf:"varint,1,opt,name=fixed_duration_ms,json=fixedDurationMs,proto3" json:"fixed_duration_ms,omitempty"`
}

func (x *FaultLatencyDuration) Reset() {
	*x = FaultLatencyDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultLatencyDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultLatencyDuration) ProtoMessage() {}

func (x *FaultLatencyDuration) ProtoReflect() protoreflect.Message {
	mi := &file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultLatencyDuration.ProtoReflect.Descriptor instead.
func (*FaultLatencyDuration) Descriptor() ([]byte, []int) {
	return file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDescGZIP(), []int{5}
}

func (x *FaultLatencyDuration) GetFixedDurationMs() uint32 {
	if x != nil {
		return x.FixedDurationMs
	}
	return 0
}

var File_chaos_redisexperimentation_v1_redisexperimentation_proto protoreflect.FileDescriptor

var file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDesc = []byte{
	0x0a, 0x38, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x63, 0x6c, 0x75, 0x74,
	0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x02, 0x0a, 0x10, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x92, 0x01, 0x08, 0x08, 0x01, 0x22, 0x04, 0x72, 0x02,
	0x20, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x12, 0x53, 0x0a, 0x0b, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e,
	0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x42, 0x0c, 0x0a, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0xd2, 0x01, 0x0a, 0x0a, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x5f,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x63, 0x0a, 0x0c, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63,
	0x68, 0x61, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x5f, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6c, 0x75, 0x74,
	0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x0f, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x10, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x2a, 0x05, 0x10, 0xd8, 0x04, 0x20, 0x63, 0x52,
	0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x4b, 0x0a, 0x14, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x11, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x42, 0x59, 0x5a, 0x57,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x79, 0x66, 0x74, 0x2f,
	0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x3b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDescOnce sync.Once
	file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDescData = file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDesc
)

func file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDescGZIP() []byte {
	file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDescOnce.Do(func() {
		file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDescData = protoimpl.X.CompressGZIP(file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDescData)
	})
	return file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDescData
}

var file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_chaos_redisexperimentation_v1_redisexperimentation_proto_goTypes = []interface{}{
	(*RedisFaultConfig)(nil),     // 0: clutch.chaos.redisexperimentation.v1.RedisFaultConfig
	(*AbortFault)(nil),           // 1: clutch.chaos.redisexperimentation.v1.AbortFault
	(*LatencyFault)(nil),         // 2: clutch.chaos.redisexperimentation.v1.LatencyFault
	(*FaultPercentage)(nil),      // 3: clutch.chaos.redisexperimentation.v1.FaultPercentage
	(*FaultAbortStatus)(nil),     // 4: clutch.chaos.redisexperimentation.v1.FaultAbortStatus
	(*FaultLatencyDuration)(nil), // 5: clutch.chaos.redisexperimentation.v1.FaultLatencyDuration
}
var file_chaos_redisexperimentation_v1_redisexperimentation_proto_depIdxs = []int32{
	1, // 0: clutch.chaos.redisexperimentation.v1.RedisFaultConfig.abort_fault:type_name -> clutch.chaos.redisexperimentation.v1.AbortFault
	2, // 1: clutch.chaos.redisexperimentation.v1.RedisFaultConfig.latency_fault:type_name -> clutch.chaos.redisexperimentation.v1.LatencyFault
	3, // 2: clutch.chaos.redisexperimentation.v1.AbortFault.percentage:type_name -> clutch.chaos.redisexperimentation.v1.FaultPercentage
	4, // 3: clutch.chaos.redisexperimentation.v1.AbortFault.abort_status:type_name -> clutch.chaos.redisexperimentation.v1.FaultAbortStatus
	3, // 4: clutch.chaos.redisexperimentation.v1.LatencyFault.percentage:type_name -> clutch.chaos.redisexperimentation.v1.FaultPercentage
	5, // 5: clutch.chaos.redisexperimentation.v1.LatencyFault.latency_duration:type_name -> clutch.chaos.redisexperimentation.v1.FaultLatencyDuration
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_chaos_redisexperimentation_v1_redisexperimentation_proto_init() }
func file_chaos_redisexperimentation_v1_redisexperimentation_proto_init() {
	if File_chaos_redisexperimentation_v1_redisexperimentation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisFaultConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatencyFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultPercentage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultAbortStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultLatencyDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RedisFaultConfig_AbortFault)(nil),
		(*RedisFaultConfig_LatencyFault)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chaos_redisexperimentation_v1_redisexperimentation_proto_goTypes,
		DependencyIndexes: file_chaos_redisexperimentation_v1_redisexperimentation_proto_depIdxs,
		MessageInfos:      file_chaos_redisexperimentation_v1_redisexperimentation_proto_msgTypes,
	}.Build()
	File_chaos_redisexperimentation_v1_redisexperimentation_proto = out.File
	file_chaos_redisexperimentation_v1_redisexperimentation_proto_rawDesc = nil
	file_chaos_redisexperimentation_v1_redisexperimentation_proto_goTypes = nil
	file_chaos_redisexperimentation_v1_redisexperimentation_proto_depIdxs = nil
}
