// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chaos/redisexperimentation/v1/redisexperimentation.proto

package redisexperimentationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _redisexperimentation_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RedisFaultConfig with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RedisFaultConfig) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetServiceName()) < 1 {
		return RedisFaultConfigValidationError{
			field:  "ServiceName",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetRedisCommands()) < 1 {
		return RedisFaultConfigValidationError{
			field:  "RedisCommands",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetRedisCommands() {
		_, _ = idx, item

		if len(item) < 1 {
			return RedisFaultConfigValidationError{
				field:  fmt.Sprintf("RedisCommands[%v]", idx),
				reason: "value length must be at least 1 bytes",
			}
		}

	}

	switch m.Fault.(type) {

	case *RedisFaultConfig_AbortFault:

		if v, ok := interface{}(m.GetAbortFault()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RedisFaultConfigValidationError{
					field:  "AbortFault",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RedisFaultConfig_LatencyFault:

		if v, ok := interface{}(m.GetLatencyFault()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RedisFaultConfigValidationError{
					field:  "LatencyFault",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return RedisFaultConfigValidationError{
			field:  "Fault",
			reason: "value is required",
		}

	}

	return nil
}

// RedisFaultConfigValidationError is the validation error returned by
// RedisFaultConfig.Validate if the designated constraints aren't met.
type RedisFaultConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedisFaultConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedisFaultConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedisFaultConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedisFaultConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedisFaultConfigValidationError) ErrorName() string { return "RedisFaultConfigValidationError" }

// Error satisfies the builtin error interface
func (e RedisFaultConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedisFaultConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedisFaultConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedisFaultConfigValidationError{}

// Validate checks the field values on AbortFault with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AbortFault) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPercentage() == nil {
		return AbortFaultValidationError{
			field:  "Percentage",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPercentage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AbortFaultValidationError{
				field:  "Percentage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAbortStatus() == nil {
		return AbortFaultValidationError{
			field:  "AbortStatus",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAbortStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AbortFaultValidationError{
				field:  "AbortStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AbortFaultValidationError is the validation error returned by
// AbortFault.Validate if the designated constraints aren't met.
type AbortFaultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbortFaultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbortFaultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbortFaultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbortFaultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbortFaultValidationError) ErrorName() string { return "AbortFaultValidationError" }

// Error satisfies the builtin error interface
func (e AbortFaultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbortFault.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbortFaultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbortFaultValidationError{}

// Validate checks the field values on LatencyFault with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LatencyFault) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPercentage() == nil {
		return LatencyFaultValidationError{
			field:  "Percentage",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPercentage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LatencyFaultValidationError{
				field:  "Percentage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetLatencyDuration() == nil {
		return LatencyFaultValidationError{
			field:  "LatencyDuration",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetLatencyDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LatencyFaultValidationError{
				field:  "LatencyDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LatencyFaultValidationError is the validation error returned by
// LatencyFault.Validate if the designated constraints aren't met.
type LatencyFaultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LatencyFaultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LatencyFaultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LatencyFaultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LatencyFaultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LatencyFaultValidationError) ErrorName() string { return "LatencyFaultValidationError" }

// Error satisfies the builtin error interface
func (e LatencyFaultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLatencyFault.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LatencyFaultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LatencyFaultValidationError{}

// Validate checks the field values on FaultPercentage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FaultPercentage) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPercentage(); val <= 0 || val > 100 {
		return FaultPercentageValidationError{
			field:  "Percentage",
			reason: "value must be inside range (0, 100]",
		}
	}

	return nil
}

// FaultPercentageValidationError is the validation error returned by
// FaultPercentage.Validate if the designated constraints aren't met.
type FaultPercentageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FaultPercentageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FaultPercentageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FaultPercentageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FaultPercentageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FaultPercentageValidationError) ErrorName() string { return "FaultPercentageValidationError" }

// Error satisfies the builtin error interface
func (e FaultPercentageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFaultPercentage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FaultPercentageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FaultPercentageValidationError{}

// Validate checks the field values on FaultAbortStatus with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FaultAbortStatus) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetHttpStatusCode(); val <= 99 || val >= 600 {
		return FaultAbortStatusValidationError{
			field:  "HttpStatusCode",
			reason: "value must be inside range (99, 600)",
		}
	}

	return nil
}

// FaultAbortStatusValidationError is the validation error returned by
// FaultAbortStatus.Validate if the designated constraints aren't met.
type FaultAbortStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FaultAbortStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FaultAbortStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FaultAbortStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FaultAbortStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FaultAbortStatusValidationError) ErrorName() string { return "FaultAbortStatusValidationError" }

// Error satisfies the builtin error interface
func (e FaultAbortStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFaultAbortStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FaultAbortStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FaultAbortStatusValidationError{}

// Validate checks the field values on FaultLatencyDuration with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FaultLatencyDuration) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetFixedDurationMs() <= 0 {
		return FaultLatencyDurationValidationError{
			field:  "FixedDurationMs",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// FaultLatencyDurationValidationError is the validation error returned by
// FaultLatencyDuration.Validate if the designated constraints aren't met.
type FaultLatencyDurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FaultLatencyDurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FaultLatencyDurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FaultLatencyDurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FaultLatencyDurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FaultLatencyDurationValidationError) ErrorName() string {
	return "FaultLatencyDurationValidationError"
}

// Error satisfies the builtin error interface
func (e FaultLatencyDurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFaultLatencyDuration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FaultLatencyDurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FaultLatencyDurationValidationError{}
