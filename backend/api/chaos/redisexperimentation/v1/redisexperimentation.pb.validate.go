// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chaos/redisexperimentation/v1/redisexperimentation.proto

package redisexperimentationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FaultConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FaultConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FaultConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FaultConfigMultiError, or
// nil if none found.
func (m *FaultConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *FaultConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFaultTargeting() == nil {
		err := FaultConfigValidationError{
			field:  "FaultTargeting",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFaultTargeting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FaultConfigValidationError{
					field:  "FaultTargeting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FaultConfigValidationError{
					field:  "FaultTargeting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFaultTargeting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FaultConfigValidationError{
				field:  "FaultTargeting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Fault.(type) {

	case *FaultConfig_ErrorFault:

		if all {
			switch v := interface{}(m.GetErrorFault()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FaultConfigValidationError{
						field:  "ErrorFault",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FaultConfigValidationError{
						field:  "ErrorFault",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetErrorFault()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FaultConfigValidationError{
					field:  "ErrorFault",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FaultConfig_LatencyFault:

		if all {
			switch v := interface{}(m.GetLatencyFault()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FaultConfigValidationError{
						field:  "LatencyFault",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FaultConfigValidationError{
						field:  "LatencyFault",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLatencyFault()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FaultConfigValidationError{
					field:  "LatencyFault",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := FaultConfigValidationError{
			field:  "Fault",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return FaultConfigMultiError(errors)
	}
	return nil
}

// FaultConfigMultiError is an error wrapping multiple validation errors
// returned by FaultConfig.ValidateAll() if the designated constraints aren't met.
type FaultConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FaultConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FaultConfigMultiError) AllErrors() []error { return m }

// FaultConfigValidationError is the validation error returned by
// FaultConfig.Validate if the designated constraints aren't met.
type FaultConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FaultConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FaultConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FaultConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FaultConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FaultConfigValidationError) ErrorName() string { return "FaultConfigValidationError" }

// Error satisfies the builtin error interface
func (e FaultConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFaultConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FaultConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FaultConfigValidationError{}

// Validate checks the field values on ErrorFault with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorFault) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorFault with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorFaultMultiError, or
// nil if none found.
func (m *ErrorFault) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorFault) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPercentage() == nil {
		err := ErrorFaultValidationError{
			field:  "Percentage",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPercentage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorFaultValidationError{
					field:  "Percentage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorFaultValidationError{
					field:  "Percentage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPercentage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorFaultValidationError{
				field:  "Percentage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ErrorFaultMultiError(errors)
	}
	return nil
}

// ErrorFaultMultiError is an error wrapping multiple validation errors
// returned by ErrorFault.ValidateAll() if the designated constraints aren't met.
type ErrorFaultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorFaultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorFaultMultiError) AllErrors() []error { return m }

// ErrorFaultValidationError is the validation error returned by
// ErrorFault.Validate if the designated constraints aren't met.
type ErrorFaultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorFaultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorFaultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorFaultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorFaultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorFaultValidationError) ErrorName() string { return "ErrorFaultValidationError" }

// Error satisfies the builtin error interface
func (e ErrorFaultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorFault.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorFaultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorFaultValidationError{}

// Validate checks the field values on LatencyFault with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LatencyFault) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LatencyFault with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LatencyFaultMultiError, or
// nil if none found.
func (m *LatencyFault) ValidateAll() error {
	return m.validate(true)
}

func (m *LatencyFault) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPercentage() == nil {
		err := LatencyFaultValidationError{
			field:  "Percentage",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPercentage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LatencyFaultValidationError{
					field:  "Percentage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LatencyFaultValidationError{
					field:  "Percentage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPercentage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LatencyFaultValidationError{
				field:  "Percentage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LatencyFaultMultiError(errors)
	}
	return nil
}

// LatencyFaultMultiError is an error wrapping multiple validation errors
// returned by LatencyFault.ValidateAll() if the designated constraints aren't met.
type LatencyFaultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LatencyFaultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LatencyFaultMultiError) AllErrors() []error { return m }

// LatencyFaultValidationError is the validation error returned by
// LatencyFault.Validate if the designated constraints aren't met.
type LatencyFaultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LatencyFaultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LatencyFaultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LatencyFaultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LatencyFaultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LatencyFaultValidationError) ErrorName() string { return "LatencyFaultValidationError" }

// Error satisfies the builtin error interface
func (e LatencyFaultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLatencyFault.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LatencyFaultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LatencyFaultValidationError{}

// Validate checks the field values on FaultTargeting with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FaultTargeting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FaultTargeting with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FaultTargetingMultiError,
// or nil if none found.
func (m *FaultTargeting) ValidateAll() error {
	return m.validate(true)
}

func (m *FaultTargeting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUpstreamCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FaultTargetingValidationError{
					field:  "UpstreamCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FaultTargetingValidationError{
					field:  "UpstreamCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpstreamCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FaultTargetingValidationError{
				field:  "UpstreamCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDownstreamCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FaultTargetingValidationError{
					field:  "DownstreamCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FaultTargetingValidationError{
					field:  "DownstreamCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDownstreamCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FaultTargetingValidationError{
				field:  "DownstreamCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FaultTargetingMultiError(errors)
	}
	return nil
}

// FaultTargetingMultiError is an error wrapping multiple validation errors
// returned by FaultTargeting.ValidateAll() if the designated constraints
// aren't met.
type FaultTargetingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FaultTargetingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FaultTargetingMultiError) AllErrors() []error { return m }

// FaultTargetingValidationError is the validation error returned by
// FaultTargeting.Validate if the designated constraints aren't met.
type FaultTargetingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FaultTargetingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FaultTargetingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FaultTargetingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FaultTargetingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FaultTargetingValidationError) ErrorName() string { return "FaultTargetingValidationError" }

// Error satisfies the builtin error interface
func (e FaultTargetingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFaultTargeting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FaultTargetingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FaultTargetingValidationError{}

// Validate checks the field values on SingleCluster with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SingleCluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleCluster with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SingleClusterMultiError, or
// nil if none found.
func (m *SingleCluster) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleCluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) < 1 {
		err := SingleClusterValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SingleClusterMultiError(errors)
	}
	return nil
}

// SingleClusterMultiError is an error wrapping multiple validation errors
// returned by SingleCluster.ValidateAll() if the designated constraints
// aren't met.
type SingleClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleClusterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleClusterMultiError) AllErrors() []error { return m }

// SingleClusterValidationError is the validation error returned by
// SingleCluster.Validate if the designated constraints aren't met.
type SingleClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleClusterValidationError) ErrorName() string { return "SingleClusterValidationError" }

// Error satisfies the builtin error interface
func (e SingleClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleClusterValidationError{}

// Validate checks the field values on FaultPercentage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FaultPercentage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FaultPercentage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FaultPercentageMultiError, or nil if none found.
func (m *FaultPercentage) ValidateAll() error {
	return m.validate(true)
}

func (m *FaultPercentage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPercentage(); val <= 0 || val > 100 {
		err := FaultPercentageValidationError{
			field:  "Percentage",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FaultPercentageMultiError(errors)
	}
	return nil
}

// FaultPercentageMultiError is an error wrapping multiple validation errors
// returned by FaultPercentage.ValidateAll() if the designated constraints
// aren't met.
type FaultPercentageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FaultPercentageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FaultPercentageMultiError) AllErrors() []error { return m }

// FaultPercentageValidationError is the validation error returned by
// FaultPercentage.Validate if the designated constraints aren't met.
type FaultPercentageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FaultPercentageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FaultPercentageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FaultPercentageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FaultPercentageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FaultPercentageValidationError) ErrorName() string { return "FaultPercentageValidationError" }

// Error satisfies the builtin error interface
func (e FaultPercentageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFaultPercentage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FaultPercentageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FaultPercentageValidationError{}
