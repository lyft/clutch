// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sourcecontrol/github/v1/github.proto

package githubv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on RepositoryParameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepositoryParameters) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _RepositoryParameters_Visibility_NotInLookup[m.GetVisibility()]; ok {
		return RepositoryParametersValidationError{
			field:  "Visibility",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := RepositoryParameters_Visibility_name[int32(m.GetVisibility())]; !ok {
		return RepositoryParametersValidationError{
			field:  "Visibility",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetAllowMergeCommit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RepositoryParametersValidationError{
				field:  "AllowMergeCommit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAllowRebaseMerge()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RepositoryParametersValidationError{
				field:  "AllowRebaseMerge",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAllowSquashMerge()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RepositoryParametersValidationError{
				field:  "AllowSquashMerge",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RepositoryParametersValidationError is the validation error returned by
// RepositoryParameters.Validate if the designated constraints aren't met.
type RepositoryParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepositoryParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepositoryParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepositoryParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepositoryParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepositoryParametersValidationError) ErrorName() string {
	return "RepositoryParametersValidationError"
}

// Error satisfies the builtin error interface
func (e RepositoryParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepositoryParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepositoryParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepositoryParametersValidationError{}

var _RepositoryParameters_Visibility_NotInLookup = map[RepositoryParameters_Visibility]struct{}{
	0: {},
}

// Validate checks the field values on CreateRepositoryOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRepositoryOptions) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRepositoryOptionsValidationError{
				field:  "Parameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AutoInit

	return nil
}

// CreateRepositoryOptionsValidationError is the validation error returned by
// CreateRepositoryOptions.Validate if the designated constraints aren't met.
type CreateRepositoryOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRepositoryOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRepositoryOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRepositoryOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRepositoryOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRepositoryOptionsValidationError) ErrorName() string {
	return "CreateRepositoryOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRepositoryOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRepositoryOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRepositoryOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRepositoryOptionsValidationError{}

// Validate checks the field values on UpdateRepositoryOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRepositoryOptions) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRepositoryOptionsValidationError{
				field:  "Parameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Archived

	return nil
}

// UpdateRepositoryOptionsValidationError is the validation error returned by
// UpdateRepositoryOptions.Validate if the designated constraints aren't met.
type UpdateRepositoryOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRepositoryOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRepositoryOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRepositoryOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRepositoryOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRepositoryOptionsValidationError) ErrorName() string {
	return "UpdateRepositoryOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRepositoryOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRepositoryOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRepositoryOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRepositoryOptionsValidationError{}

// Validate checks the field values on CommitComparison with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CommitComparison) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	return nil
}

// CommitComparisonValidationError is the validation error returned by
// CommitComparison.Validate if the designated constraints aren't met.
type CommitComparisonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitComparisonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitComparisonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitComparisonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitComparisonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitComparisonValidationError) ErrorName() string { return "CommitComparisonValidationError" }

// Error satisfies the builtin error interface
func (e CommitComparisonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitComparison.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitComparisonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitComparisonValidationError{}
