// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package playv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayAPIClient is the client API for PlayAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayAPIClient interface {
	GetPlay(ctx context.Context, in *GetPlayRequest, opts ...grpc.CallOption) (*GetPlayResponse, error)
}

type playAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayAPIClient(cc grpc.ClientConnInterface) PlayAPIClient {
	return &playAPIClient{cc}
}

func (c *playAPIClient) GetPlay(ctx context.Context, in *GetPlayRequest, opts ...grpc.CallOption) (*GetPlayResponse, error) {
	out := new(GetPlayResponse)
	err := c.cc.Invoke(ctx, "/clutch.play.v1.PlayAPI/GetPlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayAPIServer is the server API for PlayAPI service.
// All implementations should embed UnimplementedPlayAPIServer
// for forward compatibility
type PlayAPIServer interface {
	GetPlay(context.Context, *GetPlayRequest) (*GetPlayResponse, error)
}

// UnimplementedPlayAPIServer should be embedded to have forward compatible implementations.
type UnimplementedPlayAPIServer struct {
}

func (UnimplementedPlayAPIServer) GetPlay(context.Context, *GetPlayRequest) (*GetPlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlay not implemented")
}

// UnsafePlayAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayAPIServer will
// result in compilation errors.
type UnsafePlayAPIServer interface {
	mustEmbedUnimplementedPlayAPIServer()
}

func RegisterPlayAPIServer(s grpc.ServiceRegistrar, srv PlayAPIServer) {
	s.RegisterService(&PlayAPI_ServiceDesc, srv)
}

func _PlayAPI_GetPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayAPIServer).GetPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clutch.play.v1.PlayAPI/GetPlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayAPIServer).GetPlay(ctx, req.(*GetPlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayAPI_ServiceDesc is the grpc.ServiceDesc for PlayAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clutch.play.v1.PlayAPI",
	HandlerType: (*PlayAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlay",
			Handler:    _PlayAPI_GetPlay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "play/v1/play.proto",
}
