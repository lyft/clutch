// Code generated by protobuf.js in compile-protos.sh. DO NOT EDIT.

import * as $protobuf from "protobufjs";
/** Namespace clutch. */
export namespace clutch {

    /** Namespace api. */
    namespace api {

        /** Namespace v1. */
        namespace v1 {

            /** ActionType enum. */
            enum ActionType {
                UNSPECIFIED = 0,
                CREATE = 1,
                READ = 2,
                UPDATE = 3,
                DELETE = 4
            }

            /** Properties of an Action. */
            interface IAction {

                /** Action type */
                type?: (clutch.api.v1.ActionType|null);
            }

            /** Represents an Action. */
            class Action implements IAction {

                /**
                 * Constructs a new Action.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.api.v1.IAction);

                /** Action type. */
                public type: clutch.api.v1.ActionType;

                /**
                 * Verifies an Action message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Action message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Action
                 */
                public static fromObject(object: { [k: string]: any }): clutch.api.v1.Action;

                /**
                 * Creates a plain object from an Action message. Also converts values to other types if specified.
                 * @param message Action
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.api.v1.Action, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Action to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Pattern. */
            interface IPattern {

                /** Pattern typeUrl */
                typeUrl?: (string|null);

                /** Pattern pattern */
                pattern?: (string|null);
            }

            /** Represents a Pattern. */
            class Pattern implements IPattern {

                /**
                 * Constructs a new Pattern.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.api.v1.IPattern);

                /** Pattern typeUrl. */
                public typeUrl: string;

                /** Pattern pattern. */
                public pattern: string;

                /**
                 * Verifies a Pattern message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Pattern message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Pattern
                 */
                public static fromObject(object: { [k: string]: any }): clutch.api.v1.Pattern;

                /**
                 * Creates a plain object from a Pattern message. Also converts values to other types if specified.
                 * @param message Pattern
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.api.v1.Pattern, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Pattern to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an Identifier. */
            interface IIdentifier {

                /** Identifier patterns */
                patterns?: (clutch.api.v1.IPattern[]|null);
            }

            /** Represents an Identifier. */
            class Identifier implements IIdentifier {

                /**
                 * Constructs a new Identifier.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.api.v1.IIdentifier);

                /** Identifier patterns. */
                public patterns: clutch.api.v1.IPattern[];

                /**
                 * Verifies an Identifier message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Identifier message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Identifier
                 */
                public static fromObject(object: { [k: string]: any }): clutch.api.v1.Identifier;

                /**
                 * Creates a plain object from an Identifier message. Also converts values to other types if specified.
                 * @param message Identifier
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.api.v1.Identifier, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Identifier to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Reference. */
            interface IReference {

                /** Reference fields */
                fields?: (string[]|null);
            }

            /** Represents a Reference. */
            class Reference implements IReference {

                /**
                 * Constructs a new Reference.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.api.v1.IReference);

                /** Reference fields. */
                public fields: string[];

                /**
                 * Verifies a Reference message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Reference message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Reference
                 */
                public static fromObject(object: { [k: string]: any }): clutch.api.v1.Reference;

                /**
                 * Creates a plain object from a Reference message. Also converts values to other types if specified.
                 * @param message Reference
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.api.v1.Reference, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Reference to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Redacted. */
            interface IRedacted {

                /** Redacted redactedTypeUrl */
                redactedTypeUrl?: (string|null);
            }

            /** Represents a Redacted. */
            class Redacted implements IRedacted {

                /**
                 * Constructs a new Redacted.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.api.v1.IRedacted);

                /** Redacted redactedTypeUrl. */
                public redactedTypeUrl: string;

                /**
                 * Verifies a Redacted message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Redacted message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Redacted
                 */
                public static fromObject(object: { [k: string]: any }): clutch.api.v1.Redacted;

                /**
                 * Creates a plain object from a Redacted message. Also converts values to other types if specified.
                 * @param message Redacted
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.api.v1.Redacted, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Redacted to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace assets. */
    namespace assets {

        /** Namespace v1. */
        namespace v1 {

            /** Represents an AssetsAPI */
            class AssetsAPI extends $protobuf.rpc.Service {

                /**
                 * Constructs a new AssetsAPI service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Calls Fetch.
                 * @param request FetchRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and FetchResponse
                 */
                public fetch(request: clutch.assets.v1.IFetchRequest, callback: clutch.assets.v1.AssetsAPI.FetchCallback): void;

                /**
                 * Calls Fetch.
                 * @param request FetchRequest message or plain object
                 * @returns Promise
                 */
                public fetch(request: clutch.assets.v1.IFetchRequest): Promise<clutch.assets.v1.FetchResponse>;
            }

            namespace AssetsAPI {

                /**
                 * Callback as used by {@link clutch.assets.v1.AssetsAPI#fetch}.
                 * @param error Error, if any
                 * @param [response] FetchResponse
                 */
                type FetchCallback = (error: (Error|null), response?: clutch.assets.v1.FetchResponse) => void;
            }

            /** Properties of a FetchRequest. */
            interface IFetchRequest {
            }

            /** Represents a FetchRequest. */
            class FetchRequest implements IFetchRequest {

                /**
                 * Constructs a new FetchRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.assets.v1.IFetchRequest);

                /**
                 * Verifies a FetchRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a FetchRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns FetchRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.assets.v1.FetchRequest;

                /**
                 * Creates a plain object from a FetchRequest message. Also converts values to other types if specified.
                 * @param message FetchRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.assets.v1.FetchRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this FetchRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a FetchResponse. */
            interface IFetchResponse {
            }

            /** Represents a FetchResponse. */
            class FetchResponse implements IFetchResponse {

                /**
                 * Constructs a new FetchResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.assets.v1.IFetchResponse);

                /**
                 * Verifies a FetchResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a FetchResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns FetchResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.assets.v1.FetchResponse;

                /**
                 * Creates a plain object from a FetchResponse message. Also converts values to other types if specified.
                 * @param message FetchResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.assets.v1.FetchResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this FetchResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace audit. */
    namespace audit {

        /** Namespace v1. */
        namespace v1 {

            /** Represents an AuditAPI */
            class AuditAPI extends $protobuf.rpc.Service {

                /**
                 * Constructs a new AuditAPI service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Calls GetEvents.
                 * @param request GetEventsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and GetEventsResponse
                 */
                public getEvents(request: clutch.audit.v1.IGetEventsRequest, callback: clutch.audit.v1.AuditAPI.GetEventsCallback): void;

                /**
                 * Calls GetEvents.
                 * @param request GetEventsRequest message or plain object
                 * @returns Promise
                 */
                public getEvents(request: clutch.audit.v1.IGetEventsRequest): Promise<clutch.audit.v1.GetEventsResponse>;
            }

            namespace AuditAPI {

                /**
                 * Callback as used by {@link clutch.audit.v1.AuditAPI#getEvents}.
                 * @param error Error, if any
                 * @param [response] GetEventsResponse
                 */
                type GetEventsCallback = (error: (Error|null), response?: clutch.audit.v1.GetEventsResponse) => void;
            }

            /** Properties of a TimeRange. */
            interface ITimeRange {

                /** TimeRange startTime */
                startTime?: (google.protobuf.ITimestamp|null);

                /** TimeRange endTime */
                endTime?: (google.protobuf.ITimestamp|null);
            }

            /** Represents a TimeRange. */
            class TimeRange implements ITimeRange {

                /**
                 * Constructs a new TimeRange.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.audit.v1.ITimeRange);

                /** TimeRange startTime. */
                public startTime?: (google.protobuf.ITimestamp|null);

                /** TimeRange endTime. */
                public endTime?: (google.protobuf.ITimestamp|null);

                /**
                 * Verifies a TimeRange message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TimeRange message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TimeRange
                 */
                public static fromObject(object: { [k: string]: any }): clutch.audit.v1.TimeRange;

                /**
                 * Creates a plain object from a TimeRange message. Also converts values to other types if specified.
                 * @param message TimeRange
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.audit.v1.TimeRange, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TimeRange to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a GetEventsRequest. */
            interface IGetEventsRequest {

                /** GetEventsRequest range */
                range?: (clutch.audit.v1.ITimeRange|null);

                /** GetEventsRequest since */
                since?: (google.protobuf.IDuration|null);
            }

            /** Represents a GetEventsRequest. */
            class GetEventsRequest implements IGetEventsRequest {

                /**
                 * Constructs a new GetEventsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.audit.v1.IGetEventsRequest);

                /** GetEventsRequest range. */
                public range?: (clutch.audit.v1.ITimeRange|null);

                /** GetEventsRequest since. */
                public since?: (google.protobuf.IDuration|null);

                /** GetEventsRequest window. */
                public window?: ("range"|"since");

                /**
                 * Verifies a GetEventsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GetEventsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GetEventsRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.audit.v1.GetEventsRequest;

                /**
                 * Creates a plain object from a GetEventsRequest message. Also converts values to other types if specified.
                 * @param message GetEventsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.audit.v1.GetEventsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GetEventsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Resource. */
            interface IResource {

                /** Resource typeUrl */
                typeUrl?: (string|null);

                /** Resource id */
                id?: (string|null);
            }

            /** Represents a Resource. */
            class Resource implements IResource {

                /**
                 * Constructs a new Resource.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.audit.v1.IResource);

                /** Resource typeUrl. */
                public typeUrl: string;

                /** Resource id. */
                public id: string;

                /**
                 * Verifies a Resource message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Resource message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Resource
                 */
                public static fromObject(object: { [k: string]: any }): clutch.audit.v1.Resource;

                /**
                 * Creates a plain object from a Resource message. Also converts values to other types if specified.
                 * @param message Resource
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.audit.v1.Resource, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Resource to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RequestMetadata. */
            interface IRequestMetadata {

                /** RequestMetadata body */
                body?: (google.protobuf.IAny|null);
            }

            /** Represents a RequestMetadata. */
            class RequestMetadata implements IRequestMetadata {

                /**
                 * Constructs a new RequestMetadata.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.audit.v1.IRequestMetadata);

                /** RequestMetadata body. */
                public body?: (google.protobuf.IAny|null);

                /**
                 * Verifies a RequestMetadata message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RequestMetadata message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RequestMetadata
                 */
                public static fromObject(object: { [k: string]: any }): clutch.audit.v1.RequestMetadata;

                /**
                 * Creates a plain object from a RequestMetadata message. Also converts values to other types if specified.
                 * @param message RequestMetadata
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.audit.v1.RequestMetadata, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RequestMetadata to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ResponseMetadata. */
            interface IResponseMetadata {

                /** ResponseMetadata body */
                body?: (google.protobuf.IAny|null);
            }

            /** Represents a ResponseMetadata. */
            class ResponseMetadata implements IResponseMetadata {

                /**
                 * Constructs a new ResponseMetadata.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.audit.v1.IResponseMetadata);

                /** ResponseMetadata body. */
                public body?: (google.protobuf.IAny|null);

                /**
                 * Verifies a ResponseMetadata message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ResponseMetadata message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ResponseMetadata
                 */
                public static fromObject(object: { [k: string]: any }): clutch.audit.v1.ResponseMetadata;

                /**
                 * Creates a plain object from a ResponseMetadata message. Also converts values to other types if specified.
                 * @param message ResponseMetadata
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.audit.v1.ResponseMetadata, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ResponseMetadata to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RequestEvent. */
            interface IRequestEvent {

                /** RequestEvent username */
                username?: (string|null);

                /** RequestEvent serviceName */
                serviceName?: (string|null);

                /** RequestEvent methodName */
                methodName?: (string|null);

                /** RequestEvent type */
                type?: (clutch.api.v1.ActionType|null);

                /** RequestEvent status */
                status?: (google.rpc.IStatus|null);

                /** RequestEvent resources */
                resources?: (clutch.audit.v1.IResource[]|null);

                /** RequestEvent requestMetadata */
                requestMetadata?: (clutch.audit.v1.IRequestMetadata|null);

                /** RequestEvent responseMetadata */
                responseMetadata?: (clutch.audit.v1.IResponseMetadata|null);
            }

            /** Represents a RequestEvent. */
            class RequestEvent implements IRequestEvent {

                /**
                 * Constructs a new RequestEvent.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.audit.v1.IRequestEvent);

                /** RequestEvent username. */
                public username: string;

                /** RequestEvent serviceName. */
                public serviceName: string;

                /** RequestEvent methodName. */
                public methodName: string;

                /** RequestEvent type. */
                public type: clutch.api.v1.ActionType;

                /** RequestEvent status. */
                public status?: (google.rpc.IStatus|null);

                /** RequestEvent resources. */
                public resources: clutch.audit.v1.IResource[];

                /** RequestEvent requestMetadata. */
                public requestMetadata?: (clutch.audit.v1.IRequestMetadata|null);

                /** RequestEvent responseMetadata. */
                public responseMetadata?: (clutch.audit.v1.IResponseMetadata|null);

                /**
                 * Verifies a RequestEvent message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RequestEvent message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RequestEvent
                 */
                public static fromObject(object: { [k: string]: any }): clutch.audit.v1.RequestEvent;

                /**
                 * Creates a plain object from a RequestEvent message. Also converts values to other types if specified.
                 * @param message RequestEvent
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.audit.v1.RequestEvent, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RequestEvent to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an Event. */
            interface IEvent {

                /** Event occurredAt */
                occurredAt?: (google.protobuf.ITimestamp|null);

                /** Event event */
                event?: (clutch.audit.v1.IRequestEvent|null);
            }

            /** Represents an Event. */
            class Event implements IEvent {

                /**
                 * Constructs a new Event.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.audit.v1.IEvent);

                /** Event occurredAt. */
                public occurredAt?: (google.protobuf.ITimestamp|null);

                /** Event event. */
                public event?: (clutch.audit.v1.IRequestEvent|null);

                /** Event eventType. */
                public eventType?: "event";

                /**
                 * Verifies an Event message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Event message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Event
                 */
                public static fromObject(object: { [k: string]: any }): clutch.audit.v1.Event;

                /**
                 * Creates a plain object from an Event message. Also converts values to other types if specified.
                 * @param message Event
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.audit.v1.Event, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Event to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a GetEventsResponse. */
            interface IGetEventsResponse {

                /** GetEventsResponse events */
                events?: (clutch.audit.v1.IEvent[]|null);
            }

            /** Represents a GetEventsResponse. */
            class GetEventsResponse implements IGetEventsResponse {

                /**
                 * Constructs a new GetEventsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.audit.v1.IGetEventsResponse);

                /** GetEventsResponse events. */
                public events: clutch.audit.v1.IEvent[];

                /**
                 * Verifies a GetEventsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GetEventsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GetEventsResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.audit.v1.GetEventsResponse;

                /**
                 * Creates a plain object from a GetEventsResponse message. Also converts values to other types if specified.
                 * @param message GetEventsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.audit.v1.GetEventsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GetEventsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace authn. */
    namespace authn {

        /** Namespace v1. */
        namespace v1 {

            /** Represents an AuthnAPI */
            class AuthnAPI extends $protobuf.rpc.Service {

                /**
                 * Constructs a new AuthnAPI service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Calls Login.
                 * @param request LoginRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and LoginResponse
                 */
                public login(request: clutch.authn.v1.ILoginRequest, callback: clutch.authn.v1.AuthnAPI.LoginCallback): void;

                /**
                 * Calls Login.
                 * @param request LoginRequest message or plain object
                 * @returns Promise
                 */
                public login(request: clutch.authn.v1.ILoginRequest): Promise<clutch.authn.v1.LoginResponse>;

                /**
                 * Calls Callback.
                 * @param request CallbackRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and CallbackResponse
                 */
                public callback(request: clutch.authn.v1.ICallbackRequest, callback: clutch.authn.v1.AuthnAPI.CallbackCallback): void;

                /**
                 * Calls Callback.
                 * @param request CallbackRequest message or plain object
                 * @returns Promise
                 */
                public callback(request: clutch.authn.v1.ICallbackRequest): Promise<clutch.authn.v1.CallbackResponse>;
            }

            namespace AuthnAPI {

                /**
                 * Callback as used by {@link clutch.authn.v1.AuthnAPI#login}.
                 * @param error Error, if any
                 * @param [response] LoginResponse
                 */
                type LoginCallback = (error: (Error|null), response?: clutch.authn.v1.LoginResponse) => void;

                /**
                 * Callback as used by {@link clutch.authn.v1.AuthnAPI#callback}.
                 * @param error Error, if any
                 * @param [response] CallbackResponse
                 */
                type CallbackCallback = (error: (Error|null), response?: clutch.authn.v1.CallbackResponse) => void;
            }

            /** Properties of a LoginRequest. */
            interface ILoginRequest {

                /** LoginRequest redirectUrl */
                redirectUrl?: (string|null);
            }

            /** Represents a LoginRequest. */
            class LoginRequest implements ILoginRequest {

                /**
                 * Constructs a new LoginRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.authn.v1.ILoginRequest);

                /** LoginRequest redirectUrl. */
                public redirectUrl: string;

                /**
                 * Verifies a LoginRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LoginRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LoginRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.authn.v1.LoginRequest;

                /**
                 * Creates a plain object from a LoginRequest message. Also converts values to other types if specified.
                 * @param message LoginRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.authn.v1.LoginRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LoginRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a LoginResponse. */
            interface ILoginResponse {

                /** LoginResponse authUrl */
                authUrl?: (string|null);
            }

            /** Represents a LoginResponse. */
            class LoginResponse implements ILoginResponse {

                /**
                 * Constructs a new LoginResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.authn.v1.ILoginResponse);

                /** LoginResponse authUrl. */
                public authUrl: string;

                /**
                 * Verifies a LoginResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LoginResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LoginResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.authn.v1.LoginResponse;

                /**
                 * Creates a plain object from a LoginResponse message. Also converts values to other types if specified.
                 * @param message LoginResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.authn.v1.LoginResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LoginResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a CallbackRequest. */
            interface ICallbackRequest {

                /** CallbackRequest code */
                code?: (string|null);

                /** CallbackRequest state */
                state?: (string|null);

                /** CallbackRequest error */
                error?: (string|null);

                /** CallbackRequest errorDescription */
                errorDescription?: (string|null);
            }

            /** Represents a CallbackRequest. */
            class CallbackRequest implements ICallbackRequest {

                /**
                 * Constructs a new CallbackRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.authn.v1.ICallbackRequest);

                /** CallbackRequest code. */
                public code: string;

                /** CallbackRequest state. */
                public state: string;

                /** CallbackRequest error. */
                public error: string;

                /** CallbackRequest errorDescription. */
                public errorDescription: string;

                /**
                 * Verifies a CallbackRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CallbackRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CallbackRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.authn.v1.CallbackRequest;

                /**
                 * Creates a plain object from a CallbackRequest message. Also converts values to other types if specified.
                 * @param message CallbackRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.authn.v1.CallbackRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CallbackRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a CallbackResponse. */
            interface ICallbackResponse {

                /** CallbackResponse accessToken */
                accessToken?: (string|null);
            }

            /** Represents a CallbackResponse. */
            class CallbackResponse implements ICallbackResponse {

                /**
                 * Constructs a new CallbackResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.authn.v1.ICallbackResponse);

                /** CallbackResponse accessToken. */
                public accessToken: string;

                /**
                 * Verifies a CallbackResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CallbackResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CallbackResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.authn.v1.CallbackResponse;

                /**
                 * Creates a plain object from a CallbackResponse message. Also converts values to other types if specified.
                 * @param message CallbackResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.authn.v1.CallbackResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CallbackResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace authz. */
    namespace authz {

        /** Namespace v1. */
        namespace v1 {

            /** Represents an AuthzAPI */
            class AuthzAPI extends $protobuf.rpc.Service {

                /**
                 * Constructs a new AuthzAPI service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Calls Check.
                 * @param request CheckRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and CheckResponse
                 */
                public check(request: clutch.authz.v1.ICheckRequest, callback: clutch.authz.v1.AuthzAPI.CheckCallback): void;

                /**
                 * Calls Check.
                 * @param request CheckRequest message or plain object
                 * @returns Promise
                 */
                public check(request: clutch.authz.v1.ICheckRequest): Promise<clutch.authz.v1.CheckResponse>;
            }

            namespace AuthzAPI {

                /**
                 * Callback as used by {@link clutch.authz.v1.AuthzAPI#check}.
                 * @param error Error, if any
                 * @param [response] CheckResponse
                 */
                type CheckCallback = (error: (Error|null), response?: clutch.authz.v1.CheckResponse) => void;
            }

            /** Properties of a Subject. */
            interface ISubject {

                /** Subject user */
                user?: (string|null);

                /** Subject groups */
                groups?: (string[]|null);
            }

            /** Represents a Subject. */
            class Subject implements ISubject {

                /**
                 * Constructs a new Subject.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.authz.v1.ISubject);

                /** Subject user. */
                public user: string;

                /** Subject groups. */
                public groups: string[];

                /**
                 * Verifies a Subject message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Subject message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Subject
                 */
                public static fromObject(object: { [k: string]: any }): clutch.authz.v1.Subject;

                /**
                 * Creates a plain object from a Subject message. Also converts values to other types if specified.
                 * @param message Subject
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.authz.v1.Subject, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Subject to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a CheckRequest. */
            interface ICheckRequest {

                /** CheckRequest subject */
                subject?: (clutch.authz.v1.ISubject|null);

                /** CheckRequest method */
                method?: (string|null);

                /** CheckRequest actionType */
                actionType?: (clutch.api.v1.ActionType|null);

                /** CheckRequest resource */
                resource?: (string|null);
            }

            /** Represents a CheckRequest. */
            class CheckRequest implements ICheckRequest {

                /**
                 * Constructs a new CheckRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.authz.v1.ICheckRequest);

                /** CheckRequest subject. */
                public subject?: (clutch.authz.v1.ISubject|null);

                /** CheckRequest method. */
                public method: string;

                /** CheckRequest actionType. */
                public actionType: clutch.api.v1.ActionType;

                /** CheckRequest resource. */
                public resource: string;

                /**
                 * Verifies a CheckRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CheckRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CheckRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.authz.v1.CheckRequest;

                /**
                 * Creates a plain object from a CheckRequest message. Also converts values to other types if specified.
                 * @param message CheckRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.authz.v1.CheckRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CheckRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Decision enum. */
            enum Decision {
                UNSPECIFIED = 0,
                DENY = 1,
                ALLOW = 2
            }

            /** Properties of a CheckResponse. */
            interface ICheckResponse {

                /** CheckResponse decision */
                decision?: (clutch.authz.v1.Decision|null);
            }

            /** Represents a CheckResponse. */
            class CheckResponse implements ICheckResponse {

                /**
                 * Constructs a new CheckResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.authz.v1.ICheckResponse);

                /** CheckResponse decision. */
                public decision: clutch.authz.v1.Decision;

                /**
                 * Verifies a CheckResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CheckResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CheckResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.authz.v1.CheckResponse;

                /**
                 * Creates a plain object from a CheckResponse message. Also converts values to other types if specified.
                 * @param message CheckResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.authz.v1.CheckResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CheckResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace aws. */
    namespace aws {

        /** Namespace ec2. */
        namespace ec2 {

            /** Namespace v1. */
            namespace v1 {

                /** Represents a EC2API */
                class EC2API extends $protobuf.rpc.Service {

                    /**
                     * Constructs a new EC2API service.
                     * @param rpcImpl RPC implementation
                     * @param [requestDelimited=false] Whether requests are length-delimited
                     * @param [responseDelimited=false] Whether responses are length-delimited
                     */
                    constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                    /**
                     * Calls GetInstance.
                     * @param request GetInstanceRequest message or plain object
                     * @param callback Node-style callback called with the error, if any, and GetInstanceResponse
                     */
                    public getInstance(request: clutch.aws.ec2.v1.IGetInstanceRequest, callback: clutch.aws.ec2.v1.EC2API.GetInstanceCallback): void;

                    /**
                     * Calls GetInstance.
                     * @param request GetInstanceRequest message or plain object
                     * @returns Promise
                     */
                    public getInstance(request: clutch.aws.ec2.v1.IGetInstanceRequest): Promise<clutch.aws.ec2.v1.GetInstanceResponse>;

                    /**
                     * Calls TerminateInstance.
                     * @param request TerminateInstanceRequest message or plain object
                     * @param callback Node-style callback called with the error, if any, and TerminateInstanceResponse
                     */
                    public terminateInstance(request: clutch.aws.ec2.v1.ITerminateInstanceRequest, callback: clutch.aws.ec2.v1.EC2API.TerminateInstanceCallback): void;

                    /**
                     * Calls TerminateInstance.
                     * @param request TerminateInstanceRequest message or plain object
                     * @returns Promise
                     */
                    public terminateInstance(request: clutch.aws.ec2.v1.ITerminateInstanceRequest): Promise<clutch.aws.ec2.v1.TerminateInstanceResponse>;

                    /**
                     * Calls ResizeAutoscalingGroup.
                     * @param request ResizeAutoscalingGroupRequest message or plain object
                     * @param callback Node-style callback called with the error, if any, and ResizeAutoscalingGroupResponse
                     */
                    public resizeAutoscalingGroup(request: clutch.aws.ec2.v1.IResizeAutoscalingGroupRequest, callback: clutch.aws.ec2.v1.EC2API.ResizeAutoscalingGroupCallback): void;

                    /**
                     * Calls ResizeAutoscalingGroup.
                     * @param request ResizeAutoscalingGroupRequest message or plain object
                     * @returns Promise
                     */
                    public resizeAutoscalingGroup(request: clutch.aws.ec2.v1.IResizeAutoscalingGroupRequest): Promise<clutch.aws.ec2.v1.ResizeAutoscalingGroupResponse>;

                    /**
                     * Calls RebootInstance.
                     * @param request RebootInstanceRequest message or plain object
                     * @param callback Node-style callback called with the error, if any, and RebootInstanceResponse
                     */
                    public rebootInstance(request: clutch.aws.ec2.v1.IRebootInstanceRequest, callback: clutch.aws.ec2.v1.EC2API.RebootInstanceCallback): void;

                    /**
                     * Calls RebootInstance.
                     * @param request RebootInstanceRequest message or plain object
                     * @returns Promise
                     */
                    public rebootInstance(request: clutch.aws.ec2.v1.IRebootInstanceRequest): Promise<clutch.aws.ec2.v1.RebootInstanceResponse>;
                }

                namespace EC2API {

                    /**
                     * Callback as used by {@link clutch.aws.ec2.v1.EC2API#getInstance}.
                     * @param error Error, if any
                     * @param [response] GetInstanceResponse
                     */
                    type GetInstanceCallback = (error: (Error|null), response?: clutch.aws.ec2.v1.GetInstanceResponse) => void;

                    /**
                     * Callback as used by {@link clutch.aws.ec2.v1.EC2API#terminateInstance}.
                     * @param error Error, if any
                     * @param [response] TerminateInstanceResponse
                     */
                    type TerminateInstanceCallback = (error: (Error|null), response?: clutch.aws.ec2.v1.TerminateInstanceResponse) => void;

                    /**
                     * Callback as used by {@link clutch.aws.ec2.v1.EC2API#resizeAutoscalingGroup}.
                     * @param error Error, if any
                     * @param [response] ResizeAutoscalingGroupResponse
                     */
                    type ResizeAutoscalingGroupCallback = (error: (Error|null), response?: clutch.aws.ec2.v1.ResizeAutoscalingGroupResponse) => void;

                    /**
                     * Callback as used by {@link clutch.aws.ec2.v1.EC2API#rebootInstance}.
                     * @param error Error, if any
                     * @param [response] RebootInstanceResponse
                     */
                    type RebootInstanceCallback = (error: (Error|null), response?: clutch.aws.ec2.v1.RebootInstanceResponse) => void;
                }

                /** Properties of an AutoscalingGroupSize. */
                interface IAutoscalingGroupSize {

                    /** AutoscalingGroupSize min */
                    min?: (number|null);

                    /** AutoscalingGroupSize max */
                    max?: (number|null);

                    /** AutoscalingGroupSize desired */
                    desired?: (number|null);
                }

                /** Represents an AutoscalingGroupSize. */
                class AutoscalingGroupSize implements IAutoscalingGroupSize {

                    /**
                     * Constructs a new AutoscalingGroupSize.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.ec2.v1.IAutoscalingGroupSize);

                    /** AutoscalingGroupSize min. */
                    public min: number;

                    /** AutoscalingGroupSize max. */
                    public max: number;

                    /** AutoscalingGroupSize desired. */
                    public desired: number;

                    /**
                     * Verifies an AutoscalingGroupSize message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an AutoscalingGroupSize message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns AutoscalingGroupSize
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.ec2.v1.AutoscalingGroupSize;

                    /**
                     * Creates a plain object from an AutoscalingGroupSize message. Also converts values to other types if specified.
                     * @param message AutoscalingGroupSize
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.ec2.v1.AutoscalingGroupSize, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this AutoscalingGroupSize to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a ResizeAutoscalingGroupRequest. */
                interface IResizeAutoscalingGroupRequest {

                    /** ResizeAutoscalingGroupRequest name */
                    name?: (string|null);

                    /** ResizeAutoscalingGroupRequest region */
                    region?: (string|null);

                    /** ResizeAutoscalingGroupRequest size */
                    size?: (clutch.aws.ec2.v1.IAutoscalingGroupSize|null);
                }

                /** Represents a ResizeAutoscalingGroupRequest. */
                class ResizeAutoscalingGroupRequest implements IResizeAutoscalingGroupRequest {

                    /**
                     * Constructs a new ResizeAutoscalingGroupRequest.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.ec2.v1.IResizeAutoscalingGroupRequest);

                    /** ResizeAutoscalingGroupRequest name. */
                    public name: string;

                    /** ResizeAutoscalingGroupRequest region. */
                    public region: string;

                    /** ResizeAutoscalingGroupRequest size. */
                    public size?: (clutch.aws.ec2.v1.IAutoscalingGroupSize|null);

                    /**
                     * Verifies a ResizeAutoscalingGroupRequest message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ResizeAutoscalingGroupRequest message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ResizeAutoscalingGroupRequest
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.ec2.v1.ResizeAutoscalingGroupRequest;

                    /**
                     * Creates a plain object from a ResizeAutoscalingGroupRequest message. Also converts values to other types if specified.
                     * @param message ResizeAutoscalingGroupRequest
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.ec2.v1.ResizeAutoscalingGroupRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ResizeAutoscalingGroupRequest to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a ResizeAutoscalingGroupResponse. */
                interface IResizeAutoscalingGroupResponse {
                }

                /** Represents a ResizeAutoscalingGroupResponse. */
                class ResizeAutoscalingGroupResponse implements IResizeAutoscalingGroupResponse {

                    /**
                     * Constructs a new ResizeAutoscalingGroupResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.ec2.v1.IResizeAutoscalingGroupResponse);

                    /**
                     * Verifies a ResizeAutoscalingGroupResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ResizeAutoscalingGroupResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ResizeAutoscalingGroupResponse
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.ec2.v1.ResizeAutoscalingGroupResponse;

                    /**
                     * Creates a plain object from a ResizeAutoscalingGroupResponse message. Also converts values to other types if specified.
                     * @param message ResizeAutoscalingGroupResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.ec2.v1.ResizeAutoscalingGroupResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ResizeAutoscalingGroupResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an AutoscalingGroup. */
                interface IAutoscalingGroup {

                    /** AutoscalingGroup name */
                    name?: (string|null);

                    /** AutoscalingGroup region */
                    region?: (string|null);

                    /** AutoscalingGroup zones */
                    zones?: (string[]|null);

                    /** AutoscalingGroup size */
                    size?: (clutch.aws.ec2.v1.IAutoscalingGroupSize|null);

                    /** AutoscalingGroup terminationPolicies */
                    terminationPolicies?: (clutch.aws.ec2.v1.AutoscalingGroup.TerminationPolicy[]|null);

                    /** AutoscalingGroup instances */
                    instances?: (clutch.aws.ec2.v1.AutoscalingGroup.IInstance[]|null);
                }

                /** Represents an AutoscalingGroup. */
                class AutoscalingGroup implements IAutoscalingGroup {

                    /**
                     * Constructs a new AutoscalingGroup.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.ec2.v1.IAutoscalingGroup);

                    /** AutoscalingGroup name. */
                    public name: string;

                    /** AutoscalingGroup region. */
                    public region: string;

                    /** AutoscalingGroup zones. */
                    public zones: string[];

                    /** AutoscalingGroup size. */
                    public size?: (clutch.aws.ec2.v1.IAutoscalingGroupSize|null);

                    /** AutoscalingGroup terminationPolicies. */
                    public terminationPolicies: clutch.aws.ec2.v1.AutoscalingGroup.TerminationPolicy[];

                    /** AutoscalingGroup instances. */
                    public instances: clutch.aws.ec2.v1.AutoscalingGroup.IInstance[];

                    /**
                     * Verifies an AutoscalingGroup message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an AutoscalingGroup message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns AutoscalingGroup
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.ec2.v1.AutoscalingGroup;

                    /**
                     * Creates a plain object from an AutoscalingGroup message. Also converts values to other types if specified.
                     * @param message AutoscalingGroup
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.ec2.v1.AutoscalingGroup, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this AutoscalingGroup to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace AutoscalingGroup {

                    /** TerminationPolicy enum. */
                    enum TerminationPolicy {
                        UNSPECIFIED = 0,
                        UNKNOWN = 1,
                        OLDEST_INSTANCE = 2,
                        NEWEST_INSTANCE = 3,
                        OLDEST_LAUNCH_CONFIGURATION = 4,
                        CLOSEST_TO_NEXT_HOUR = 5,
                        DEFAULT = 6,
                        OLDEST_LAUNCH_TEMPLATE = 7,
                        ALLOCATION_STRATEGY = 8
                    }

                    /** Properties of an Instance. */
                    interface IInstance {

                        /** Instance id */
                        id?: (string|null);

                        /** Instance zone */
                        zone?: (string|null);

                        /** Instance launchConfigurationName */
                        launchConfigurationName?: (string|null);

                        /** Instance healthy */
                        healthy?: (boolean|null);

                        /** Instance lifecycleState */
                        lifecycleState?: (clutch.aws.ec2.v1.AutoscalingGroup.Instance.LifecycleState|null);
                    }

                    /** Represents an Instance. */
                    class Instance implements IInstance {

                        /**
                         * Constructs a new Instance.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.aws.ec2.v1.AutoscalingGroup.IInstance);

                        /** Instance id. */
                        public id: string;

                        /** Instance zone. */
                        public zone: string;

                        /** Instance launchConfigurationName. */
                        public launchConfigurationName: string;

                        /** Instance healthy. */
                        public healthy: boolean;

                        /** Instance lifecycleState. */
                        public lifecycleState: clutch.aws.ec2.v1.AutoscalingGroup.Instance.LifecycleState;

                        /**
                         * Verifies an Instance message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Instance message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Instance
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.aws.ec2.v1.AutoscalingGroup.Instance;

                        /**
                         * Creates a plain object from an Instance message. Also converts values to other types if specified.
                         * @param message Instance
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.aws.ec2.v1.AutoscalingGroup.Instance, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Instance to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Instance {

                        /** LifecycleState enum. */
                        enum LifecycleState {
                            UNSPECIFIED = 0,
                            UNKNOWN = 1,
                            PENDING = 2,
                            PENDING_WAIT = 3,
                            PENDING_PROCEED = 4,
                            QUARANTINED = 5,
                            IN_SERVICE = 6,
                            TERMINATING = 7,
                            TERMINATING_WAIT = 8,
                            TERMINATING_PROCEED = 9,
                            TERMINATED = 10,
                            DETACHING = 11,
                            DETACHED = 12,
                            ENTERING_STANDBY = 13,
                            STANDBY = 14
                        }
                    }
                }

                /** Properties of a GetInstanceRequest. */
                interface IGetInstanceRequest {

                    /** GetInstanceRequest instanceId */
                    instanceId?: (string|null);

                    /** GetInstanceRequest region */
                    region?: (string|null);
                }

                /** Represents a GetInstanceRequest. */
                class GetInstanceRequest implements IGetInstanceRequest {

                    /**
                     * Constructs a new GetInstanceRequest.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.ec2.v1.IGetInstanceRequest);

                    /** GetInstanceRequest instanceId. */
                    public instanceId: string;

                    /** GetInstanceRequest region. */
                    public region: string;

                    /**
                     * Verifies a GetInstanceRequest message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GetInstanceRequest message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GetInstanceRequest
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.ec2.v1.GetInstanceRequest;

                    /**
                     * Creates a plain object from a GetInstanceRequest message. Also converts values to other types if specified.
                     * @param message GetInstanceRequest
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.ec2.v1.GetInstanceRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GetInstanceRequest to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a GetInstanceResponse. */
                interface IGetInstanceResponse {

                    /** GetInstanceResponse instance */
                    instance?: (clutch.aws.ec2.v1.IInstance|null);
                }

                /** Represents a GetInstanceResponse. */
                class GetInstanceResponse implements IGetInstanceResponse {

                    /**
                     * Constructs a new GetInstanceResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.ec2.v1.IGetInstanceResponse);

                    /** GetInstanceResponse instance. */
                    public instance?: (clutch.aws.ec2.v1.IInstance|null);

                    /**
                     * Verifies a GetInstanceResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GetInstanceResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GetInstanceResponse
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.ec2.v1.GetInstanceResponse;

                    /**
                     * Creates a plain object from a GetInstanceResponse message. Also converts values to other types if specified.
                     * @param message GetInstanceResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.ec2.v1.GetInstanceResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GetInstanceResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a TerminateInstanceRequest. */
                interface ITerminateInstanceRequest {

                    /** TerminateInstanceRequest instanceId */
                    instanceId?: (string|null);

                    /** TerminateInstanceRequest region */
                    region?: (string|null);
                }

                /** Represents a TerminateInstanceRequest. */
                class TerminateInstanceRequest implements ITerminateInstanceRequest {

                    /**
                     * Constructs a new TerminateInstanceRequest.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.ec2.v1.ITerminateInstanceRequest);

                    /** TerminateInstanceRequest instanceId. */
                    public instanceId: string;

                    /** TerminateInstanceRequest region. */
                    public region: string;

                    /**
                     * Verifies a TerminateInstanceRequest message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TerminateInstanceRequest message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TerminateInstanceRequest
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.ec2.v1.TerminateInstanceRequest;

                    /**
                     * Creates a plain object from a TerminateInstanceRequest message. Also converts values to other types if specified.
                     * @param message TerminateInstanceRequest
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.ec2.v1.TerminateInstanceRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TerminateInstanceRequest to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a TerminateInstanceResponse. */
                interface ITerminateInstanceResponse {
                }

                /** Represents a TerminateInstanceResponse. */
                class TerminateInstanceResponse implements ITerminateInstanceResponse {

                    /**
                     * Constructs a new TerminateInstanceResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.ec2.v1.ITerminateInstanceResponse);

                    /**
                     * Verifies a TerminateInstanceResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TerminateInstanceResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TerminateInstanceResponse
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.ec2.v1.TerminateInstanceResponse;

                    /**
                     * Creates a plain object from a TerminateInstanceResponse message. Also converts values to other types if specified.
                     * @param message TerminateInstanceResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.ec2.v1.TerminateInstanceResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TerminateInstanceResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a RebootInstanceRequest. */
                interface IRebootInstanceRequest {

                    /** RebootInstanceRequest instanceId */
                    instanceId?: (string|null);

                    /** RebootInstanceRequest region */
                    region?: (string|null);
                }

                /** Represents a RebootInstanceRequest. */
                class RebootInstanceRequest implements IRebootInstanceRequest {

                    /**
                     * Constructs a new RebootInstanceRequest.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.ec2.v1.IRebootInstanceRequest);

                    /** RebootInstanceRequest instanceId. */
                    public instanceId: string;

                    /** RebootInstanceRequest region. */
                    public region: string;

                    /**
                     * Verifies a RebootInstanceRequest message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a RebootInstanceRequest message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns RebootInstanceRequest
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.ec2.v1.RebootInstanceRequest;

                    /**
                     * Creates a plain object from a RebootInstanceRequest message. Also converts values to other types if specified.
                     * @param message RebootInstanceRequest
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.ec2.v1.RebootInstanceRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this RebootInstanceRequest to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a RebootInstanceResponse. */
                interface IRebootInstanceResponse {
                }

                /** Represents a RebootInstanceResponse. */
                class RebootInstanceResponse implements IRebootInstanceResponse {

                    /**
                     * Constructs a new RebootInstanceResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.ec2.v1.IRebootInstanceResponse);

                    /**
                     * Verifies a RebootInstanceResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a RebootInstanceResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns RebootInstanceResponse
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.ec2.v1.RebootInstanceResponse;

                    /**
                     * Creates a plain object from a RebootInstanceResponse message. Also converts values to other types if specified.
                     * @param message RebootInstanceResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.ec2.v1.RebootInstanceResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this RebootInstanceResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an Instance. */
                interface IInstance {

                    /** Instance instanceId */
                    instanceId?: (string|null);

                    /** Instance region */
                    region?: (string|null);

                    /** Instance state */
                    state?: (clutch.aws.ec2.v1.Instance.State|null);

                    /** Instance instanceType */
                    instanceType?: (string|null);

                    /** Instance publicIpAddress */
                    publicIpAddress?: (string|null);

                    /** Instance privateIpAddress */
                    privateIpAddress?: (string|null);

                    /** Instance availabilityZone */
                    availabilityZone?: (string|null);

                    /** Instance tags */
                    tags?: ({ [k: string]: string }|null);
                }

                /** Represents an Instance. */
                class Instance implements IInstance {

                    /**
                     * Constructs a new Instance.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.ec2.v1.IInstance);

                    /** Instance instanceId. */
                    public instanceId: string;

                    /** Instance region. */
                    public region: string;

                    /** Instance state. */
                    public state: clutch.aws.ec2.v1.Instance.State;

                    /** Instance instanceType. */
                    public instanceType: string;

                    /** Instance publicIpAddress. */
                    public publicIpAddress: string;

                    /** Instance privateIpAddress. */
                    public privateIpAddress: string;

                    /** Instance availabilityZone. */
                    public availabilityZone: string;

                    /** Instance tags. */
                    public tags: { [k: string]: string };

                    /**
                     * Verifies an Instance message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Instance message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Instance
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.ec2.v1.Instance;

                    /**
                     * Creates a plain object from an Instance message. Also converts values to other types if specified.
                     * @param message Instance
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.ec2.v1.Instance, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Instance to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Instance {

                    /** State enum. */
                    enum State {
                        UNSPECIFIED = 0,
                        UNKNOWN = 1,
                        PENDING = 2,
                        RUNNING = 3,
                        STOPPING = 4,
                        STOPPED = 5,
                        SHUTTING_DOWN = 6,
                        TERMINATED = 7
                    }
                }
            }
        }

        /** Namespace kinesis. */
        namespace kinesis {

            /** Namespace v1. */
            namespace v1 {

                /** Represents a KinesisAPI */
                class KinesisAPI extends $protobuf.rpc.Service {

                    /**
                     * Constructs a new KinesisAPI service.
                     * @param rpcImpl RPC implementation
                     * @param [requestDelimited=false] Whether requests are length-delimited
                     * @param [responseDelimited=false] Whether responses are length-delimited
                     */
                    constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                    /**
                     * Calls GetStream.
                     * @param request GetStreamRequest message or plain object
                     * @param callback Node-style callback called with the error, if any, and GetStreamResponse
                     */
                    public getStream(request: clutch.aws.kinesis.v1.IGetStreamRequest, callback: clutch.aws.kinesis.v1.KinesisAPI.GetStreamCallback): void;

                    /**
                     * Calls GetStream.
                     * @param request GetStreamRequest message or plain object
                     * @returns Promise
                     */
                    public getStream(request: clutch.aws.kinesis.v1.IGetStreamRequest): Promise<clutch.aws.kinesis.v1.GetStreamResponse>;

                    /**
                     * Calls UpdateShardCount.
                     * @param request UpdateShardCountRequest message or plain object
                     * @param callback Node-style callback called with the error, if any, and UpdateShardCountResponse
                     */
                    public updateShardCount(request: clutch.aws.kinesis.v1.IUpdateShardCountRequest, callback: clutch.aws.kinesis.v1.KinesisAPI.UpdateShardCountCallback): void;

                    /**
                     * Calls UpdateShardCount.
                     * @param request UpdateShardCountRequest message or plain object
                     * @returns Promise
                     */
                    public updateShardCount(request: clutch.aws.kinesis.v1.IUpdateShardCountRequest): Promise<clutch.aws.kinesis.v1.UpdateShardCountResponse>;
                }

                namespace KinesisAPI {

                    /**
                     * Callback as used by {@link clutch.aws.kinesis.v1.KinesisAPI#getStream}.
                     * @param error Error, if any
                     * @param [response] GetStreamResponse
                     */
                    type GetStreamCallback = (error: (Error|null), response?: clutch.aws.kinesis.v1.GetStreamResponse) => void;

                    /**
                     * Callback as used by {@link clutch.aws.kinesis.v1.KinesisAPI#updateShardCount}.
                     * @param error Error, if any
                     * @param [response] UpdateShardCountResponse
                     */
                    type UpdateShardCountCallback = (error: (Error|null), response?: clutch.aws.kinesis.v1.UpdateShardCountResponse) => void;
                }

                /** Properties of a GetStreamRequest. */
                interface IGetStreamRequest {

                    /** GetStreamRequest streamName */
                    streamName?: (string|null);

                    /** GetStreamRequest region */
                    region?: (string|null);
                }

                /** Represents a GetStreamRequest. */
                class GetStreamRequest implements IGetStreamRequest {

                    /**
                     * Constructs a new GetStreamRequest.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.kinesis.v1.IGetStreamRequest);

                    /** GetStreamRequest streamName. */
                    public streamName: string;

                    /** GetStreamRequest region. */
                    public region: string;

                    /**
                     * Verifies a GetStreamRequest message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GetStreamRequest message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GetStreamRequest
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.kinesis.v1.GetStreamRequest;

                    /**
                     * Creates a plain object from a GetStreamRequest message. Also converts values to other types if specified.
                     * @param message GetStreamRequest
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.kinesis.v1.GetStreamRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GetStreamRequest to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a GetStreamResponse. */
                interface IGetStreamResponse {

                    /** GetStreamResponse stream */
                    stream?: (clutch.aws.kinesis.v1.IStream|null);
                }

                /** Represents a GetStreamResponse. */
                class GetStreamResponse implements IGetStreamResponse {

                    /**
                     * Constructs a new GetStreamResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.kinesis.v1.IGetStreamResponse);

                    /** GetStreamResponse stream. */
                    public stream?: (clutch.aws.kinesis.v1.IStream|null);

                    /**
                     * Verifies a GetStreamResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GetStreamResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GetStreamResponse
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.kinesis.v1.GetStreamResponse;

                    /**
                     * Creates a plain object from a GetStreamResponse message. Also converts values to other types if specified.
                     * @param message GetStreamResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.kinesis.v1.GetStreamResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GetStreamResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an UpdateShardCountRequest. */
                interface IUpdateShardCountRequest {

                    /** UpdateShardCountRequest streamName */
                    streamName?: (string|null);

                    /** UpdateShardCountRequest region */
                    region?: (string|null);

                    /** UpdateShardCountRequest targetShardCount */
                    targetShardCount?: (number|null);
                }

                /** Represents an UpdateShardCountRequest. */
                class UpdateShardCountRequest implements IUpdateShardCountRequest {

                    /**
                     * Constructs a new UpdateShardCountRequest.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.kinesis.v1.IUpdateShardCountRequest);

                    /** UpdateShardCountRequest streamName. */
                    public streamName: string;

                    /** UpdateShardCountRequest region. */
                    public region: string;

                    /** UpdateShardCountRequest targetShardCount. */
                    public targetShardCount: number;

                    /**
                     * Verifies an UpdateShardCountRequest message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an UpdateShardCountRequest message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns UpdateShardCountRequest
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.kinesis.v1.UpdateShardCountRequest;

                    /**
                     * Creates a plain object from an UpdateShardCountRequest message. Also converts values to other types if specified.
                     * @param message UpdateShardCountRequest
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.kinesis.v1.UpdateShardCountRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this UpdateShardCountRequest to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an UpdateShardCountResponse. */
                interface IUpdateShardCountResponse {
                }

                /** Represents an UpdateShardCountResponse. */
                class UpdateShardCountResponse implements IUpdateShardCountResponse {

                    /**
                     * Constructs a new UpdateShardCountResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.kinesis.v1.IUpdateShardCountResponse);

                    /**
                     * Verifies an UpdateShardCountResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an UpdateShardCountResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns UpdateShardCountResponse
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.kinesis.v1.UpdateShardCountResponse;

                    /**
                     * Creates a plain object from an UpdateShardCountResponse message. Also converts values to other types if specified.
                     * @param message UpdateShardCountResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.kinesis.v1.UpdateShardCountResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this UpdateShardCountResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Stream. */
                interface IStream {

                    /** Stream streamName */
                    streamName?: (string|null);

                    /** Stream region */
                    region?: (string|null);

                    /** Stream currentShardCount */
                    currentShardCount?: (number|null);
                }

                /** Represents a Stream. */
                class Stream implements IStream {

                    /**
                     * Constructs a new Stream.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.aws.kinesis.v1.IStream);

                    /** Stream streamName. */
                    public streamName: string;

                    /** Stream region. */
                    public region: string;

                    /** Stream currentShardCount. */
                    public currentShardCount: number;

                    /**
                     * Verifies a Stream message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Stream message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Stream
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.aws.kinesis.v1.Stream;

                    /**
                     * Creates a plain object from a Stream message. Also converts values to other types if specified.
                     * @param message Stream
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.aws.kinesis.v1.Stream, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Stream to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }
    }

    /** Namespace chaos. */
    namespace chaos {

        /** Namespace experimentation. */
        namespace experimentation {

            /** Namespace v1. */
            namespace v1 {

                /** Properties of a CreateExperimentRequest. */
                interface ICreateExperimentRequest {

                    /** CreateExperimentRequest config */
                    config?: (google.protobuf.IAny|null);

                    /** CreateExperimentRequest startTime */
                    startTime?: (google.protobuf.ITimestamp|null);

                    /** CreateExperimentRequest endTime */
                    endTime?: (google.protobuf.ITimestamp|null);
                }

                /** Represents a CreateExperimentRequest. */
                class CreateExperimentRequest implements ICreateExperimentRequest {

                    /**
                     * Constructs a new CreateExperimentRequest.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.ICreateExperimentRequest);

                    /** CreateExperimentRequest config. */
                    public config?: (google.protobuf.IAny|null);

                    /** CreateExperimentRequest startTime. */
                    public startTime?: (google.protobuf.ITimestamp|null);

                    /** CreateExperimentRequest endTime. */
                    public endTime?: (google.protobuf.ITimestamp|null);

                    /**
                     * Verifies a CreateExperimentRequest message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CreateExperimentRequest message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CreateExperimentRequest
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.CreateExperimentRequest;

                    /**
                     * Creates a plain object from a CreateExperimentRequest message. Also converts values to other types if specified.
                     * @param message CreateExperimentRequest
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.CreateExperimentRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CreateExperimentRequest to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a CreateExperimentResponse. */
                interface ICreateExperimentResponse {

                    /** CreateExperimentResponse experiment */
                    experiment?: (clutch.chaos.experimentation.v1.IExperiment|null);
                }

                /** Represents a CreateExperimentResponse. */
                class CreateExperimentResponse implements ICreateExperimentResponse {

                    /**
                     * Constructs a new CreateExperimentResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.ICreateExperimentResponse);

                    /** CreateExperimentResponse experiment. */
                    public experiment?: (clutch.chaos.experimentation.v1.IExperiment|null);

                    /**
                     * Verifies a CreateExperimentResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CreateExperimentResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CreateExperimentResponse
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.CreateExperimentResponse;

                    /**
                     * Creates a plain object from a CreateExperimentResponse message. Also converts values to other types if specified.
                     * @param message CreateExperimentResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.CreateExperimentResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CreateExperimentResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a GetExperimentsRequest. */
                interface IGetExperimentsRequest {

                    /** GetExperimentsRequest configType */
                    configType?: (string|null);

                    /** GetExperimentsRequest status */
                    status?: (clutch.chaos.experimentation.v1.GetExperimentsRequest.Status|null);
                }

                /** Represents a GetExperimentsRequest. */
                class GetExperimentsRequest implements IGetExperimentsRequest {

                    /**
                     * Constructs a new GetExperimentsRequest.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.IGetExperimentsRequest);

                    /** GetExperimentsRequest configType. */
                    public configType: string;

                    /** GetExperimentsRequest status. */
                    public status: clutch.chaos.experimentation.v1.GetExperimentsRequest.Status;

                    /**
                     * Verifies a GetExperimentsRequest message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GetExperimentsRequest message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GetExperimentsRequest
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.GetExperimentsRequest;

                    /**
                     * Creates a plain object from a GetExperimentsRequest message. Also converts values to other types if specified.
                     * @param message GetExperimentsRequest
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.GetExperimentsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GetExperimentsRequest to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace GetExperimentsRequest {

                    /** Status enum. */
                    enum Status {
                        STATUS_UNSPECIFIED = 0,
                        STATUS_RUNNING = 1
                    }
                }

                /** Properties of a GetExperimentsResponse. */
                interface IGetExperimentsResponse {

                    /** GetExperimentsResponse experiments */
                    experiments?: (clutch.chaos.experimentation.v1.IExperiment[]|null);
                }

                /** Represents a GetExperimentsResponse. */
                class GetExperimentsResponse implements IGetExperimentsResponse {

                    /**
                     * Constructs a new GetExperimentsResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.IGetExperimentsResponse);

                    /** GetExperimentsResponse experiments. */
                    public experiments: clutch.chaos.experimentation.v1.IExperiment[];

                    /**
                     * Verifies a GetExperimentsResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GetExperimentsResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GetExperimentsResponse
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.GetExperimentsResponse;

                    /**
                     * Creates a plain object from a GetExperimentsResponse message. Also converts values to other types if specified.
                     * @param message GetExperimentsResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.GetExperimentsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GetExperimentsResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a CancelExperimentRunRequest. */
                interface ICancelExperimentRunRequest {

                    /** CancelExperimentRunRequest id */
                    id?: (number|Long|null);
                }

                /** Represents a CancelExperimentRunRequest. */
                class CancelExperimentRunRequest implements ICancelExperimentRunRequest {

                    /**
                     * Constructs a new CancelExperimentRunRequest.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.ICancelExperimentRunRequest);

                    /** CancelExperimentRunRequest id. */
                    public id: (number|Long);

                    /**
                     * Verifies a CancelExperimentRunRequest message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CancelExperimentRunRequest message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CancelExperimentRunRequest
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.CancelExperimentRunRequest;

                    /**
                     * Creates a plain object from a CancelExperimentRunRequest message. Also converts values to other types if specified.
                     * @param message CancelExperimentRunRequest
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.CancelExperimentRunRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CancelExperimentRunRequest to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a CancelExperimentRunResponse. */
                interface ICancelExperimentRunResponse {
                }

                /** Represents a CancelExperimentRunResponse. */
                class CancelExperimentRunResponse implements ICancelExperimentRunResponse {

                    /**
                     * Constructs a new CancelExperimentRunResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.ICancelExperimentRunResponse);

                    /**
                     * Verifies a CancelExperimentRunResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CancelExperimentRunResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CancelExperimentRunResponse
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.CancelExperimentRunResponse;

                    /**
                     * Creates a plain object from a CancelExperimentRunResponse message. Also converts values to other types if specified.
                     * @param message CancelExperimentRunResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.CancelExperimentRunResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CancelExperimentRunResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a GetListViewRequest. */
                interface IGetListViewRequest {
                }

                /** Represents a GetListViewRequest. */
                class GetListViewRequest implements IGetListViewRequest {

                    /**
                     * Constructs a new GetListViewRequest.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.IGetListViewRequest);

                    /**
                     * Verifies a GetListViewRequest message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GetListViewRequest message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GetListViewRequest
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.GetListViewRequest;

                    /**
                     * Creates a plain object from a GetListViewRequest message. Also converts values to other types if specified.
                     * @param message GetListViewRequest
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.GetListViewRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GetListViewRequest to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a GetListViewResponse. */
                interface IGetListViewResponse {

                    /** GetListViewResponse items */
                    items?: (clutch.chaos.experimentation.v1.IListViewItem[]|null);
                }

                /** Represents a GetListViewResponse. */
                class GetListViewResponse implements IGetListViewResponse {

                    /**
                     * Constructs a new GetListViewResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.IGetListViewResponse);

                    /** GetListViewResponse items. */
                    public items: clutch.chaos.experimentation.v1.IListViewItem[];

                    /**
                     * Verifies a GetListViewResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GetListViewResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GetListViewResponse
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.GetListViewResponse;

                    /**
                     * Creates a plain object from a GetListViewResponse message. Also converts values to other types if specified.
                     * @param message GetListViewResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.GetListViewResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GetListViewResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a GetExperimentRunDetailsRequest. */
                interface IGetExperimentRunDetailsRequest {

                    /** GetExperimentRunDetailsRequest id */
                    id?: (number|Long|null);
                }

                /** Represents a GetExperimentRunDetailsRequest. */
                class GetExperimentRunDetailsRequest implements IGetExperimentRunDetailsRequest {

                    /**
                     * Constructs a new GetExperimentRunDetailsRequest.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.IGetExperimentRunDetailsRequest);

                    /** GetExperimentRunDetailsRequest id. */
                    public id: (number|Long);

                    /**
                     * Verifies a GetExperimentRunDetailsRequest message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GetExperimentRunDetailsRequest message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GetExperimentRunDetailsRequest
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.GetExperimentRunDetailsRequest;

                    /**
                     * Creates a plain object from a GetExperimentRunDetailsRequest message. Also converts values to other types if specified.
                     * @param message GetExperimentRunDetailsRequest
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.GetExperimentRunDetailsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GetExperimentRunDetailsRequest to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a GetExperimentRunDetailsResponse. */
                interface IGetExperimentRunDetailsResponse {

                    /** GetExperimentRunDetailsResponse runDetails */
                    runDetails?: (clutch.chaos.experimentation.v1.IExperimentRunDetails|null);
                }

                /** Represents a GetExperimentRunDetailsResponse. */
                class GetExperimentRunDetailsResponse implements IGetExperimentRunDetailsResponse {

                    /**
                     * Constructs a new GetExperimentRunDetailsResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.IGetExperimentRunDetailsResponse);

                    /** GetExperimentRunDetailsResponse runDetails. */
                    public runDetails?: (clutch.chaos.experimentation.v1.IExperimentRunDetails|null);

                    /**
                     * Verifies a GetExperimentRunDetailsResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GetExperimentRunDetailsResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GetExperimentRunDetailsResponse
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.GetExperimentRunDetailsResponse;

                    /**
                     * Creates a plain object from a GetExperimentRunDetailsResponse message. Also converts values to other types if specified.
                     * @param message GetExperimentRunDetailsResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.GetExperimentRunDetailsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GetExperimentRunDetailsResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Represents an ExperimentsAPI */
                class ExperimentsAPI extends $protobuf.rpc.Service {

                    /**
                     * Constructs a new ExperimentsAPI service.
                     * @param rpcImpl RPC implementation
                     * @param [requestDelimited=false] Whether requests are length-delimited
                     * @param [responseDelimited=false] Whether responses are length-delimited
                     */
                    constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                    /**
                     * Calls CreateExperiment.
                     * @param request CreateExperimentRequest message or plain object
                     * @param callback Node-style callback called with the error, if any, and CreateExperimentResponse
                     */
                    public createExperiment(request: clutch.chaos.experimentation.v1.ICreateExperimentRequest, callback: clutch.chaos.experimentation.v1.ExperimentsAPI.CreateExperimentCallback): void;

                    /**
                     * Calls CreateExperiment.
                     * @param request CreateExperimentRequest message or plain object
                     * @returns Promise
                     */
                    public createExperiment(request: clutch.chaos.experimentation.v1.ICreateExperimentRequest): Promise<clutch.chaos.experimentation.v1.CreateExperimentResponse>;

                    /**
                     * Calls CancelExperimentRun.
                     * @param request CancelExperimentRunRequest message or plain object
                     * @param callback Node-style callback called with the error, if any, and CancelExperimentRunResponse
                     */
                    public cancelExperimentRun(request: clutch.chaos.experimentation.v1.ICancelExperimentRunRequest, callback: clutch.chaos.experimentation.v1.ExperimentsAPI.CancelExperimentRunCallback): void;

                    /**
                     * Calls CancelExperimentRun.
                     * @param request CancelExperimentRunRequest message or plain object
                     * @returns Promise
                     */
                    public cancelExperimentRun(request: clutch.chaos.experimentation.v1.ICancelExperimentRunRequest): Promise<clutch.chaos.experimentation.v1.CancelExperimentRunResponse>;

                    /**
                     * Calls GetExperiments.
                     * @param request GetExperimentsRequest message or plain object
                     * @param callback Node-style callback called with the error, if any, and GetExperimentsResponse
                     */
                    public getExperiments(request: clutch.chaos.experimentation.v1.IGetExperimentsRequest, callback: clutch.chaos.experimentation.v1.ExperimentsAPI.GetExperimentsCallback): void;

                    /**
                     * Calls GetExperiments.
                     * @param request GetExperimentsRequest message or plain object
                     * @returns Promise
                     */
                    public getExperiments(request: clutch.chaos.experimentation.v1.IGetExperimentsRequest): Promise<clutch.chaos.experimentation.v1.GetExperimentsResponse>;

                    /**
                     * Calls GetListView.
                     * @param request GetListViewRequest message or plain object
                     * @param callback Node-style callback called with the error, if any, and GetListViewResponse
                     */
                    public getListView(request: clutch.chaos.experimentation.v1.IGetListViewRequest, callback: clutch.chaos.experimentation.v1.ExperimentsAPI.GetListViewCallback): void;

                    /**
                     * Calls GetListView.
                     * @param request GetListViewRequest message or plain object
                     * @returns Promise
                     */
                    public getListView(request: clutch.chaos.experimentation.v1.IGetListViewRequest): Promise<clutch.chaos.experimentation.v1.GetListViewResponse>;

                    /**
                     * Calls GetExperimentRunDetails.
                     * @param request GetExperimentRunDetailsRequest message or plain object
                     * @param callback Node-style callback called with the error, if any, and GetExperimentRunDetailsResponse
                     */
                    public getExperimentRunDetails(request: clutch.chaos.experimentation.v1.IGetExperimentRunDetailsRequest, callback: clutch.chaos.experimentation.v1.ExperimentsAPI.GetExperimentRunDetailsCallback): void;

                    /**
                     * Calls GetExperimentRunDetails.
                     * @param request GetExperimentRunDetailsRequest message or plain object
                     * @returns Promise
                     */
                    public getExperimentRunDetails(request: clutch.chaos.experimentation.v1.IGetExperimentRunDetailsRequest): Promise<clutch.chaos.experimentation.v1.GetExperimentRunDetailsResponse>;
                }

                namespace ExperimentsAPI {

                    /**
                     * Callback as used by {@link clutch.chaos.experimentation.v1.ExperimentsAPI#createExperiment}.
                     * @param error Error, if any
                     * @param [response] CreateExperimentResponse
                     */
                    type CreateExperimentCallback = (error: (Error|null), response?: clutch.chaos.experimentation.v1.CreateExperimentResponse) => void;

                    /**
                     * Callback as used by {@link clutch.chaos.experimentation.v1.ExperimentsAPI#cancelExperimentRun}.
                     * @param error Error, if any
                     * @param [response] CancelExperimentRunResponse
                     */
                    type CancelExperimentRunCallback = (error: (Error|null), response?: clutch.chaos.experimentation.v1.CancelExperimentRunResponse) => void;

                    /**
                     * Callback as used by {@link clutch.chaos.experimentation.v1.ExperimentsAPI#getExperiments}.
                     * @param error Error, if any
                     * @param [response] GetExperimentsResponse
                     */
                    type GetExperimentsCallback = (error: (Error|null), response?: clutch.chaos.experimentation.v1.GetExperimentsResponse) => void;

                    /**
                     * Callback as used by {@link clutch.chaos.experimentation.v1.ExperimentsAPI#getListView}.
                     * @param error Error, if any
                     * @param [response] GetListViewResponse
                     */
                    type GetListViewCallback = (error: (Error|null), response?: clutch.chaos.experimentation.v1.GetListViewResponse) => void;

                    /**
                     * Callback as used by {@link clutch.chaos.experimentation.v1.ExperimentsAPI#getExperimentRunDetails}.
                     * @param error Error, if any
                     * @param [response] GetExperimentRunDetailsResponse
                     */
                    type GetExperimentRunDetailsCallback = (error: (Error|null), response?: clutch.chaos.experimentation.v1.GetExperimentRunDetailsResponse) => void;
                }

                /** Properties of an Experiment. */
                interface IExperiment {

                    /** Experiment id */
                    id?: (number|Long|null);

                    /** Experiment config */
                    config?: (google.protobuf.IAny|null);

                    /** Experiment startTime */
                    startTime?: (google.protobuf.ITimestamp|null);

                    /** Experiment endTime */
                    endTime?: (google.protobuf.ITimestamp|null);
                }

                /** Represents an Experiment. */
                class Experiment implements IExperiment {

                    /**
                     * Constructs a new Experiment.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.IExperiment);

                    /** Experiment id. */
                    public id: (number|Long);

                    /** Experiment config. */
                    public config?: (google.protobuf.IAny|null);

                    /** Experiment startTime. */
                    public startTime?: (google.protobuf.ITimestamp|null);

                    /** Experiment endTime. */
                    public endTime?: (google.protobuf.ITimestamp|null);

                    /**
                     * Verifies an Experiment message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Experiment message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Experiment
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.Experiment;

                    /**
                     * Creates a plain object from an Experiment message. Also converts values to other types if specified.
                     * @param message Experiment
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.Experiment, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Experiment to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Experiment {

                    /** Status enum. */
                    enum Status {
                        STATUS_UNSPECIFIED = 0,
                        STATUS_SCHEDULED = 1,
                        STATUS_RUNNING = 2,
                        STATUS_COMPLETED = 3,
                        STATUS_CANCELED = 4,
                        STATUS_STOPPED = 5
                    }
                }

                /** Properties of a ListViewItem. */
                interface IListViewItem {

                    /** ListViewItem id */
                    id?: (number|Long|null);

                    /** ListViewItem properties */
                    properties?: (clutch.chaos.experimentation.v1.IPropertiesMap|null);
                }

                /** Represents a ListViewItem. */
                class ListViewItem implements IListViewItem {

                    /**
                     * Constructs a new ListViewItem.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.IListViewItem);

                    /** ListViewItem id. */
                    public id: (number|Long);

                    /** ListViewItem properties. */
                    public properties?: (clutch.chaos.experimentation.v1.IPropertiesMap|null);

                    /**
                     * Verifies a ListViewItem message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ListViewItem message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ListViewItem
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.ListViewItem;

                    /**
                     * Creates a plain object from a ListViewItem message. Also converts values to other types if specified.
                     * @param message ListViewItem
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.ListViewItem, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ListViewItem to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a PropertiesList. */
                interface IPropertiesList {

                    /** PropertiesList items */
                    items?: (clutch.chaos.experimentation.v1.IProperty[]|null);
                }

                /** Represents a PropertiesList. */
                class PropertiesList implements IPropertiesList {

                    /**
                     * Constructs a new PropertiesList.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.IPropertiesList);

                    /** PropertiesList items. */
                    public items: clutch.chaos.experimentation.v1.IProperty[];

                    /**
                     * Verifies a PropertiesList message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a PropertiesList message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns PropertiesList
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.PropertiesList;

                    /**
                     * Creates a plain object from a PropertiesList message. Also converts values to other types if specified.
                     * @param message PropertiesList
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.PropertiesList, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this PropertiesList to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a PropertiesMap. */
                interface IPropertiesMap {

                    /** PropertiesMap items */
                    items?: ({ [k: string]: clutch.chaos.experimentation.v1.IProperty }|null);
                }

                /** Represents a PropertiesMap. */
                class PropertiesMap implements IPropertiesMap {

                    /**
                     * Constructs a new PropertiesMap.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.IPropertiesMap);

                    /** PropertiesMap items. */
                    public items: { [k: string]: clutch.chaos.experimentation.v1.IProperty };

                    /**
                     * Verifies a PropertiesMap message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a PropertiesMap message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns PropertiesMap
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.PropertiesMap;

                    /**
                     * Creates a plain object from a PropertiesMap message. Also converts values to other types if specified.
                     * @param message PropertiesMap
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.PropertiesMap, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this PropertiesMap to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Property. */
                interface IProperty {

                    /** Property id */
                    id?: (string|null);

                    /** Property label */
                    label?: (string|null);

                    /** Property displayValue */
                    displayValue?: (google.protobuf.IStringValue|null);

                    /** Property dateValue */
                    dateValue?: (google.protobuf.ITimestamp|null);

                    /** Property stringValue */
                    stringValue?: (string|null);

                    /** Property intValue */
                    intValue?: (number|Long|null);

                    /** Property urlValue */
                    urlValue?: (string|null);
                }

                /** Represents a Property. */
                class Property implements IProperty {

                    /**
                     * Constructs a new Property.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.IProperty);

                    /** Property id. */
                    public id: string;

                    /** Property label. */
                    public label: string;

                    /** Property displayValue. */
                    public displayValue?: (google.protobuf.IStringValue|null);

                    /** Property dateValue. */
                    public dateValue?: (google.protobuf.ITimestamp|null);

                    /** Property stringValue. */
                    public stringValue: string;

                    /** Property intValue. */
                    public intValue: (number|Long);

                    /** Property urlValue. */
                    public urlValue: string;

                    /** Property value. */
                    public value?: ("dateValue"|"stringValue"|"intValue"|"urlValue");

                    /**
                     * Verifies a Property message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Property message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Property
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.Property;

                    /**
                     * Creates a plain object from a Property message. Also converts values to other types if specified.
                     * @param message Property
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.Property, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Property to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an ExperimentRunDetails. */
                interface IExperimentRunDetails {

                    /** ExperimentRunDetails runId */
                    runId?: (number|Long|null);

                    /** ExperimentRunDetails status */
                    status?: (clutch.chaos.experimentation.v1.Experiment.Status|null);

                    /** ExperimentRunDetails properties */
                    properties?: (clutch.chaos.experimentation.v1.IPropertiesList|null);

                    /** ExperimentRunDetails config */
                    config?: (google.protobuf.IAny|null);
                }

                /** Represents an ExperimentRunDetails. */
                class ExperimentRunDetails implements IExperimentRunDetails {

                    /**
                     * Constructs a new ExperimentRunDetails.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.experimentation.v1.IExperimentRunDetails);

                    /** ExperimentRunDetails runId. */
                    public runId: (number|Long);

                    /** ExperimentRunDetails status. */
                    public status: clutch.chaos.experimentation.v1.Experiment.Status;

                    /** ExperimentRunDetails properties. */
                    public properties?: (clutch.chaos.experimentation.v1.IPropertiesList|null);

                    /** ExperimentRunDetails config. */
                    public config?: (google.protobuf.IAny|null);

                    /**
                     * Verifies an ExperimentRunDetails message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an ExperimentRunDetails message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ExperimentRunDetails
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.experimentation.v1.ExperimentRunDetails;

                    /**
                     * Creates a plain object from an ExperimentRunDetails message. Also converts values to other types if specified.
                     * @param message ExperimentRunDetails
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.experimentation.v1.ExperimentRunDetails, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ExperimentRunDetails to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }

        /** Namespace serverexperimentation. */
        namespace serverexperimentation {

            /** Namespace v1. */
            namespace v1 {

                /** Properties of a TestConfig. */
                interface ITestConfig {

                    /** TestConfig clusterPair */
                    clusterPair?: (clutch.chaos.serverexperimentation.v1.IClusterPairTarget|null);

                    /** TestConfig abort */
                    abort?: (clutch.chaos.serverexperimentation.v1.IAbortFaultConfig|null);

                    /** TestConfig latency */
                    latency?: (clutch.chaos.serverexperimentation.v1.ILatencyFaultConfig|null);
                }

                /** Represents a TestConfig. */
                class TestConfig implements ITestConfig {

                    /**
                     * Constructs a new TestConfig.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.ITestConfig);

                    /** TestConfig clusterPair. */
                    public clusterPair?: (clutch.chaos.serverexperimentation.v1.IClusterPairTarget|null);

                    /** TestConfig abort. */
                    public abort?: (clutch.chaos.serverexperimentation.v1.IAbortFaultConfig|null);

                    /** TestConfig latency. */
                    public latency?: (clutch.chaos.serverexperimentation.v1.ILatencyFaultConfig|null);

                    /** TestConfig fault. */
                    public fault?: ("abort"|"latency");

                    /**
                     * Verifies a TestConfig message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TestConfig message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TestConfig
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.TestConfig;

                    /**
                     * Creates a plain object from a TestConfig message. Also converts values to other types if specified.
                     * @param message TestConfig
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.TestConfig, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TestConfig to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a ClusterPairTarget. */
                interface IClusterPairTarget {

                    /** ClusterPairTarget downstreamCluster */
                    downstreamCluster?: (string|null);

                    /** ClusterPairTarget upstreamCluster */
                    upstreamCluster?: (string|null);

                    /** ClusterPairTarget faultInjectionCluster */
                    faultInjectionCluster?: (clutch.chaos.serverexperimentation.v1.FaultInjectionCluster|null);
                }

                /** Represents a ClusterPairTarget. */
                class ClusterPairTarget implements IClusterPairTarget {

                    /**
                     * Constructs a new ClusterPairTarget.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.IClusterPairTarget);

                    /** ClusterPairTarget downstreamCluster. */
                    public downstreamCluster: string;

                    /** ClusterPairTarget upstreamCluster. */
                    public upstreamCluster: string;

                    /** ClusterPairTarget faultInjectionCluster. */
                    public faultInjectionCluster: clutch.chaos.serverexperimentation.v1.FaultInjectionCluster;

                    /**
                     * Verifies a ClusterPairTarget message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ClusterPairTarget message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ClusterPairTarget
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.ClusterPairTarget;

                    /**
                     * Creates a plain object from a ClusterPairTarget message. Also converts values to other types if specified.
                     * @param message ClusterPairTarget
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.ClusterPairTarget, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ClusterPairTarget to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an AbortFaultConfig. */
                interface IAbortFaultConfig {

                    /** AbortFaultConfig percent */
                    percent?: (number|null);

                    /** AbortFaultConfig httpStatus */
                    httpStatus?: (number|null);
                }

                /** Represents an AbortFaultConfig. */
                class AbortFaultConfig implements IAbortFaultConfig {

                    /**
                     * Constructs a new AbortFaultConfig.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.IAbortFaultConfig);

                    /** AbortFaultConfig percent. */
                    public percent: number;

                    /** AbortFaultConfig httpStatus. */
                    public httpStatus: number;

                    /**
                     * Verifies an AbortFaultConfig message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an AbortFaultConfig message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns AbortFaultConfig
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.AbortFaultConfig;

                    /**
                     * Creates a plain object from an AbortFaultConfig message. Also converts values to other types if specified.
                     * @param message AbortFaultConfig
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.AbortFaultConfig, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this AbortFaultConfig to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a LatencyFaultConfig. */
                interface ILatencyFaultConfig {

                    /** LatencyFaultConfig percent */
                    percent?: (number|null);

                    /** LatencyFaultConfig durationMs */
                    durationMs?: (number|null);
                }

                /** Represents a LatencyFaultConfig. */
                class LatencyFaultConfig implements ILatencyFaultConfig {

                    /**
                     * Constructs a new LatencyFaultConfig.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.ILatencyFaultConfig);

                    /** LatencyFaultConfig percent. */
                    public percent: number;

                    /** LatencyFaultConfig durationMs. */
                    public durationMs: number;

                    /**
                     * Verifies a LatencyFaultConfig message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a LatencyFaultConfig message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns LatencyFaultConfig
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.LatencyFaultConfig;

                    /**
                     * Creates a plain object from a LatencyFaultConfig message. Also converts values to other types if specified.
                     * @param message LatencyFaultConfig
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.LatencyFaultConfig, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this LatencyFaultConfig to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** FaultInjectionCluster enum. */
                enum FaultInjectionCluster {
                    FAULTINJECTIONCLUSTER_UNSPECIFIED = 0,
                    FAULTINJECTIONCLUSTER_DOWNSTREAM = 1,
                    FAULTINJECTIONCLUSTER_UPSTREAM = 2
                }

                /** Properties of a HTTPFaultConfig. */
                interface IHTTPFaultConfig {

                    /** HTTPFaultConfig faultTargeting */
                    faultTargeting?: (clutch.chaos.serverexperimentation.v1.IFaultTargeting|null);

                    /** HTTPFaultConfig abortFault */
                    abortFault?: (clutch.chaos.serverexperimentation.v1.IAbortFault|null);

                    /** HTTPFaultConfig latencyFault */
                    latencyFault?: (clutch.chaos.serverexperimentation.v1.ILatencyFault|null);
                }

                /** Represents a HTTPFaultConfig. */
                class HTTPFaultConfig implements IHTTPFaultConfig {

                    /**
                     * Constructs a new HTTPFaultConfig.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.IHTTPFaultConfig);

                    /** HTTPFaultConfig faultTargeting. */
                    public faultTargeting?: (clutch.chaos.serverexperimentation.v1.IFaultTargeting|null);

                    /** HTTPFaultConfig abortFault. */
                    public abortFault?: (clutch.chaos.serverexperimentation.v1.IAbortFault|null);

                    /** HTTPFaultConfig latencyFault. */
                    public latencyFault?: (clutch.chaos.serverexperimentation.v1.ILatencyFault|null);

                    /** HTTPFaultConfig fault. */
                    public fault?: ("abortFault"|"latencyFault");

                    /**
                     * Verifies a HTTPFaultConfig message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a HTTPFaultConfig message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns HTTPFaultConfig
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.HTTPFaultConfig;

                    /**
                     * Creates a plain object from a HTTPFaultConfig message. Also converts values to other types if specified.
                     * @param message HTTPFaultConfig
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.HTTPFaultConfig, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this HTTPFaultConfig to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an AbortFault. */
                interface IAbortFault {

                    /** AbortFault percentage */
                    percentage?: (clutch.chaos.serverexperimentation.v1.IFaultPercentage|null);

                    /** AbortFault abortStatus */
                    abortStatus?: (clutch.chaos.serverexperimentation.v1.IFaultAbortStatus|null);
                }

                /** Represents an AbortFault. */
                class AbortFault implements IAbortFault {

                    /**
                     * Constructs a new AbortFault.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.IAbortFault);

                    /** AbortFault percentage. */
                    public percentage?: (clutch.chaos.serverexperimentation.v1.IFaultPercentage|null);

                    /** AbortFault abortStatus. */
                    public abortStatus?: (clutch.chaos.serverexperimentation.v1.IFaultAbortStatus|null);

                    /**
                     * Verifies an AbortFault message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an AbortFault message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns AbortFault
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.AbortFault;

                    /**
                     * Creates a plain object from an AbortFault message. Also converts values to other types if specified.
                     * @param message AbortFault
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.AbortFault, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this AbortFault to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a LatencyFault. */
                interface ILatencyFault {

                    /** LatencyFault percentage */
                    percentage?: (clutch.chaos.serverexperimentation.v1.IFaultPercentage|null);

                    /** LatencyFault latencyDuration */
                    latencyDuration?: (clutch.chaos.serverexperimentation.v1.IFaultLatencyDuration|null);
                }

                /** Represents a LatencyFault. */
                class LatencyFault implements ILatencyFault {

                    /**
                     * Constructs a new LatencyFault.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.ILatencyFault);

                    /** LatencyFault percentage. */
                    public percentage?: (clutch.chaos.serverexperimentation.v1.IFaultPercentage|null);

                    /** LatencyFault latencyDuration. */
                    public latencyDuration?: (clutch.chaos.serverexperimentation.v1.IFaultLatencyDuration|null);

                    /**
                     * Verifies a LatencyFault message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a LatencyFault message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns LatencyFault
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.LatencyFault;

                    /**
                     * Creates a plain object from a LatencyFault message. Also converts values to other types if specified.
                     * @param message LatencyFault
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.LatencyFault, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this LatencyFault to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a FaultTargeting. */
                interface IFaultTargeting {

                    /** FaultTargeting upstreamEnforcing */
                    upstreamEnforcing?: (clutch.chaos.serverexperimentation.v1.IUpstreamEnforcing|null);

                    /** FaultTargeting downstreamEnforcing */
                    downstreamEnforcing?: (clutch.chaos.serverexperimentation.v1.IDownstreamEnforcing|null);
                }

                /** Represents a FaultTargeting. */
                class FaultTargeting implements IFaultTargeting {

                    /**
                     * Constructs a new FaultTargeting.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.IFaultTargeting);

                    /** FaultTargeting upstreamEnforcing. */
                    public upstreamEnforcing?: (clutch.chaos.serverexperimentation.v1.IUpstreamEnforcing|null);

                    /** FaultTargeting downstreamEnforcing. */
                    public downstreamEnforcing?: (clutch.chaos.serverexperimentation.v1.IDownstreamEnforcing|null);

                    /** FaultTargeting enforcer. */
                    public enforcer?: ("upstreamEnforcing"|"downstreamEnforcing");

                    /**
                     * Verifies a FaultTargeting message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a FaultTargeting message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns FaultTargeting
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.FaultTargeting;

                    /**
                     * Creates a plain object from a FaultTargeting message. Also converts values to other types if specified.
                     * @param message FaultTargeting
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.FaultTargeting, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this FaultTargeting to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an UpstreamEnforcing. */
                interface IUpstreamEnforcing {

                    /** UpstreamEnforcing upstreamCluster */
                    upstreamCluster?: (clutch.chaos.serverexperimentation.v1.ISingleCluster|null);

                    /** UpstreamEnforcing upstreamPartialSingleCluster */
                    upstreamPartialSingleCluster?: (clutch.chaos.serverexperimentation.v1.IPartialSingleCluster|null);

                    /** UpstreamEnforcing downstreamCluster */
                    downstreamCluster?: (clutch.chaos.serverexperimentation.v1.ISingleCluster|null);
                }

                /** Represents an UpstreamEnforcing. */
                class UpstreamEnforcing implements IUpstreamEnforcing {

                    /**
                     * Constructs a new UpstreamEnforcing.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.IUpstreamEnforcing);

                    /** UpstreamEnforcing upstreamCluster. */
                    public upstreamCluster?: (clutch.chaos.serverexperimentation.v1.ISingleCluster|null);

                    /** UpstreamEnforcing upstreamPartialSingleCluster. */
                    public upstreamPartialSingleCluster?: (clutch.chaos.serverexperimentation.v1.IPartialSingleCluster|null);

                    /** UpstreamEnforcing downstreamCluster. */
                    public downstreamCluster?: (clutch.chaos.serverexperimentation.v1.ISingleCluster|null);

                    /** UpstreamEnforcing upstreamType. */
                    public upstreamType?: ("upstreamCluster"|"upstreamPartialSingleCluster");

                    /** UpstreamEnforcing downstreamType. */
                    public downstreamType?: "downstreamCluster";

                    /**
                     * Verifies an UpstreamEnforcing message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an UpstreamEnforcing message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns UpstreamEnforcing
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.UpstreamEnforcing;

                    /**
                     * Creates a plain object from an UpstreamEnforcing message. Also converts values to other types if specified.
                     * @param message UpstreamEnforcing
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.UpstreamEnforcing, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this UpstreamEnforcing to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a DownstreamEnforcing. */
                interface IDownstreamEnforcing {

                    /** DownstreamEnforcing upstreamCluster */
                    upstreamCluster?: (clutch.chaos.serverexperimentation.v1.ISingleCluster|null);

                    /** DownstreamEnforcing downstreamCluster */
                    downstreamCluster?: (clutch.chaos.serverexperimentation.v1.ISingleCluster|null);
                }

                /** Represents a DownstreamEnforcing. */
                class DownstreamEnforcing implements IDownstreamEnforcing {

                    /**
                     * Constructs a new DownstreamEnforcing.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.IDownstreamEnforcing);

                    /** DownstreamEnforcing upstreamCluster. */
                    public upstreamCluster?: (clutch.chaos.serverexperimentation.v1.ISingleCluster|null);

                    /** DownstreamEnforcing downstreamCluster. */
                    public downstreamCluster?: (clutch.chaos.serverexperimentation.v1.ISingleCluster|null);

                    /** DownstreamEnforcing upstreamType. */
                    public upstreamType?: "upstreamCluster";

                    /** DownstreamEnforcing downstreamType. */
                    public downstreamType?: "downstreamCluster";

                    /**
                     * Verifies a DownstreamEnforcing message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a DownstreamEnforcing message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns DownstreamEnforcing
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.DownstreamEnforcing;

                    /**
                     * Creates a plain object from a DownstreamEnforcing message. Also converts values to other types if specified.
                     * @param message DownstreamEnforcing
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.DownstreamEnforcing, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this DownstreamEnforcing to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a SingleCluster. */
                interface ISingleCluster {

                    /** SingleCluster name */
                    name?: (string|null);
                }

                /** Represents a SingleCluster. */
                class SingleCluster implements ISingleCluster {

                    /**
                     * Constructs a new SingleCluster.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.ISingleCluster);

                    /** SingleCluster name. */
                    public name: string;

                    /**
                     * Verifies a SingleCluster message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a SingleCluster message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns SingleCluster
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.SingleCluster;

                    /**
                     * Creates a plain object from a SingleCluster message. Also converts values to other types if specified.
                     * @param message SingleCluster
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.SingleCluster, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this SingleCluster to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a PartialSingleCluster. */
                interface IPartialSingleCluster {

                    /** PartialSingleCluster name */
                    name?: (string|null);

                    /** PartialSingleCluster clusterPercentage */
                    clusterPercentage?: (clutch.chaos.serverexperimentation.v1.IClusterPercentage|null);
                }

                /** Represents a PartialSingleCluster. */
                class PartialSingleCluster implements IPartialSingleCluster {

                    /**
                     * Constructs a new PartialSingleCluster.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.IPartialSingleCluster);

                    /** PartialSingleCluster name. */
                    public name: string;

                    /** PartialSingleCluster clusterPercentage. */
                    public clusterPercentage?: (clutch.chaos.serverexperimentation.v1.IClusterPercentage|null);

                    /**
                     * Verifies a PartialSingleCluster message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a PartialSingleCluster message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns PartialSingleCluster
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.PartialSingleCluster;

                    /**
                     * Creates a plain object from a PartialSingleCluster message. Also converts values to other types if specified.
                     * @param message PartialSingleCluster
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.PartialSingleCluster, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this PartialSingleCluster to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a ClusterPercentage. */
                interface IClusterPercentage {

                    /** ClusterPercentage percentage */
                    percentage?: (number|null);
                }

                /** Represents a ClusterPercentage. */
                class ClusterPercentage implements IClusterPercentage {

                    /**
                     * Constructs a new ClusterPercentage.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.IClusterPercentage);

                    /** ClusterPercentage percentage. */
                    public percentage: number;

                    /**
                     * Verifies a ClusterPercentage message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ClusterPercentage message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ClusterPercentage
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.ClusterPercentage;

                    /**
                     * Creates a plain object from a ClusterPercentage message. Also converts values to other types if specified.
                     * @param message ClusterPercentage
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.ClusterPercentage, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ClusterPercentage to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a FaultPercentage. */
                interface IFaultPercentage {

                    /** FaultPercentage percentage */
                    percentage?: (number|null);
                }

                /** Represents a FaultPercentage. */
                class FaultPercentage implements IFaultPercentage {

                    /**
                     * Constructs a new FaultPercentage.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.IFaultPercentage);

                    /** FaultPercentage percentage. */
                    public percentage: number;

                    /**
                     * Verifies a FaultPercentage message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a FaultPercentage message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns FaultPercentage
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.FaultPercentage;

                    /**
                     * Creates a plain object from a FaultPercentage message. Also converts values to other types if specified.
                     * @param message FaultPercentage
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.FaultPercentage, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this FaultPercentage to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a FaultAbortStatus. */
                interface IFaultAbortStatus {

                    /** FaultAbortStatus httpStatusCode */
                    httpStatusCode?: (number|null);
                }

                /** Represents a FaultAbortStatus. */
                class FaultAbortStatus implements IFaultAbortStatus {

                    /**
                     * Constructs a new FaultAbortStatus.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.IFaultAbortStatus);

                    /** FaultAbortStatus httpStatusCode. */
                    public httpStatusCode: number;

                    /**
                     * Verifies a FaultAbortStatus message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a FaultAbortStatus message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns FaultAbortStatus
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.FaultAbortStatus;

                    /**
                     * Creates a plain object from a FaultAbortStatus message. Also converts values to other types if specified.
                     * @param message FaultAbortStatus
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.FaultAbortStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this FaultAbortStatus to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a FaultLatencyDuration. */
                interface IFaultLatencyDuration {

                    /** FaultLatencyDuration fixedDurationMs */
                    fixedDurationMs?: (number|null);
                }

                /** Represents a FaultLatencyDuration. */
                class FaultLatencyDuration implements IFaultLatencyDuration {

                    /**
                     * Constructs a new FaultLatencyDuration.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.chaos.serverexperimentation.v1.IFaultLatencyDuration);

                    /** FaultLatencyDuration fixedDurationMs. */
                    public fixedDurationMs: number;

                    /**
                     * Verifies a FaultLatencyDuration message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a FaultLatencyDuration message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns FaultLatencyDuration
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.chaos.serverexperimentation.v1.FaultLatencyDuration;

                    /**
                     * Creates a plain object from a FaultLatencyDuration message. Also converts values to other types if specified.
                     * @param message FaultLatencyDuration
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.chaos.serverexperimentation.v1.FaultLatencyDuration, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this FaultLatencyDuration to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }
    }

    /** Namespace config. */
    namespace config {

        /** Namespace gateway. */
        namespace gateway {

            /** Namespace v1. */
            namespace v1 {

                /** Properties of a Config. */
                interface IConfig {

                    /** Config gateway */
                    gateway?: (clutch.config.gateway.v1.IGatewayOptions|null);

                    /** Config services */
                    services?: (clutch.config.gateway.v1.IService[]|null);

                    /** Config resolvers */
                    resolvers?: (clutch.config.gateway.v1.IResolver[]|null);

                    /** Config modules */
                    modules?: (clutch.config.gateway.v1.IModule[]|null);
                }

                /** Represents a Config. */
                class Config implements IConfig {

                    /**
                     * Constructs a new Config.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.config.gateway.v1.IConfig);

                    /** Config gateway. */
                    public gateway?: (clutch.config.gateway.v1.IGatewayOptions|null);

                    /** Config services. */
                    public services: clutch.config.gateway.v1.IService[];

                    /** Config resolvers. */
                    public resolvers: clutch.config.gateway.v1.IResolver[];

                    /** Config modules. */
                    public modules: clutch.config.gateway.v1.IModule[];

                    /**
                     * Verifies a Config message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Config message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Config
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Config;

                    /**
                     * Creates a plain object from a Config message. Also converts values to other types if specified.
                     * @param message Config
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.config.gateway.v1.Config, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Config to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a TCPSocket. */
                interface ITCPSocket {

                    /** TCPSocket address */
                    address?: (string|null);

                    /** TCPSocket port */
                    port?: (number|null);

                    /** TCPSocket secure */
                    secure?: (boolean|null);
                }

                /** Represents a TCPSocket. */
                class TCPSocket implements ITCPSocket {

                    /**
                     * Constructs a new TCPSocket.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.config.gateway.v1.ITCPSocket);

                    /** TCPSocket address. */
                    public address: string;

                    /** TCPSocket port. */
                    public port: number;

                    /** TCPSocket secure. */
                    public secure: boolean;

                    /**
                     * Verifies a TCPSocket message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TCPSocket message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TCPSocket
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.TCPSocket;

                    /**
                     * Creates a plain object from a TCPSocket message. Also converts values to other types if specified.
                     * @param message TCPSocket
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.config.gateway.v1.TCPSocket, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TCPSocket to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Listener. */
                interface IListener {

                    /** Listener tcp */
                    tcp?: (clutch.config.gateway.v1.ITCPSocket|null);
                }

                /** Represents a Listener. */
                class Listener implements IListener {

                    /**
                     * Constructs a new Listener.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.config.gateway.v1.IListener);

                    /** Listener tcp. */
                    public tcp?: (clutch.config.gateway.v1.ITCPSocket|null);

                    /** Listener socket. */
                    public socket?: "tcp";

                    /**
                     * Verifies a Listener message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Listener message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Listener
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Listener;

                    /**
                     * Creates a plain object from a Listener message. Also converts values to other types if specified.
                     * @param message Listener
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.config.gateway.v1.Listener, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Listener to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Stats. */
                interface IStats {

                    /** Stats flushInterval */
                    flushInterval?: (google.protobuf.IDuration|null);

                    /** Stats logReporter */
                    logReporter?: (clutch.config.gateway.v1.Stats.ILogReporter|null);

                    /** Stats statsdReporter */
                    statsdReporter?: (clutch.config.gateway.v1.Stats.IStatsdReporter|null);

                    /** Stats goRuntimeStats */
                    goRuntimeStats?: (clutch.config.gateway.v1.Stats.IGoRuntimeStats|null);
                }

                /** Represents a Stats. */
                class Stats implements IStats {

                    /**
                     * Constructs a new Stats.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.config.gateway.v1.IStats);

                    /** Stats flushInterval. */
                    public flushInterval?: (google.protobuf.IDuration|null);

                    /** Stats logReporter. */
                    public logReporter?: (clutch.config.gateway.v1.Stats.ILogReporter|null);

                    /** Stats statsdReporter. */
                    public statsdReporter?: (clutch.config.gateway.v1.Stats.IStatsdReporter|null);

                    /** Stats goRuntimeStats. */
                    public goRuntimeStats?: (clutch.config.gateway.v1.Stats.IGoRuntimeStats|null);

                    /** Stats reporter. */
                    public reporter?: ("logReporter"|"statsdReporter");

                    /**
                     * Verifies a Stats message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Stats message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Stats
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Stats;

                    /**
                     * Creates a plain object from a Stats message. Also converts values to other types if specified.
                     * @param message Stats
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.config.gateway.v1.Stats, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Stats to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Stats {

                    /** Properties of a LogReporter. */
                    interface ILogReporter {
                    }

                    /** Represents a LogReporter. */
                    class LogReporter implements ILogReporter {

                        /**
                         * Constructs a new LogReporter.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.gateway.v1.Stats.ILogReporter);

                        /**
                         * Verifies a LogReporter message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a LogReporter message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns LogReporter
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Stats.LogReporter;

                        /**
                         * Creates a plain object from a LogReporter message. Also converts values to other types if specified.
                         * @param message LogReporter
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.gateway.v1.Stats.LogReporter, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this LogReporter to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a StatsdReporter. */
                    interface IStatsdReporter {

                        /** StatsdReporter address */
                        address?: (string|null);

                        /** StatsdReporter pointTags */
                        pointTags?: (clutch.config.gateway.v1.Stats.StatsdReporter.IPointTags|null);
                    }

                    /** Represents a StatsdReporter. */
                    class StatsdReporter implements IStatsdReporter {

                        /**
                         * Constructs a new StatsdReporter.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.gateway.v1.Stats.IStatsdReporter);

                        /** StatsdReporter address. */
                        public address: string;

                        /** StatsdReporter pointTags. */
                        public pointTags?: (clutch.config.gateway.v1.Stats.StatsdReporter.IPointTags|null);

                        /** StatsdReporter tagMode. */
                        public tagMode?: "pointTags";

                        /**
                         * Verifies a StatsdReporter message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a StatsdReporter message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns StatsdReporter
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Stats.StatsdReporter;

                        /**
                         * Creates a plain object from a StatsdReporter message. Also converts values to other types if specified.
                         * @param message StatsdReporter
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.gateway.v1.Stats.StatsdReporter, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this StatsdReporter to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace StatsdReporter {

                        /** Properties of a PointTags. */
                        interface IPointTags {

                            /** PointTags separator */
                            separator?: (string|null);
                        }

                        /** Represents a PointTags. */
                        class PointTags implements IPointTags {

                            /**
                             * Constructs a new PointTags.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: clutch.config.gateway.v1.Stats.StatsdReporter.IPointTags);

                            /** PointTags separator. */
                            public separator: string;

                            /**
                             * Verifies a PointTags message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a PointTags message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns PointTags
                             */
                            public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Stats.StatsdReporter.PointTags;

                            /**
                             * Creates a plain object from a PointTags message. Also converts values to other types if specified.
                             * @param message PointTags
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: clutch.config.gateway.v1.Stats.StatsdReporter.PointTags, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this PointTags to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }
                    }

                    /** Properties of a GoRuntimeStats. */
                    interface IGoRuntimeStats {

                        /** GoRuntimeStats collectionInterval */
                        collectionInterval?: (google.protobuf.IDuration|null);
                    }

                    /** Represents a GoRuntimeStats. */
                    class GoRuntimeStats implements IGoRuntimeStats {

                        /**
                         * Constructs a new GoRuntimeStats.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.gateway.v1.Stats.IGoRuntimeStats);

                        /** GoRuntimeStats collectionInterval. */
                        public collectionInterval?: (google.protobuf.IDuration|null);

                        /**
                         * Verifies a GoRuntimeStats message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a GoRuntimeStats message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns GoRuntimeStats
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Stats.GoRuntimeStats;

                        /**
                         * Creates a plain object from a GoRuntimeStats message. Also converts values to other types if specified.
                         * @param message GoRuntimeStats
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.gateway.v1.Stats.GoRuntimeStats, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this GoRuntimeStats to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }

                /** Properties of a Timeouts. */
                interface ITimeouts {

                    /** Timeouts default */
                    "default"?: (google.protobuf.IDuration|null);

                    /** Timeouts overrides */
                    overrides?: (clutch.config.gateway.v1.Timeouts.IEntry[]|null);
                }

                /** Represents a Timeouts. */
                class Timeouts implements ITimeouts {

                    /**
                     * Constructs a new Timeouts.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.config.gateway.v1.ITimeouts);

                    /** Timeouts default. */
                    public default?: (google.protobuf.IDuration|null);

                    /** Timeouts overrides. */
                    public overrides: clutch.config.gateway.v1.Timeouts.IEntry[];

                    /**
                     * Verifies a Timeouts message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Timeouts message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Timeouts
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Timeouts;

                    /**
                     * Creates a plain object from a Timeouts message. Also converts values to other types if specified.
                     * @param message Timeouts
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.config.gateway.v1.Timeouts, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Timeouts to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Timeouts {

                    /** Properties of an Entry. */
                    interface IEntry {

                        /** Entry service */
                        service?: (string|null);

                        /** Entry method */
                        method?: (string|null);

                        /** Entry timeout */
                        timeout?: (google.protobuf.IDuration|null);
                    }

                    /** Represents an Entry. */
                    class Entry implements IEntry {

                        /**
                         * Constructs a new Entry.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.gateway.v1.Timeouts.IEntry);

                        /** Entry service. */
                        public service: string;

                        /** Entry method. */
                        public method: string;

                        /** Entry timeout. */
                        public timeout?: (google.protobuf.IDuration|null);

                        /**
                         * Verifies an Entry message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Entry message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Entry
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Timeouts.Entry;

                        /**
                         * Creates a plain object from an Entry message. Also converts values to other types if specified.
                         * @param message Entry
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.gateway.v1.Timeouts.Entry, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Entry to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }

                /** Properties of a GatewayOptions. */
                interface IGatewayOptions {

                    /** GatewayOptions listener */
                    listener?: (clutch.config.gateway.v1.IListener|null);

                    /** GatewayOptions jsonGrpcLoopbackListener */
                    jsonGrpcLoopbackListener?: (clutch.config.gateway.v1.IListener|null);

                    /** GatewayOptions logger */
                    logger?: (clutch.config.gateway.v1.ILogger|null);

                    /** GatewayOptions stats */
                    stats?: (clutch.config.gateway.v1.IStats|null);

                    /** GatewayOptions timeouts */
                    timeouts?: (clutch.config.gateway.v1.ITimeouts|null);

                    /** GatewayOptions middleware */
                    middleware?: (clutch.config.gateway.v1.IMiddleware[]|null);

                    /** GatewayOptions assets */
                    assets?: (clutch.config.gateway.v1.IAssets|null);

                    /** GatewayOptions enablePprof */
                    enablePprof?: (boolean|null);

                    /** GatewayOptions accesslog */
                    accesslog?: (clutch.config.middleware.accesslog.v1.IConfig|null);
                }

                /** Represents a GatewayOptions. */
                class GatewayOptions implements IGatewayOptions {

                    /**
                     * Constructs a new GatewayOptions.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.config.gateway.v1.IGatewayOptions);

                    /** GatewayOptions listener. */
                    public listener?: (clutch.config.gateway.v1.IListener|null);

                    /** GatewayOptions jsonGrpcLoopbackListener. */
                    public jsonGrpcLoopbackListener?: (clutch.config.gateway.v1.IListener|null);

                    /** GatewayOptions logger. */
                    public logger?: (clutch.config.gateway.v1.ILogger|null);

                    /** GatewayOptions stats. */
                    public stats?: (clutch.config.gateway.v1.IStats|null);

                    /** GatewayOptions timeouts. */
                    public timeouts?: (clutch.config.gateway.v1.ITimeouts|null);

                    /** GatewayOptions middleware. */
                    public middleware: clutch.config.gateway.v1.IMiddleware[];

                    /** GatewayOptions assets. */
                    public assets?: (clutch.config.gateway.v1.IAssets|null);

                    /** GatewayOptions enablePprof. */
                    public enablePprof: boolean;

                    /** GatewayOptions accesslog. */
                    public accesslog?: (clutch.config.middleware.accesslog.v1.IConfig|null);

                    /**
                     * Verifies a GatewayOptions message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GatewayOptions message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GatewayOptions
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.GatewayOptions;

                    /**
                     * Creates a plain object from a GatewayOptions message. Also converts values to other types if specified.
                     * @param message GatewayOptions
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.config.gateway.v1.GatewayOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GatewayOptions to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an Assets. */
                interface IAssets {

                    /** Assets s3 */
                    s3?: (clutch.config.gateway.v1.Assets.IS3Provider|null);
                }

                /** Represents an Assets. */
                class Assets implements IAssets {

                    /**
                     * Constructs a new Assets.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.config.gateway.v1.IAssets);

                    /** Assets s3. */
                    public s3?: (clutch.config.gateway.v1.Assets.IS3Provider|null);

                    /** Assets provider. */
                    public provider?: "s3";

                    /**
                     * Verifies an Assets message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Assets message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Assets
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Assets;

                    /**
                     * Creates a plain object from an Assets message. Also converts values to other types if specified.
                     * @param message Assets
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.config.gateway.v1.Assets, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Assets to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Assets {

                    /** Properties of a S3Provider. */
                    interface IS3Provider {

                        /** S3Provider region */
                        region?: (string|null);

                        /** S3Provider bucket */
                        bucket?: (string|null);

                        /** S3Provider key */
                        key?: (string|null);
                    }

                    /** Represents a S3Provider. */
                    class S3Provider implements IS3Provider {

                        /**
                         * Constructs a new S3Provider.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.gateway.v1.Assets.IS3Provider);

                        /** S3Provider region. */
                        public region: string;

                        /** S3Provider bucket. */
                        public bucket: string;

                        /** S3Provider key. */
                        public key: string;

                        /**
                         * Verifies a S3Provider message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a S3Provider message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns S3Provider
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Assets.S3Provider;

                        /**
                         * Creates a plain object from a S3Provider message. Also converts values to other types if specified.
                         * @param message S3Provider
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.gateway.v1.Assets.S3Provider, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this S3Provider to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }

                /** Properties of a Logger. */
                interface ILogger {

                    /** Logger level */
                    level?: (clutch.config.gateway.v1.Logger.Level|null);

                    /** Logger pretty */
                    pretty?: (boolean|null);
                }

                /** Represents a Logger. */
                class Logger implements ILogger {

                    /**
                     * Constructs a new Logger.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.config.gateway.v1.ILogger);

                    /** Logger level. */
                    public level: clutch.config.gateway.v1.Logger.Level;

                    /** Logger pretty. */
                    public pretty: boolean;

                    /** Logger format. */
                    public format?: "pretty";

                    /**
                     * Verifies a Logger message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Logger message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Logger
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Logger;

                    /**
                     * Creates a plain object from a Logger message. Also converts values to other types if specified.
                     * @param message Logger
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.config.gateway.v1.Logger, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Logger to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Logger {

                    /** Level enum. */
                    enum Level {
                        UNSPECIFIED = 0,
                        DEBUG = 1,
                        INFO = 2,
                        WARN = 3,
                        ERROR = 4,
                        PANIC = 5,
                        FATAL = 6
                    }
                }

                /** Properties of a Middleware. */
                interface IMiddleware {

                    /** Middleware name */
                    name?: (string|null);

                    /** Middleware typedConfig */
                    typedConfig?: (google.protobuf.IAny|null);
                }

                /** Represents a Middleware. */
                class Middleware implements IMiddleware {

                    /**
                     * Constructs a new Middleware.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.config.gateway.v1.IMiddleware);

                    /** Middleware name. */
                    public name: string;

                    /** Middleware typedConfig. */
                    public typedConfig?: (google.protobuf.IAny|null);

                    /**
                     * Verifies a Middleware message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Middleware message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Middleware
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Middleware;

                    /**
                     * Creates a plain object from a Middleware message. Also converts values to other types if specified.
                     * @param message Middleware
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.config.gateway.v1.Middleware, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Middleware to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Service. */
                interface IService {

                    /** Service name */
                    name?: (string|null);

                    /** Service typedConfig */
                    typedConfig?: (google.protobuf.IAny|null);
                }

                /** Represents a Service. */
                class Service implements IService {

                    /**
                     * Constructs a new Service.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.config.gateway.v1.IService);

                    /** Service name. */
                    public name: string;

                    /** Service typedConfig. */
                    public typedConfig?: (google.protobuf.IAny|null);

                    /**
                     * Verifies a Service message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Service message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Service
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Service;

                    /**
                     * Creates a plain object from a Service message. Also converts values to other types if specified.
                     * @param message Service
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.config.gateway.v1.Service, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Service to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Resolver. */
                interface IResolver {

                    /** Resolver name */
                    name?: (string|null);

                    /** Resolver typedConfig */
                    typedConfig?: (google.protobuf.IAny|null);
                }

                /** Represents a Resolver. */
                class Resolver implements IResolver {

                    /**
                     * Constructs a new Resolver.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.config.gateway.v1.IResolver);

                    /** Resolver name. */
                    public name: string;

                    /** Resolver typedConfig. */
                    public typedConfig?: (google.protobuf.IAny|null);

                    /**
                     * Verifies a Resolver message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Resolver message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Resolver
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Resolver;

                    /**
                     * Creates a plain object from a Resolver message. Also converts values to other types if specified.
                     * @param message Resolver
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.config.gateway.v1.Resolver, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Resolver to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Module. */
                interface IModule {

                    /** Module name */
                    name?: (string|null);

                    /** Module typedConfig */
                    typedConfig?: (google.protobuf.IAny|null);
                }

                /** Represents a Module. */
                class Module implements IModule {

                    /**
                     * Constructs a new Module.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.config.gateway.v1.IModule);

                    /** Module name. */
                    public name: string;

                    /** Module typedConfig. */
                    public typedConfig?: (google.protobuf.IAny|null);

                    /**
                     * Verifies a Module message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Module message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Module
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.config.gateway.v1.Module;

                    /**
                     * Creates a plain object from a Module message. Also converts values to other types if specified.
                     * @param message Module
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.config.gateway.v1.Module, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Module to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }

        /** Namespace middleware. */
        namespace middleware {

            /** Namespace accesslog. */
            namespace accesslog {

                /** Namespace v1. */
                namespace v1 {

                    /** Properties of a Config. */
                    interface IConfig {

                        /** Config statusCodeFilters */
                        statusCodeFilters?: (clutch.config.middleware.accesslog.v1.Config.IStatusCodeFilter[]|null);
                    }

                    /** Represents a Config. */
                    class Config implements IConfig {

                        /**
                         * Constructs a new Config.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.middleware.accesslog.v1.IConfig);

                        /** Config statusCodeFilters. */
                        public statusCodeFilters: clutch.config.middleware.accesslog.v1.Config.IStatusCodeFilter[];

                        /**
                         * Verifies a Config message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Config
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.middleware.accesslog.v1.Config;

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @param message Config
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.middleware.accesslog.v1.Config, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Config to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Config {

                        /** Properties of a StatusCodeFilter. */
                        interface IStatusCodeFilter {

                            /** StatusCodeFilter equals */
                            equals?: (number|null);
                        }

                        /** Represents a StatusCodeFilter. */
                        class StatusCodeFilter implements IStatusCodeFilter {

                            /**
                             * Constructs a new StatusCodeFilter.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: clutch.config.middleware.accesslog.v1.Config.IStatusCodeFilter);

                            /** StatusCodeFilter equals. */
                            public equals: number;

                            /** StatusCodeFilter filterType. */
                            public filterType?: "equals";

                            /**
                             * Verifies a StatusCodeFilter message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a StatusCodeFilter message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns StatusCodeFilter
                             */
                            public static fromObject(object: { [k: string]: any }): clutch.config.middleware.accesslog.v1.Config.StatusCodeFilter;

                            /**
                             * Creates a plain object from a StatusCodeFilter message. Also converts values to other types if specified.
                             * @param message StatusCodeFilter
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: clutch.config.middleware.accesslog.v1.Config.StatusCodeFilter, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this StatusCodeFilter to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }
                    }
                }
            }
        }

        /** Namespace module. */
        namespace module {

            /** Namespace chaos. */
            namespace chaos {

                /** Namespace experimentation. */
                namespace experimentation {

                    /** Namespace rtds. */
                    namespace rtds {

                        /** Namespace v1. */
                        namespace v1 {

                            /** Properties of a Config. */
                            interface IConfig {

                                /** Config rtdsLayerName */
                                rtdsLayerName?: (string|null);

                                /** Config cacheRefreshInterval */
                                cacheRefreshInterval?: (google.protobuf.IDuration|null);

                                /** Config ingressFaultRuntimePrefix */
                                ingressFaultRuntimePrefix?: (string|null);

                                /** Config egressFaultRuntimePrefix */
                                egressFaultRuntimePrefix?: (string|null);
                            }

                            /** Represents a Config. */
                            class Config implements IConfig {

                                /**
                                 * Constructs a new Config.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: clutch.config.module.chaos.experimentation.rtds.v1.IConfig);

                                /** Config rtdsLayerName. */
                                public rtdsLayerName: string;

                                /** Config cacheRefreshInterval. */
                                public cacheRefreshInterval?: (google.protobuf.IDuration|null);

                                /** Config ingressFaultRuntimePrefix. */
                                public ingressFaultRuntimePrefix: string;

                                /** Config egressFaultRuntimePrefix. */
                                public egressFaultRuntimePrefix: string;

                                /**
                                 * Verifies a Config message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates a Config message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Config
                                 */
                                public static fromObject(object: { [k: string]: any }): clutch.config.module.chaos.experimentation.rtds.v1.Config;

                                /**
                                 * Creates a plain object from a Config message. Also converts values to other types if specified.
                                 * @param message Config
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: clutch.config.module.chaos.experimentation.rtds.v1.Config, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Config to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }
                        }
                    }
                }
            }
        }

        /** Namespace service. */
        namespace service {

            /** Namespace auditsink. */
            namespace auditsink {

                /** Namespace slack. */
                namespace slack {

                    /** Namespace v1. */
                    namespace v1 {

                        /** Properties of a SlackConfig. */
                        interface ISlackConfig {

                            /** SlackConfig token */
                            token?: (string|null);

                            /** SlackConfig channel */
                            channel?: (string|null);

                            /** SlackConfig filter */
                            filter?: (clutch.config.service.audit.v1.IFilter|null);
                        }

                        /** Represents a SlackConfig. */
                        class SlackConfig implements ISlackConfig {

                            /**
                             * Constructs a new SlackConfig.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: clutch.config.service.auditsink.slack.v1.ISlackConfig);

                            /** SlackConfig token. */
                            public token: string;

                            /** SlackConfig channel. */
                            public channel: string;

                            /** SlackConfig filter. */
                            public filter?: (clutch.config.service.audit.v1.IFilter|null);

                            /**
                             * Verifies a SlackConfig message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a SlackConfig message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns SlackConfig
                             */
                            public static fromObject(object: { [k: string]: any }): clutch.config.service.auditsink.slack.v1.SlackConfig;

                            /**
                             * Creates a plain object from a SlackConfig message. Also converts values to other types if specified.
                             * @param message SlackConfig
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: clutch.config.service.auditsink.slack.v1.SlackConfig, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this SlackConfig to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }
                    }
                }
            }

            /** Namespace audit. */
            namespace audit {

                /** Namespace v1. */
                namespace v1 {

                    /** Properties of an EventFilter. */
                    interface IEventFilter {

                        /** EventFilter field */
                        field?: (clutch.config.service.audit.v1.EventFilter.FilterType|null);

                        /** EventFilter text */
                        text?: (string|null);
                    }

                    /** Represents an EventFilter. */
                    class EventFilter implements IEventFilter {

                        /**
                         * Constructs a new EventFilter.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.audit.v1.IEventFilter);

                        /** EventFilter field. */
                        public field: clutch.config.service.audit.v1.EventFilter.FilterType;

                        /** EventFilter text. */
                        public text: string;

                        /** EventFilter value. */
                        public value?: "text";

                        /**
                         * Verifies an EventFilter message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an EventFilter message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns EventFilter
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.audit.v1.EventFilter;

                        /**
                         * Creates a plain object from an EventFilter message. Also converts values to other types if specified.
                         * @param message EventFilter
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.audit.v1.EventFilter, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this EventFilter to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace EventFilter {

                        /** FilterType enum. */
                        enum FilterType {
                            UNSPECIFIED = 0,
                            SERVICE = 1,
                            METHOD = 2,
                            TYPE = 3
                        }
                    }

                    /** Properties of a Filter. */
                    interface IFilter {

                        /** Filter denylist */
                        denylist?: (boolean|null);

                        /** Filter rules */
                        rules?: (clutch.config.service.audit.v1.IEventFilter[]|null);
                    }

                    /** Represents a Filter. */
                    class Filter implements IFilter {

                        /**
                         * Constructs a new Filter.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.audit.v1.IFilter);

                        /** Filter denylist. */
                        public denylist: boolean;

                        /** Filter rules. */
                        public rules: clutch.config.service.audit.v1.IEventFilter[];

                        /**
                         * Verifies a Filter message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Filter message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Filter
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.audit.v1.Filter;

                        /**
                         * Creates a plain object from a Filter message. Also converts values to other types if specified.
                         * @param message Filter
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.audit.v1.Filter, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Filter to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a SinkConfig. */
                    interface ISinkConfig {

                        /** SinkConfig filter */
                        filter?: (clutch.config.service.audit.v1.IFilter|null);
                    }

                    /** Represents a SinkConfig. */
                    class SinkConfig implements ISinkConfig {

                        /**
                         * Constructs a new SinkConfig.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.audit.v1.ISinkConfig);

                        /** SinkConfig filter. */
                        public filter?: (clutch.config.service.audit.v1.IFilter|null);

                        /**
                         * Verifies a SinkConfig message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a SinkConfig message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns SinkConfig
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.audit.v1.SinkConfig;

                        /**
                         * Creates a plain object from a SinkConfig message. Also converts values to other types if specified.
                         * @param message SinkConfig
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.audit.v1.SinkConfig, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this SinkConfig to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Config. */
                    interface IConfig {

                        /** Config dbProvider */
                        dbProvider?: (string|null);

                        /** Config inMemory */
                        inMemory?: (boolean|null);

                        /** Config filter */
                        filter?: (clutch.config.service.audit.v1.IFilter|null);

                        /** Config sinks */
                        sinks?: (string[]|null);
                    }

                    /** Represents a Config. */
                    class Config implements IConfig {

                        /**
                         * Constructs a new Config.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.audit.v1.IConfig);

                        /** Config dbProvider. */
                        public dbProvider: string;

                        /** Config inMemory. */
                        public inMemory: boolean;

                        /** Config filter. */
                        public filter?: (clutch.config.service.audit.v1.IFilter|null);

                        /** Config sinks. */
                        public sinks: string[];

                        /** Config storageProvider. */
                        public storageProvider?: ("dbProvider"|"inMemory");

                        /**
                         * Verifies a Config message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Config
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.audit.v1.Config;

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @param message Config
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.audit.v1.Config, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Config to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }
            }

            /** Namespace authn. */
            namespace authn {

                /** Namespace v1. */
                namespace v1 {

                    /** Properties of a OIDC. */
                    interface IOIDC {

                        /** OIDC issuer */
                        issuer?: (string|null);

                        /** OIDC clientId */
                        clientId?: (string|null);

                        /** OIDC clientSecret */
                        clientSecret?: (string|null);

                        /** OIDC redirectUrl */
                        redirectUrl?: (string|null);
                    }

                    /** Represents a OIDC. */
                    class OIDC implements IOIDC {

                        /**
                         * Constructs a new OIDC.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.authn.v1.IOIDC);

                        /** OIDC issuer. */
                        public issuer: string;

                        /** OIDC clientId. */
                        public clientId: string;

                        /** OIDC clientSecret. */
                        public clientSecret: string;

                        /** OIDC redirectUrl. */
                        public redirectUrl: string;

                        /**
                         * Verifies a OIDC message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a OIDC message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns OIDC
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.authn.v1.OIDC;

                        /**
                         * Creates a plain object from a OIDC message. Also converts values to other types if specified.
                         * @param message OIDC
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.authn.v1.OIDC, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this OIDC to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Storage. */
                    interface IStorage {

                        /** Storage encryptionPassphrase */
                        encryptionPassphrase?: (string|null);
                    }

                    /** Represents a Storage. */
                    class Storage implements IStorage {

                        /**
                         * Constructs a new Storage.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.authn.v1.IStorage);

                        /** Storage encryptionPassphrase. */
                        public encryptionPassphrase: string;

                        /**
                         * Verifies a Storage message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Storage message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Storage
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.authn.v1.Storage;

                        /**
                         * Creates a plain object from a Storage message. Also converts values to other types if specified.
                         * @param message Storage
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.authn.v1.Storage, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Storage to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Config. */
                    interface IConfig {

                        /** Config sessionSecret */
                        sessionSecret?: (string|null);

                        /** Config oidc */
                        oidc?: (clutch.config.service.authn.v1.IOIDC|null);

                        /** Config storage */
                        storage?: (clutch.config.service.authn.v1.IStorage|null);
                    }

                    /** Represents a Config. */
                    class Config implements IConfig {

                        /**
                         * Constructs a new Config.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.authn.v1.IConfig);

                        /** Config sessionSecret. */
                        public sessionSecret: string;

                        /** Config oidc. */
                        public oidc?: (clutch.config.service.authn.v1.IOIDC|null);

                        /** Config storage. */
                        public storage?: (clutch.config.service.authn.v1.IStorage|null);

                        /** Config type. */
                        public type?: "oidc";

                        /**
                         * Verifies a Config message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Config
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.authn.v1.Config;

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @param message Config
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.authn.v1.Config, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Config to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }
            }

            /** Namespace authz. */
            namespace authz {

                /** Namespace v1. */
                namespace v1 {

                    /** Properties of a Principal. */
                    interface IPrincipal {

                        /** Principal user */
                        user?: (string|null);

                        /** Principal group */
                        group?: (string|null);
                    }

                    /** Represents a Principal. */
                    class Principal implements IPrincipal {

                        /**
                         * Constructs a new Principal.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.authz.v1.IPrincipal);

                        /** Principal user. */
                        public user: string;

                        /** Principal group. */
                        public group: string;

                        /** Principal type. */
                        public type?: ("user"|"group");

                        /**
                         * Verifies a Principal message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Principal message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Principal
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.authz.v1.Principal;

                        /**
                         * Creates a plain object from a Principal message. Also converts values to other types if specified.
                         * @param message Principal
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.authz.v1.Principal, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Principal to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a RoleBinding. */
                    interface IRoleBinding {

                        /** RoleBinding to */
                        to?: (string[]|null);

                        /** RoleBinding principals */
                        principals?: (clutch.config.service.authz.v1.IPrincipal[]|null);
                    }

                    /** Represents a RoleBinding. */
                    class RoleBinding implements IRoleBinding {

                        /**
                         * Constructs a new RoleBinding.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.authz.v1.IRoleBinding);

                        /** RoleBinding to. */
                        public to: string[];

                        /** RoleBinding principals. */
                        public principals: clutch.config.service.authz.v1.IPrincipal[];

                        /**
                         * Verifies a RoleBinding message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a RoleBinding message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns RoleBinding
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.authz.v1.RoleBinding;

                        /**
                         * Creates a plain object from a RoleBinding message. Also converts values to other types if specified.
                         * @param message RoleBinding
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.authz.v1.RoleBinding, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this RoleBinding to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Policy. */
                    interface IPolicy {

                        /** Policy policyName */
                        policyName?: (string|null);

                        /** Policy actionTypes */
                        actionTypes?: (clutch.api.v1.ActionType[]|null);

                        /** Policy method */
                        method?: (string|null);

                        /** Policy resources */
                        resources?: (string[]|null);
                    }

                    /** Represents a Policy. */
                    class Policy implements IPolicy {

                        /**
                         * Constructs a new Policy.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.authz.v1.IPolicy);

                        /** Policy policyName. */
                        public policyName: string;

                        /** Policy actionTypes. */
                        public actionTypes: clutch.api.v1.ActionType[];

                        /** Policy method. */
                        public method: string;

                        /** Policy resources. */
                        public resources: string[];

                        /**
                         * Verifies a Policy message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Policy message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Policy
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.authz.v1.Policy;

                        /**
                         * Creates a plain object from a Policy message. Also converts values to other types if specified.
                         * @param message Policy
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.authz.v1.Policy, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Policy to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Role. */
                    interface IRole {

                        /** Role roleName */
                        roleName?: (string|null);

                        /** Role policies */
                        policies?: (clutch.config.service.authz.v1.IPolicy[]|null);
                    }

                    /** Represents a Role. */
                    class Role implements IRole {

                        /**
                         * Constructs a new Role.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.authz.v1.IRole);

                        /** Role roleName. */
                        public roleName: string;

                        /** Role policies. */
                        public policies: clutch.config.service.authz.v1.IPolicy[];

                        /**
                         * Verifies a Role message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Role message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Role
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.authz.v1.Role;

                        /**
                         * Creates a plain object from a Role message. Also converts values to other types if specified.
                         * @param message Role
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.authz.v1.Role, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Role to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Config. */
                    interface IConfig {

                        /** Config roleBindings */
                        roleBindings?: (clutch.config.service.authz.v1.IRoleBinding[]|null);

                        /** Config roles */
                        roles?: (clutch.config.service.authz.v1.IRole[]|null);
                    }

                    /** Represents a Config. */
                    class Config implements IConfig {

                        /**
                         * Constructs a new Config.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.authz.v1.IConfig);

                        /** Config roleBindings. */
                        public roleBindings: clutch.config.service.authz.v1.IRoleBinding[];

                        /** Config roles. */
                        public roles: clutch.config.service.authz.v1.IRole[];

                        /**
                         * Verifies a Config message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Config
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.authz.v1.Config;

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @param message Config
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.authz.v1.Config, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Config to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }
            }

            /** Namespace aws. */
            namespace aws {

                /** Namespace v1. */
                namespace v1 {

                    /** Properties of a Config. */
                    interface IConfig {

                        /** Config regions */
                        regions?: (string[]|null);

                        /** Config clientConfig */
                        clientConfig?: (clutch.config.service.aws.v1.IClientConfig|null);
                    }

                    /** Represents a Config. */
                    class Config implements IConfig {

                        /**
                         * Constructs a new Config.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.aws.v1.IConfig);

                        /** Config regions. */
                        public regions: string[];

                        /** Config clientConfig. */
                        public clientConfig?: (clutch.config.service.aws.v1.IClientConfig|null);

                        /**
                         * Verifies a Config message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Config
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.aws.v1.Config;

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @param message Config
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.aws.v1.Config, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Config to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a ClientConfig. */
                    interface IClientConfig {

                        /** ClientConfig retries */
                        retries?: (number|null);
                    }

                    /** Represents a ClientConfig. */
                    class ClientConfig implements IClientConfig {

                        /**
                         * Constructs a new ClientConfig.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.aws.v1.IClientConfig);

                        /** ClientConfig retries. */
                        public retries: number;

                        /**
                         * Verifies a ClientConfig message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a ClientConfig message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns ClientConfig
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.aws.v1.ClientConfig;

                        /**
                         * Creates a plain object from a ClientConfig message. Also converts values to other types if specified.
                         * @param message ClientConfig
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.aws.v1.ClientConfig, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this ClientConfig to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }
            }

            /** Namespace db. */
            namespace db {

                /** Namespace postgres. */
                namespace postgres {

                    /** Namespace v1. */
                    namespace v1 {

                        /** Properties of a Connection. */
                        interface IConnection {

                            /** Connection host */
                            host?: (string|null);

                            /** Connection port */
                            port?: (number|null);

                            /** Connection user */
                            user?: (string|null);

                            /** Connection dbname */
                            dbname?: (string|null);

                            /** Connection sslMode */
                            sslMode?: (clutch.config.service.db.postgres.v1.Connection.SSLMode|null);

                            /** Connection password */
                            password?: (string|null);
                        }

                        /** Represents a Connection. */
                        class Connection implements IConnection {

                            /**
                             * Constructs a new Connection.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: clutch.config.service.db.postgres.v1.IConnection);

                            /** Connection host. */
                            public host: string;

                            /** Connection port. */
                            public port: number;

                            /** Connection user. */
                            public user: string;

                            /** Connection dbname. */
                            public dbname: string;

                            /** Connection sslMode. */
                            public sslMode: clutch.config.service.db.postgres.v1.Connection.SSLMode;

                            /** Connection password. */
                            public password: string;

                            /** Connection authn. */
                            public authn?: "password";

                            /**
                             * Verifies a Connection message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Connection message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Connection
                             */
                            public static fromObject(object: { [k: string]: any }): clutch.config.service.db.postgres.v1.Connection;

                            /**
                             * Creates a plain object from a Connection message. Also converts values to other types if specified.
                             * @param message Connection
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: clutch.config.service.db.postgres.v1.Connection, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Connection to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Connection {

                            /** SSLMode enum. */
                            enum SSLMode {
                                UNSPECIFIED = 0,
                                DISABLE = 1,
                                ALLOW = 2,
                                PREFER = 3,
                                REQUIRE = 4,
                                VERIFY_CA = 5,
                                VERIFY_FULL = 6
                            }
                        }

                        /** Properties of a Config. */
                        interface IConfig {

                            /** Config connection */
                            connection?: (clutch.config.service.db.postgres.v1.IConnection|null);
                        }

                        /** Represents a Config. */
                        class Config implements IConfig {

                            /**
                             * Constructs a new Config.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: clutch.config.service.db.postgres.v1.IConfig);

                            /** Config connection. */
                            public connection?: (clutch.config.service.db.postgres.v1.IConnection|null);

                            /**
                             * Verifies a Config message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Config message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Config
                             */
                            public static fromObject(object: { [k: string]: any }): clutch.config.service.db.postgres.v1.Config;

                            /**
                             * Creates a plain object from a Config message. Also converts values to other types if specified.
                             * @param message Config
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: clutch.config.service.db.postgres.v1.Config, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Config to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }
                    }
                }
            }

            /** Namespace envoyadmin. */
            namespace envoyadmin {

                /** Namespace v1. */
                namespace v1 {

                    /** Properties of a Config. */
                    interface IConfig {

                        /** Config secure */
                        secure?: (boolean|null);

                        /** Config defaultRemotePort */
                        defaultRemotePort?: (number|null);
                    }

                    /** Represents a Config. */
                    class Config implements IConfig {

                        /**
                         * Constructs a new Config.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.envoyadmin.v1.IConfig);

                        /** Config secure. */
                        public secure: boolean;

                        /** Config defaultRemotePort. */
                        public defaultRemotePort: number;

                        /**
                         * Verifies a Config message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Config
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.envoyadmin.v1.Config;

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @param message Config
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.envoyadmin.v1.Config, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Config to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }
            }

            /** Namespace github. */
            namespace github {

                /** Namespace v1. */
                namespace v1 {

                    /** Properties of a Config. */
                    interface IConfig {

                        /** Config accessToken */
                        accessToken?: (string|null);
                    }

                    /** Represents a Config. */
                    class Config implements IConfig {

                        /**
                         * Constructs a new Config.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.github.v1.IConfig);

                        /** Config accessToken. */
                        public accessToken: string;

                        /** Config auth. */
                        public auth?: "accessToken";

                        /**
                         * Verifies a Config message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Config
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.github.v1.Config;

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @param message Config
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.github.v1.Config, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Config to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }
            }

            /** Namespace k8s. */
            namespace k8s {

                /** Namespace v1. */
                namespace v1 {

                    /** Properties of a Config. */
                    interface IConfig {

                        /** Config kubeconfigs */
                        kubeconfigs?: (string[]|null);

                        /** Config restClientConfig */
                        restClientConfig?: (clutch.config.service.k8s.v1.IRestClientConfig|null);
                    }

                    /** Represents a Config. */
                    class Config implements IConfig {

                        /**
                         * Constructs a new Config.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.k8s.v1.IConfig);

                        /** Config kubeconfigs. */
                        public kubeconfigs: string[];

                        /** Config restClientConfig. */
                        public restClientConfig?: (clutch.config.service.k8s.v1.IRestClientConfig|null);

                        /**
                         * Verifies a Config message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Config
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.k8s.v1.Config;

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @param message Config
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.k8s.v1.Config, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Config to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a RestClientConfig. */
                    interface IRestClientConfig {

                        /** RestClientConfig timeout */
                        timeout?: (google.protobuf.IDuration|null);

                        /** RestClientConfig qps */
                        qps?: (number|null);

                        /** RestClientConfig burst */
                        burst?: (number|null);
                    }

                    /** Represents a RestClientConfig. */
                    class RestClientConfig implements IRestClientConfig {

                        /**
                         * Constructs a new RestClientConfig.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.k8s.v1.IRestClientConfig);

                        /** RestClientConfig timeout. */
                        public timeout?: (google.protobuf.IDuration|null);

                        /** RestClientConfig qps. */
                        public qps: number;

                        /** RestClientConfig burst. */
                        public burst: number;

                        /**
                         * Verifies a RestClientConfig message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a RestClientConfig message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns RestClientConfig
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.k8s.v1.RestClientConfig;

                        /**
                         * Creates a plain object from a RestClientConfig message. Also converts values to other types if specified.
                         * @param message RestClientConfig
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.k8s.v1.RestClientConfig, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this RestClientConfig to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }
            }

            /** Namespace topology. */
            namespace topology {

                /** Namespace v1. */
                namespace v1 {

                    /** Properties of a Config. */
                    interface IConfig {

                        /** Config cache */
                        cache?: (clutch.config.service.topology.v1.ICache|null);
                    }

                    /** Represents a Config. */
                    class Config implements IConfig {

                        /**
                         * Constructs a new Config.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.topology.v1.IConfig);

                        /** Config cache. */
                        public cache?: (clutch.config.service.topology.v1.ICache|null);

                        /**
                         * Verifies a Config message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Config
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.topology.v1.Config;

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @param message Config
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.topology.v1.Config, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Config to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Cache. */
                    interface ICache {

                        /** Cache ttl */
                        ttl?: (google.protobuf.IDuration|null);
                    }

                    /** Represents a Cache. */
                    class Cache implements ICache {

                        /**
                         * Constructs a new Cache.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: clutch.config.service.topology.v1.ICache);

                        /** Cache ttl. */
                        public ttl?: (google.protobuf.IDuration|null);

                        /**
                         * Verifies a Cache message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Cache message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Cache
                         */
                        public static fromObject(object: { [k: string]: any }): clutch.config.service.topology.v1.Cache;

                        /**
                         * Creates a plain object from a Cache message. Also converts values to other types if specified.
                         * @param message Cache
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: clutch.config.service.topology.v1.Cache, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Cache to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }
            }
        }
    }

    /** Namespace envoytriage. */
    namespace envoytriage {

        /** Namespace v1. */
        namespace v1 {

            /** Represents an EnvoyTriageAPI */
            class EnvoyTriageAPI extends $protobuf.rpc.Service {

                /**
                 * Constructs a new EnvoyTriageAPI service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Calls Read.
                 * @param request ReadRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and ReadResponse
                 */
                public read(request: clutch.envoytriage.v1.IReadRequest, callback: clutch.envoytriage.v1.EnvoyTriageAPI.ReadCallback): void;

                /**
                 * Calls Read.
                 * @param request ReadRequest message or plain object
                 * @returns Promise
                 */
                public read(request: clutch.envoytriage.v1.IReadRequest): Promise<clutch.envoytriage.v1.ReadResponse>;
            }

            namespace EnvoyTriageAPI {

                /**
                 * Callback as used by {@link clutch.envoytriage.v1.EnvoyTriageAPI#read}.
                 * @param error Error, if any
                 * @param [response] ReadResponse
                 */
                type ReadCallback = (error: (Error|null), response?: clutch.envoytriage.v1.ReadResponse) => void;
            }

            /** Properties of a ReadRequest. */
            interface IReadRequest {

                /** ReadRequest operations */
                operations?: (clutch.envoytriage.v1.IReadOperation[]|null);
            }

            /** Represents a ReadRequest. */
            class ReadRequest implements IReadRequest {

                /**
                 * Constructs a new ReadRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IReadRequest);

                /** ReadRequest operations. */
                public operations: clutch.envoytriage.v1.IReadOperation[];

                /**
                 * Verifies a ReadRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ReadRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ReadRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.ReadRequest;

                /**
                 * Creates a plain object from a ReadRequest message. Also converts values to other types if specified.
                 * @param message ReadRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.ReadRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ReadRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ReadOperation. */
            interface IReadOperation {

                /** ReadOperation address */
                address?: (clutch.envoytriage.v1.IAddress|null);

                /** ReadOperation include */
                include?: (clutch.envoytriage.v1.ReadOperation.IInclude|null);
            }

            /** Represents a ReadOperation. */
            class ReadOperation implements IReadOperation {

                /**
                 * Constructs a new ReadOperation.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IReadOperation);

                /** ReadOperation address. */
                public address?: (clutch.envoytriage.v1.IAddress|null);

                /** ReadOperation include. */
                public include?: (clutch.envoytriage.v1.ReadOperation.IInclude|null);

                /**
                 * Verifies a ReadOperation message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ReadOperation message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ReadOperation
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.ReadOperation;

                /**
                 * Creates a plain object from a ReadOperation message. Also converts values to other types if specified.
                 * @param message ReadOperation
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.ReadOperation, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ReadOperation to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace ReadOperation {

                /** Properties of an Include. */
                interface IInclude {

                    /** Include clusters */
                    clusters?: (boolean|null);

                    /** Include configDump */
                    configDump?: (boolean|null);

                    /** Include listeners */
                    listeners?: (boolean|null);

                    /** Include runtime */
                    runtime?: (boolean|null);

                    /** Include stats */
                    stats?: (boolean|null);

                    /** Include serverInfo */
                    serverInfo?: (boolean|null);
                }

                /** Represents an Include. */
                class Include implements IInclude {

                    /**
                     * Constructs a new Include.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.envoytriage.v1.ReadOperation.IInclude);

                    /** Include clusters. */
                    public clusters: boolean;

                    /** Include configDump. */
                    public configDump: boolean;

                    /** Include listeners. */
                    public listeners: boolean;

                    /** Include runtime. */
                    public runtime: boolean;

                    /** Include stats. */
                    public stats: boolean;

                    /** Include serverInfo. */
                    public serverInfo: boolean;

                    /**
                     * Verifies an Include message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Include message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Include
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.ReadOperation.Include;

                    /**
                     * Creates a plain object from an Include message. Also converts values to other types if specified.
                     * @param message Include
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.envoytriage.v1.ReadOperation.Include, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Include to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a ReadResponse. */
            interface IReadResponse {

                /** ReadResponse results */
                results?: (clutch.envoytriage.v1.IResult[]|null);
            }

            /** Represents a ReadResponse. */
            class ReadResponse implements IReadResponse {

                /**
                 * Constructs a new ReadResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IReadResponse);

                /** ReadResponse results. */
                public results: clutch.envoytriage.v1.IResult[];

                /**
                 * Verifies a ReadResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ReadResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ReadResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.ReadResponse;

                /**
                 * Creates a plain object from a ReadResponse message. Also converts values to other types if specified.
                 * @param message ReadResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.ReadResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ReadResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an Address. */
            interface IAddress {

                /** Address host */
                host?: (string|null);

                /** Address port */
                port?: (number|null);
            }

            /** Represents an Address. */
            class Address implements IAddress {

                /**
                 * Constructs a new Address.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IAddress);

                /** Address host. */
                public host: string;

                /** Address port. */
                public port: number;

                /**
                 * Verifies an Address message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Address message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Address
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.Address;

                /**
                 * Creates a plain object from an Address message. Also converts values to other types if specified.
                 * @param message Address
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.Address, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Address to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Result. */
            interface IResult {

                /** Result address */
                address?: (clutch.envoytriage.v1.IAddress|null);

                /** Result nodeMetadata */
                nodeMetadata?: (clutch.envoytriage.v1.INodeMetadata|null);

                /** Result output */
                output?: (clutch.envoytriage.v1.Result.IOutput|null);
            }

            /** Represents a Result. */
            class Result implements IResult {

                /**
                 * Constructs a new Result.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IResult);

                /** Result address. */
                public address?: (clutch.envoytriage.v1.IAddress|null);

                /** Result nodeMetadata. */
                public nodeMetadata?: (clutch.envoytriage.v1.INodeMetadata|null);

                /** Result output. */
                public output?: (clutch.envoytriage.v1.Result.IOutput|null);

                /**
                 * Verifies a Result message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Result message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Result
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.Result;

                /**
                 * Creates a plain object from a Result message. Also converts values to other types if specified.
                 * @param message Result
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.Result, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Result to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Result {

                /** Properties of an Output. */
                interface IOutput {

                    /** Output clusters */
                    clusters?: (clutch.envoytriage.v1.IClusters|null);

                    /** Output configDump */
                    configDump?: (clutch.envoytriage.v1.IConfigDump|null);

                    /** Output listeners */
                    listeners?: (clutch.envoytriage.v1.IListeners|null);

                    /** Output runtime */
                    runtime?: (clutch.envoytriage.v1.IRuntime|null);

                    /** Output stats */
                    stats?: (clutch.envoytriage.v1.IStats|null);

                    /** Output serverInfo */
                    serverInfo?: (clutch.envoytriage.v1.IServerInfo|null);
                }

                /** Represents an Output. */
                class Output implements IOutput {

                    /**
                     * Constructs a new Output.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.envoytriage.v1.Result.IOutput);

                    /** Output clusters. */
                    public clusters?: (clutch.envoytriage.v1.IClusters|null);

                    /** Output configDump. */
                    public configDump?: (clutch.envoytriage.v1.IConfigDump|null);

                    /** Output listeners. */
                    public listeners?: (clutch.envoytriage.v1.IListeners|null);

                    /** Output runtime. */
                    public runtime?: (clutch.envoytriage.v1.IRuntime|null);

                    /** Output stats. */
                    public stats?: (clutch.envoytriage.v1.IStats|null);

                    /** Output serverInfo. */
                    public serverInfo?: (clutch.envoytriage.v1.IServerInfo|null);

                    /**
                     * Verifies an Output message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Output message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Output
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.Result.Output;

                    /**
                     * Creates a plain object from an Output message. Also converts values to other types if specified.
                     * @param message Output
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.envoytriage.v1.Result.Output, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Output to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a NodeMetadata. */
            interface INodeMetadata {

                /** NodeMetadata serviceNode */
                serviceNode?: (string|null);

                /** NodeMetadata serviceCluster */
                serviceCluster?: (string|null);

                /** NodeMetadata serviceZone */
                serviceZone?: (string|null);

                /** NodeMetadata version */
                version?: (string|null);
            }

            /** Represents a NodeMetadata. */
            class NodeMetadata implements INodeMetadata {

                /**
                 * Constructs a new NodeMetadata.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.INodeMetadata);

                /** NodeMetadata serviceNode. */
                public serviceNode: string;

                /** NodeMetadata serviceCluster. */
                public serviceCluster: string;

                /** NodeMetadata serviceZone. */
                public serviceZone: string;

                /** NodeMetadata version. */
                public version: string;

                /**
                 * Verifies a NodeMetadata message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a NodeMetadata message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns NodeMetadata
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.NodeMetadata;

                /**
                 * Creates a plain object from a NodeMetadata message. Also converts values to other types if specified.
                 * @param message NodeMetadata
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.NodeMetadata, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this NodeMetadata to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a HostStatus. */
            interface IHostStatus {

                /** HostStatus address */
                address?: (string|null);

                /** HostStatus healthy */
                healthy?: (boolean|null);
            }

            /** Represents a HostStatus. */
            class HostStatus implements IHostStatus {

                /**
                 * Constructs a new HostStatus.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IHostStatus);

                /** HostStatus address. */
                public address: string;

                /** HostStatus healthy. */
                public healthy: boolean;

                /**
                 * Verifies a HostStatus message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a HostStatus message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns HostStatus
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.HostStatus;

                /**
                 * Creates a plain object from a HostStatus message. Also converts values to other types if specified.
                 * @param message HostStatus
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.HostStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this HostStatus to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ClusterStatus. */
            interface IClusterStatus {

                /** ClusterStatus name */
                name?: (string|null);

                /** ClusterStatus hostStatuses */
                hostStatuses?: (clutch.envoytriage.v1.IHostStatus[]|null);
            }

            /** Represents a ClusterStatus. */
            class ClusterStatus implements IClusterStatus {

                /**
                 * Constructs a new ClusterStatus.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IClusterStatus);

                /** ClusterStatus name. */
                public name: string;

                /** ClusterStatus hostStatuses. */
                public hostStatuses: clutch.envoytriage.v1.IHostStatus[];

                /**
                 * Verifies a ClusterStatus message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ClusterStatus message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ClusterStatus
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.ClusterStatus;

                /**
                 * Creates a plain object from a ClusterStatus message. Also converts values to other types if specified.
                 * @param message ClusterStatus
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.ClusterStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ClusterStatus to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Clusters. */
            interface IClusters {

                /** Clusters clusterStatuses */
                clusterStatuses?: (clutch.envoytriage.v1.IClusterStatus[]|null);
            }

            /** Represents a Clusters. */
            class Clusters implements IClusters {

                /**
                 * Constructs a new Clusters.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IClusters);

                /** Clusters clusterStatuses. */
                public clusterStatuses: clutch.envoytriage.v1.IClusterStatus[];

                /**
                 * Verifies a Clusters message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Clusters message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Clusters
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.Clusters;

                /**
                 * Creates a plain object from a Clusters message. Also converts values to other types if specified.
                 * @param message Clusters
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.Clusters, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Clusters to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ConfigDump. */
            interface IConfigDump {

                /** ConfigDump value */
                value?: (google.protobuf.IValue|null);
            }

            /** Represents a ConfigDump. */
            class ConfigDump implements IConfigDump {

                /**
                 * Constructs a new ConfigDump.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IConfigDump);

                /** ConfigDump value. */
                public value?: (google.protobuf.IValue|null);

                /**
                 * Verifies a ConfigDump message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ConfigDump message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ConfigDump
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.ConfigDump;

                /**
                 * Creates a plain object from a ConfigDump message. Also converts values to other types if specified.
                 * @param message ConfigDump
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.ConfigDump, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ConfigDump to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ListenerStatus. */
            interface IListenerStatus {

                /** ListenerStatus name */
                name?: (string|null);

                /** ListenerStatus localAddress */
                localAddress?: (string|null);
            }

            /** Represents a ListenerStatus. */
            class ListenerStatus implements IListenerStatus {

                /**
                 * Constructs a new ListenerStatus.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IListenerStatus);

                /** ListenerStatus name. */
                public name: string;

                /** ListenerStatus localAddress. */
                public localAddress: string;

                /**
                 * Verifies a ListenerStatus message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ListenerStatus message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ListenerStatus
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.ListenerStatus;

                /**
                 * Creates a plain object from a ListenerStatus message. Also converts values to other types if specified.
                 * @param message ListenerStatus
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.ListenerStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ListenerStatus to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Listeners. */
            interface IListeners {

                /** Listeners listenerStatuses */
                listenerStatuses?: (clutch.envoytriage.v1.IListenerStatus[]|null);
            }

            /** Represents a Listeners. */
            class Listeners implements IListeners {

                /**
                 * Constructs a new Listeners.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IListeners);

                /** Listeners listenerStatuses. */
                public listenerStatuses: clutch.envoytriage.v1.IListenerStatus[];

                /**
                 * Verifies a Listeners message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Listeners message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Listeners
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.Listeners;

                /**
                 * Creates a plain object from a Listeners message. Also converts values to other types if specified.
                 * @param message Listeners
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.Listeners, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Listeners to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Runtime. */
            interface IRuntime {

                /** Runtime entries */
                entries?: (clutch.envoytriage.v1.Runtime.IEntry[]|null);
            }

            /** Represents a Runtime. */
            class Runtime implements IRuntime {

                /**
                 * Constructs a new Runtime.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IRuntime);

                /** Runtime entries. */
                public entries: clutch.envoytriage.v1.Runtime.IEntry[];

                /**
                 * Verifies a Runtime message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Runtime message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Runtime
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.Runtime;

                /**
                 * Creates a plain object from a Runtime message. Also converts values to other types if specified.
                 * @param message Runtime
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.Runtime, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Runtime to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Runtime {

                /** Properties of an Entry. */
                interface IEntry {

                    /** Entry key */
                    key?: (string|null);

                    /** Entry value */
                    value?: (string|null);
                }

                /** Represents an Entry. */
                class Entry implements IEntry {

                    /**
                     * Constructs a new Entry.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.envoytriage.v1.Runtime.IEntry);

                    /** Entry key. */
                    public key: string;

                    /** Entry value. */
                    public value: string;

                    /** Entry type. */
                    public type?: "value";

                    /**
                     * Verifies an Entry message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Entry message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Entry
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.Runtime.Entry;

                    /**
                     * Creates a plain object from an Entry message. Also converts values to other types if specified.
                     * @param message Entry
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.envoytriage.v1.Runtime.Entry, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Entry to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a ServerInfo. */
            interface IServerInfo {

                /** ServerInfo value */
                value?: (google.protobuf.IValue|null);
            }

            /** Represents a ServerInfo. */
            class ServerInfo implements IServerInfo {

                /**
                 * Constructs a new ServerInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IServerInfo);

                /** ServerInfo value. */
                public value?: (google.protobuf.IValue|null);

                /**
                 * Verifies a ServerInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ServerInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ServerInfo
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.ServerInfo;

                /**
                 * Creates a plain object from a ServerInfo message. Also converts values to other types if specified.
                 * @param message ServerInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.ServerInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ServerInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Stats. */
            interface IStats {

                /** Stats stats */
                stats?: (clutch.envoytriage.v1.Stats.IStat[]|null);
            }

            /** Represents a Stats. */
            class Stats implements IStats {

                /**
                 * Constructs a new Stats.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.envoytriage.v1.IStats);

                /** Stats stats. */
                public stats: clutch.envoytriage.v1.Stats.IStat[];

                /**
                 * Verifies a Stats message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Stats message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Stats
                 */
                public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.Stats;

                /**
                 * Creates a plain object from a Stats message. Also converts values to other types if specified.
                 * @param message Stats
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.envoytriage.v1.Stats, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Stats to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Stats {

                /** Properties of a Stat. */
                interface IStat {

                    /** Stat key */
                    key?: (string|null);

                    /** Stat value */
                    value?: (number|Long|null);
                }

                /** Represents a Stat. */
                class Stat implements IStat {

                    /**
                     * Constructs a new Stat.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.envoytriage.v1.Stats.IStat);

                    /** Stat key. */
                    public key: string;

                    /** Stat value. */
                    public value: (number|Long);

                    /**
                     * Verifies a Stat message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Stat message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Stat
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.envoytriage.v1.Stats.Stat;

                    /**
                     * Creates a plain object from a Stat message. Also converts values to other types if specified.
                     * @param message Stat
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.envoytriage.v1.Stats.Stat, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Stat to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }
    }

    /** Namespace healthcheck. */
    namespace healthcheck {

        /** Namespace v1. */
        namespace v1 {

            /** Represents a HealthcheckAPI */
            class HealthcheckAPI extends $protobuf.rpc.Service {

                /**
                 * Constructs a new HealthcheckAPI service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Calls Healthcheck.
                 * @param request HealthcheckRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and HealthcheckResponse
                 */
                public healthcheck(request: clutch.healthcheck.v1.IHealthcheckRequest, callback: clutch.healthcheck.v1.HealthcheckAPI.HealthcheckCallback): void;

                /**
                 * Calls Healthcheck.
                 * @param request HealthcheckRequest message or plain object
                 * @returns Promise
                 */
                public healthcheck(request: clutch.healthcheck.v1.IHealthcheckRequest): Promise<clutch.healthcheck.v1.HealthcheckResponse>;
            }

            namespace HealthcheckAPI {

                /**
                 * Callback as used by {@link clutch.healthcheck.v1.HealthcheckAPI#healthcheck}.
                 * @param error Error, if any
                 * @param [response] HealthcheckResponse
                 */
                type HealthcheckCallback = (error: (Error|null), response?: clutch.healthcheck.v1.HealthcheckResponse) => void;
            }

            /** Properties of a HealthcheckRequest. */
            interface IHealthcheckRequest {
            }

            /** Represents a HealthcheckRequest. */
            class HealthcheckRequest implements IHealthcheckRequest {

                /**
                 * Constructs a new HealthcheckRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.healthcheck.v1.IHealthcheckRequest);

                /**
                 * Verifies a HealthcheckRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a HealthcheckRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns HealthcheckRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.healthcheck.v1.HealthcheckRequest;

                /**
                 * Creates a plain object from a HealthcheckRequest message. Also converts values to other types if specified.
                 * @param message HealthcheckRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.healthcheck.v1.HealthcheckRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this HealthcheckRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a HealthcheckResponse. */
            interface IHealthcheckResponse {
            }

            /** Represents a HealthcheckResponse. */
            class HealthcheckResponse implements IHealthcheckResponse {

                /**
                 * Constructs a new HealthcheckResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.healthcheck.v1.IHealthcheckResponse);

                /**
                 * Verifies a HealthcheckResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a HealthcheckResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns HealthcheckResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.healthcheck.v1.HealthcheckResponse;

                /**
                 * Creates a plain object from a HealthcheckResponse message. Also converts values to other types if specified.
                 * @param message HealthcheckResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.healthcheck.v1.HealthcheckResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this HealthcheckResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace k8s. */
    namespace k8s {

        /** Namespace v1. */
        namespace v1 {

            /** Represents a K8sAPI */
            class K8sAPI extends $protobuf.rpc.Service {

                /**
                 * Constructs a new K8sAPI service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Calls DescribePod.
                 * @param request DescribePodRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DescribePodResponse
                 */
                public describePod(request: clutch.k8s.v1.IDescribePodRequest, callback: clutch.k8s.v1.K8sAPI.DescribePodCallback): void;

                /**
                 * Calls DescribePod.
                 * @param request DescribePodRequest message or plain object
                 * @returns Promise
                 */
                public describePod(request: clutch.k8s.v1.IDescribePodRequest): Promise<clutch.k8s.v1.DescribePodResponse>;

                /**
                 * Calls ListPods.
                 * @param request ListPodsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and ListPodsResponse
                 */
                public listPods(request: clutch.k8s.v1.IListPodsRequest, callback: clutch.k8s.v1.K8sAPI.ListPodsCallback): void;

                /**
                 * Calls ListPods.
                 * @param request ListPodsRequest message or plain object
                 * @returns Promise
                 */
                public listPods(request: clutch.k8s.v1.IListPodsRequest): Promise<clutch.k8s.v1.ListPodsResponse>;

                /**
                 * Calls DeletePod.
                 * @param request DeletePodRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DeletePodResponse
                 */
                public deletePod(request: clutch.k8s.v1.IDeletePodRequest, callback: clutch.k8s.v1.K8sAPI.DeletePodCallback): void;

                /**
                 * Calls DeletePod.
                 * @param request DeletePodRequest message or plain object
                 * @returns Promise
                 */
                public deletePod(request: clutch.k8s.v1.IDeletePodRequest): Promise<clutch.k8s.v1.DeletePodResponse>;

                /**
                 * Calls UpdatePod.
                 * @param request UpdatePodRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and UpdatePodResponse
                 */
                public updatePod(request: clutch.k8s.v1.IUpdatePodRequest, callback: clutch.k8s.v1.K8sAPI.UpdatePodCallback): void;

                /**
                 * Calls UpdatePod.
                 * @param request UpdatePodRequest message or plain object
                 * @returns Promise
                 */
                public updatePod(request: clutch.k8s.v1.IUpdatePodRequest): Promise<clutch.k8s.v1.UpdatePodResponse>;

                /**
                 * Calls ResizeHPA.
                 * @param request ResizeHPARequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and ResizeHPAResponse
                 */
                public resizeHPA(request: clutch.k8s.v1.IResizeHPARequest, callback: clutch.k8s.v1.K8sAPI.ResizeHPACallback): void;

                /**
                 * Calls ResizeHPA.
                 * @param request ResizeHPARequest message or plain object
                 * @returns Promise
                 */
                public resizeHPA(request: clutch.k8s.v1.IResizeHPARequest): Promise<clutch.k8s.v1.ResizeHPAResponse>;

                /**
                 * Calls DeleteHPA.
                 * @param request DeleteHPARequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DeleteHPAResponse
                 */
                public deleteHPA(request: clutch.k8s.v1.IDeleteHPARequest, callback: clutch.k8s.v1.K8sAPI.DeleteHPACallback): void;

                /**
                 * Calls DeleteHPA.
                 * @param request DeleteHPARequest message or plain object
                 * @returns Promise
                 */
                public deleteHPA(request: clutch.k8s.v1.IDeleteHPARequest): Promise<clutch.k8s.v1.DeleteHPAResponse>;

                /**
                 * Calls UpdateDeployment.
                 * @param request UpdateDeploymentRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and UpdateDeploymentResponse
                 */
                public updateDeployment(request: clutch.k8s.v1.IUpdateDeploymentRequest, callback: clutch.k8s.v1.K8sAPI.UpdateDeploymentCallback): void;

                /**
                 * Calls UpdateDeployment.
                 * @param request UpdateDeploymentRequest message or plain object
                 * @returns Promise
                 */
                public updateDeployment(request: clutch.k8s.v1.IUpdateDeploymentRequest): Promise<clutch.k8s.v1.UpdateDeploymentResponse>;

                /**
                 * Calls DeleteDeployment.
                 * @param request DeleteDeploymentRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DeleteDeploymentResponse
                 */
                public deleteDeployment(request: clutch.k8s.v1.IDeleteDeploymentRequest, callback: clutch.k8s.v1.K8sAPI.DeleteDeploymentCallback): void;

                /**
                 * Calls DeleteDeployment.
                 * @param request DeleteDeploymentRequest message or plain object
                 * @returns Promise
                 */
                public deleteDeployment(request: clutch.k8s.v1.IDeleteDeploymentRequest): Promise<clutch.k8s.v1.DeleteDeploymentResponse>;

                /**
                 * Calls DescribeService.
                 * @param request DescribeServiceRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DescribeServiceResponse
                 */
                public describeService(request: clutch.k8s.v1.IDescribeServiceRequest, callback: clutch.k8s.v1.K8sAPI.DescribeServiceCallback): void;

                /**
                 * Calls DescribeService.
                 * @param request DescribeServiceRequest message or plain object
                 * @returns Promise
                 */
                public describeService(request: clutch.k8s.v1.IDescribeServiceRequest): Promise<clutch.k8s.v1.DescribeServiceResponse>;

                /**
                 * Calls DeleteService.
                 * @param request DeleteServiceRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DeleteServiceResponse
                 */
                public deleteService(request: clutch.k8s.v1.IDeleteServiceRequest, callback: clutch.k8s.v1.K8sAPI.DeleteServiceCallback): void;

                /**
                 * Calls DeleteService.
                 * @param request DeleteServiceRequest message or plain object
                 * @returns Promise
                 */
                public deleteService(request: clutch.k8s.v1.IDeleteServiceRequest): Promise<clutch.k8s.v1.DeleteServiceResponse>;

                /**
                 * Calls UpdateStatefulSet.
                 * @param request UpdateStatefulSetRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and UpdateStatefulSetResponse
                 */
                public updateStatefulSet(request: clutch.k8s.v1.IUpdateStatefulSetRequest, callback: clutch.k8s.v1.K8sAPI.UpdateStatefulSetCallback): void;

                /**
                 * Calls UpdateStatefulSet.
                 * @param request UpdateStatefulSetRequest message or plain object
                 * @returns Promise
                 */
                public updateStatefulSet(request: clutch.k8s.v1.IUpdateStatefulSetRequest): Promise<clutch.k8s.v1.UpdateStatefulSetResponse>;

                /**
                 * Calls DescribeCronJob.
                 * @param request DescribeCronJobRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DescribeCronJobResponse
                 */
                public describeCronJob(request: clutch.k8s.v1.IDescribeCronJobRequest, callback: clutch.k8s.v1.K8sAPI.DescribeCronJobCallback): void;

                /**
                 * Calls DescribeCronJob.
                 * @param request DescribeCronJobRequest message or plain object
                 * @returns Promise
                 */
                public describeCronJob(request: clutch.k8s.v1.IDescribeCronJobRequest): Promise<clutch.k8s.v1.DescribeCronJobResponse>;

                /**
                 * Calls DeleteCronJob.
                 * @param request DeleteCronJobRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DeleteCronJobResponse
                 */
                public deleteCronJob(request: clutch.k8s.v1.IDeleteCronJobRequest, callback: clutch.k8s.v1.K8sAPI.DeleteCronJobCallback): void;

                /**
                 * Calls DeleteCronJob.
                 * @param request DeleteCronJobRequest message or plain object
                 * @returns Promise
                 */
                public deleteCronJob(request: clutch.k8s.v1.IDeleteCronJobRequest): Promise<clutch.k8s.v1.DeleteCronJobResponse>;
            }

            namespace K8sAPI {

                /**
                 * Callback as used by {@link clutch.k8s.v1.K8sAPI#describePod}.
                 * @param error Error, if any
                 * @param [response] DescribePodResponse
                 */
                type DescribePodCallback = (error: (Error|null), response?: clutch.k8s.v1.DescribePodResponse) => void;

                /**
                 * Callback as used by {@link clutch.k8s.v1.K8sAPI#listPods}.
                 * @param error Error, if any
                 * @param [response] ListPodsResponse
                 */
                type ListPodsCallback = (error: (Error|null), response?: clutch.k8s.v1.ListPodsResponse) => void;

                /**
                 * Callback as used by {@link clutch.k8s.v1.K8sAPI#deletePod}.
                 * @param error Error, if any
                 * @param [response] DeletePodResponse
                 */
                type DeletePodCallback = (error: (Error|null), response?: clutch.k8s.v1.DeletePodResponse) => void;

                /**
                 * Callback as used by {@link clutch.k8s.v1.K8sAPI#updatePod}.
                 * @param error Error, if any
                 * @param [response] UpdatePodResponse
                 */
                type UpdatePodCallback = (error: (Error|null), response?: clutch.k8s.v1.UpdatePodResponse) => void;

                /**
                 * Callback as used by {@link clutch.k8s.v1.K8sAPI#resizeHPA}.
                 * @param error Error, if any
                 * @param [response] ResizeHPAResponse
                 */
                type ResizeHPACallback = (error: (Error|null), response?: clutch.k8s.v1.ResizeHPAResponse) => void;

                /**
                 * Callback as used by {@link clutch.k8s.v1.K8sAPI#deleteHPA}.
                 * @param error Error, if any
                 * @param [response] DeleteHPAResponse
                 */
                type DeleteHPACallback = (error: (Error|null), response?: clutch.k8s.v1.DeleteHPAResponse) => void;

                /**
                 * Callback as used by {@link clutch.k8s.v1.K8sAPI#updateDeployment}.
                 * @param error Error, if any
                 * @param [response] UpdateDeploymentResponse
                 */
                type UpdateDeploymentCallback = (error: (Error|null), response?: clutch.k8s.v1.UpdateDeploymentResponse) => void;

                /**
                 * Callback as used by {@link clutch.k8s.v1.K8sAPI#deleteDeployment}.
                 * @param error Error, if any
                 * @param [response] DeleteDeploymentResponse
                 */
                type DeleteDeploymentCallback = (error: (Error|null), response?: clutch.k8s.v1.DeleteDeploymentResponse) => void;

                /**
                 * Callback as used by {@link clutch.k8s.v1.K8sAPI#describeService}.
                 * @param error Error, if any
                 * @param [response] DescribeServiceResponse
                 */
                type DescribeServiceCallback = (error: (Error|null), response?: clutch.k8s.v1.DescribeServiceResponse) => void;

                /**
                 * Callback as used by {@link clutch.k8s.v1.K8sAPI#deleteService}.
                 * @param error Error, if any
                 * @param [response] DeleteServiceResponse
                 */
                type DeleteServiceCallback = (error: (Error|null), response?: clutch.k8s.v1.DeleteServiceResponse) => void;

                /**
                 * Callback as used by {@link clutch.k8s.v1.K8sAPI#updateStatefulSet}.
                 * @param error Error, if any
                 * @param [response] UpdateStatefulSetResponse
                 */
                type UpdateStatefulSetCallback = (error: (Error|null), response?: clutch.k8s.v1.UpdateStatefulSetResponse) => void;

                /**
                 * Callback as used by {@link clutch.k8s.v1.K8sAPI#describeCronJob}.
                 * @param error Error, if any
                 * @param [response] DescribeCronJobResponse
                 */
                type DescribeCronJobCallback = (error: (Error|null), response?: clutch.k8s.v1.DescribeCronJobResponse) => void;

                /**
                 * Callback as used by {@link clutch.k8s.v1.K8sAPI#deleteCronJob}.
                 * @param error Error, if any
                 * @param [response] DeleteCronJobResponse
                 */
                type DeleteCronJobCallback = (error: (Error|null), response?: clutch.k8s.v1.DeleteCronJobResponse) => void;
            }

            /** Properties of a DescribePodRequest. */
            interface IDescribePodRequest {

                /** DescribePodRequest clientset */
                clientset?: (string|null);

                /** DescribePodRequest cluster */
                cluster?: (string|null);

                /** DescribePodRequest namespace */
                namespace?: (string|null);

                /** DescribePodRequest name */
                name?: (string|null);

                /** DescribePodRequest labels */
                labels?: ({ [k: string]: string }|null);
            }

            /** Represents a DescribePodRequest. */
            class DescribePodRequest implements IDescribePodRequest {

                /**
                 * Constructs a new DescribePodRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDescribePodRequest);

                /** DescribePodRequest clientset. */
                public clientset: string;

                /** DescribePodRequest cluster. */
                public cluster: string;

                /** DescribePodRequest namespace. */
                public namespace: string;

                /** DescribePodRequest name. */
                public name: string;

                /** DescribePodRequest labels. */
                public labels: { [k: string]: string };

                /**
                 * Verifies a DescribePodRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DescribePodRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DescribePodRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DescribePodRequest;

                /**
                 * Creates a plain object from a DescribePodRequest message. Also converts values to other types if specified.
                 * @param message DescribePodRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DescribePodRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DescribePodRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DescribePodResponse. */
            interface IDescribePodResponse {

                /** DescribePodResponse pod */
                pod?: (clutch.k8s.v1.IPod|null);
            }

            /** Represents a DescribePodResponse. */
            class DescribePodResponse implements IDescribePodResponse {

                /**
                 * Constructs a new DescribePodResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDescribePodResponse);

                /** DescribePodResponse pod. */
                public pod?: (clutch.k8s.v1.IPod|null);

                /**
                 * Verifies a DescribePodResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DescribePodResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DescribePodResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DescribePodResponse;

                /**
                 * Creates a plain object from a DescribePodResponse message. Also converts values to other types if specified.
                 * @param message DescribePodResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DescribePodResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DescribePodResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Container. */
            interface IContainer {

                /** Container name */
                name?: (string|null);

                /** Container image */
                image?: (string|null);

                /** Container state */
                state?: (clutch.k8s.v1.Container.State|null);

                /** Container ready */
                ready?: (boolean|null);
            }

            /** Represents a Container. */
            class Container implements IContainer {

                /**
                 * Constructs a new Container.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IContainer);

                /** Container name. */
                public name: string;

                /** Container image. */
                public image: string;

                /** Container state. */
                public state: clutch.k8s.v1.Container.State;

                /** Container ready. */
                public ready: boolean;

                /**
                 * Verifies a Container message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Container message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Container
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.Container;

                /**
                 * Creates a plain object from a Container message. Also converts values to other types if specified.
                 * @param message Container
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.Container, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Container to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Container {

                /** State enum. */
                enum State {
                    UNSPECIFIED = 0,
                    UNKNOWN = 1,
                    TERMINATED = 2,
                    RUNNING = 3,
                    WAITING = 4
                }
            }

            /** Properties of a Pod. */
            interface IPod {

                /** Pod cluster */
                cluster?: (string|null);

                /** Pod namespace */
                namespace?: (string|null);

                /** Pod name */
                name?: (string|null);

                /** Pod containers */
                containers?: (clutch.k8s.v1.IContainer[]|null);

                /** Pod nodeIp */
                nodeIp?: (string|null);

                /** Pod podIp */
                podIp?: (string|null);

                /** Pod state */
                state?: (clutch.k8s.v1.Pod.State|null);

                /** Pod startTime */
                startTime?: (google.protobuf.ITimestamp|null);

                /** Pod labels */
                labels?: ({ [k: string]: string }|null);

                /** Pod annotations */
                annotations?: ({ [k: string]: string }|null);
            }

            /** Represents a Pod. */
            class Pod implements IPod {

                /**
                 * Constructs a new Pod.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IPod);

                /** Pod cluster. */
                public cluster: string;

                /** Pod namespace. */
                public namespace: string;

                /** Pod name. */
                public name: string;

                /** Pod containers. */
                public containers: clutch.k8s.v1.IContainer[];

                /** Pod nodeIp. */
                public nodeIp: string;

                /** Pod podIp. */
                public podIp: string;

                /** Pod state. */
                public state: clutch.k8s.v1.Pod.State;

                /** Pod startTime. */
                public startTime?: (google.protobuf.ITimestamp|null);

                /** Pod labels. */
                public labels: { [k: string]: string };

                /** Pod annotations. */
                public annotations: { [k: string]: string };

                /**
                 * Verifies a Pod message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Pod message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Pod
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.Pod;

                /**
                 * Creates a plain object from a Pod message. Also converts values to other types if specified.
                 * @param message Pod
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.Pod, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Pod to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Pod {

                /** State enum. */
                enum State {
                    UNSPECIFIED = 0,
                    UNKNOWN = 1,
                    PENDING = 2,
                    RUNNING = 3,
                    SUCCEEDED = 4,
                    FAILED = 5
                }
            }

            /** Properties of a ListOptions. */
            interface IListOptions {

                /** ListOptions labels */
                labels?: ({ [k: string]: string }|null);
            }

            /** Represents a ListOptions. */
            class ListOptions implements IListOptions {

                /**
                 * Constructs a new ListOptions.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IListOptions);

                /** ListOptions labels. */
                public labels: { [k: string]: string };

                /**
                 * Verifies a ListOptions message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ListOptions message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ListOptions
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.ListOptions;

                /**
                 * Creates a plain object from a ListOptions message. Also converts values to other types if specified.
                 * @param message ListOptions
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.ListOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ListOptions to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ListPodsRequest. */
            interface IListPodsRequest {

                /** ListPodsRequest clientset */
                clientset?: (string|null);

                /** ListPodsRequest cluster */
                cluster?: (string|null);

                /** ListPodsRequest namespace */
                namespace?: (string|null);

                /** ListPodsRequest options */
                options?: (clutch.k8s.v1.IListOptions|null);
            }

            /** Represents a ListPodsRequest. */
            class ListPodsRequest implements IListPodsRequest {

                /**
                 * Constructs a new ListPodsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IListPodsRequest);

                /** ListPodsRequest clientset. */
                public clientset: string;

                /** ListPodsRequest cluster. */
                public cluster: string;

                /** ListPodsRequest namespace. */
                public namespace: string;

                /** ListPodsRequest options. */
                public options?: (clutch.k8s.v1.IListOptions|null);

                /**
                 * Verifies a ListPodsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ListPodsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ListPodsRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.ListPodsRequest;

                /**
                 * Creates a plain object from a ListPodsRequest message. Also converts values to other types if specified.
                 * @param message ListPodsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.ListPodsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ListPodsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ListPodsResponse. */
            interface IListPodsResponse {

                /** ListPodsResponse pods */
                pods?: (clutch.k8s.v1.IPod[]|null);
            }

            /** Represents a ListPodsResponse. */
            class ListPodsResponse implements IListPodsResponse {

                /**
                 * Constructs a new ListPodsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IListPodsResponse);

                /** ListPodsResponse pods. */
                public pods: clutch.k8s.v1.IPod[];

                /**
                 * Verifies a ListPodsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ListPodsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ListPodsResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.ListPodsResponse;

                /**
                 * Creates a plain object from a ListPodsResponse message. Also converts values to other types if specified.
                 * @param message ListPodsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.ListPodsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ListPodsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DeletePodRequest. */
            interface IDeletePodRequest {

                /** DeletePodRequest clientset */
                clientset?: (string|null);

                /** DeletePodRequest cluster */
                cluster?: (string|null);

                /** DeletePodRequest namespace */
                namespace?: (string|null);

                /** DeletePodRequest name */
                name?: (string|null);
            }

            /** Represents a DeletePodRequest. */
            class DeletePodRequest implements IDeletePodRequest {

                /**
                 * Constructs a new DeletePodRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDeletePodRequest);

                /** DeletePodRequest clientset. */
                public clientset: string;

                /** DeletePodRequest cluster. */
                public cluster: string;

                /** DeletePodRequest namespace. */
                public namespace: string;

                /** DeletePodRequest name. */
                public name: string;

                /**
                 * Verifies a DeletePodRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DeletePodRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DeletePodRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DeletePodRequest;

                /**
                 * Creates a plain object from a DeletePodRequest message. Also converts values to other types if specified.
                 * @param message DeletePodRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DeletePodRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DeletePodRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DeletePodResponse. */
            interface IDeletePodResponse {
            }

            /** Represents a DeletePodResponse. */
            class DeletePodResponse implements IDeletePodResponse {

                /**
                 * Constructs a new DeletePodResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDeletePodResponse);

                /**
                 * Verifies a DeletePodResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DeletePodResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DeletePodResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DeletePodResponse;

                /**
                 * Creates a plain object from a DeletePodResponse message. Also converts values to other types if specified.
                 * @param message DeletePodResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DeletePodResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DeletePodResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an UpdatePodRequest. */
            interface IUpdatePodRequest {

                /** UpdatePodRequest clientset */
                clientset?: (string|null);

                /** UpdatePodRequest cluster */
                cluster?: (string|null);

                /** UpdatePodRequest namespace */
                namespace?: (string|null);

                /** UpdatePodRequest name */
                name?: (string|null);

                /** UpdatePodRequest expectedObjectMetaFields */
                expectedObjectMetaFields?: (clutch.k8s.v1.IExpectedObjectMetaFields|null);

                /** UpdatePodRequest objectMetaFields */
                objectMetaFields?: (clutch.k8s.v1.IObjectMetaFields|null);

                /** UpdatePodRequest removeObjectMetaFields */
                removeObjectMetaFields?: (clutch.k8s.v1.IRemoveObjectMetaFields|null);
            }

            /** Represents an UpdatePodRequest. */
            class UpdatePodRequest implements IUpdatePodRequest {

                /**
                 * Constructs a new UpdatePodRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IUpdatePodRequest);

                /** UpdatePodRequest clientset. */
                public clientset: string;

                /** UpdatePodRequest cluster. */
                public cluster: string;

                /** UpdatePodRequest namespace. */
                public namespace: string;

                /** UpdatePodRequest name. */
                public name: string;

                /** UpdatePodRequest expectedObjectMetaFields. */
                public expectedObjectMetaFields?: (clutch.k8s.v1.IExpectedObjectMetaFields|null);

                /** UpdatePodRequest objectMetaFields. */
                public objectMetaFields?: (clutch.k8s.v1.IObjectMetaFields|null);

                /** UpdatePodRequest removeObjectMetaFields. */
                public removeObjectMetaFields?: (clutch.k8s.v1.IRemoveObjectMetaFields|null);

                /**
                 * Verifies an UpdatePodRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an UpdatePodRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UpdatePodRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.UpdatePodRequest;

                /**
                 * Creates a plain object from an UpdatePodRequest message. Also converts values to other types if specified.
                 * @param message UpdatePodRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.UpdatePodRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UpdatePodRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an UpdatePodResponse. */
            interface IUpdatePodResponse {
            }

            /** Represents an UpdatePodResponse. */
            class UpdatePodResponse implements IUpdatePodResponse {

                /**
                 * Constructs a new UpdatePodResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IUpdatePodResponse);

                /**
                 * Verifies an UpdatePodResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an UpdatePodResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UpdatePodResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.UpdatePodResponse;

                /**
                 * Creates a plain object from an UpdatePodResponse message. Also converts values to other types if specified.
                 * @param message UpdatePodResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.UpdatePodResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UpdatePodResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a HPA. */
            interface IHPA {

                /** HPA cluster */
                cluster?: (string|null);

                /** HPA namespace */
                namespace?: (string|null);

                /** HPA name */
                name?: (string|null);

                /** HPA sizing */
                sizing?: (clutch.k8s.v1.HPA.ISizing|null);

                /** HPA labels */
                labels?: ({ [k: string]: string }|null);

                /** HPA annotations */
                annotations?: ({ [k: string]: string }|null);
            }

            /** Represents a HPA. */
            class HPA implements IHPA {

                /**
                 * Constructs a new HPA.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IHPA);

                /** HPA cluster. */
                public cluster: string;

                /** HPA namespace. */
                public namespace: string;

                /** HPA name. */
                public name: string;

                /** HPA sizing. */
                public sizing?: (clutch.k8s.v1.HPA.ISizing|null);

                /** HPA labels. */
                public labels: { [k: string]: string };

                /** HPA annotations. */
                public annotations: { [k: string]: string };

                /**
                 * Verifies a HPA message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a HPA message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns HPA
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.HPA;

                /**
                 * Creates a plain object from a HPA message. Also converts values to other types if specified.
                 * @param message HPA
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.HPA, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this HPA to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace HPA {

                /** Properties of a Sizing. */
                interface ISizing {

                    /** Sizing minReplicas */
                    minReplicas?: (number|null);

                    /** Sizing maxReplicas */
                    maxReplicas?: (number|null);

                    /** Sizing currentReplicas */
                    currentReplicas?: (number|null);

                    /** Sizing desiredReplicas */
                    desiredReplicas?: (number|null);
                }

                /** Represents a Sizing. */
                class Sizing implements ISizing {

                    /**
                     * Constructs a new Sizing.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.k8s.v1.HPA.ISizing);

                    /** Sizing minReplicas. */
                    public minReplicas: number;

                    /** Sizing maxReplicas. */
                    public maxReplicas: number;

                    /** Sizing currentReplicas. */
                    public currentReplicas: number;

                    /** Sizing desiredReplicas. */
                    public desiredReplicas: number;

                    /**
                     * Verifies a Sizing message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Sizing message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Sizing
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.HPA.Sizing;

                    /**
                     * Creates a plain object from a Sizing message. Also converts values to other types if specified.
                     * @param message Sizing
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.k8s.v1.HPA.Sizing, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Sizing to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a ResizeHPARequest. */
            interface IResizeHPARequest {

                /** ResizeHPARequest clientset */
                clientset?: (string|null);

                /** ResizeHPARequest cluster */
                cluster?: (string|null);

                /** ResizeHPARequest namespace */
                namespace?: (string|null);

                /** ResizeHPARequest name */
                name?: (string|null);

                /** ResizeHPARequest sizing */
                sizing?: (clutch.k8s.v1.ResizeHPARequest.ISizing|null);
            }

            /** Represents a ResizeHPARequest. */
            class ResizeHPARequest implements IResizeHPARequest {

                /**
                 * Constructs a new ResizeHPARequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IResizeHPARequest);

                /** ResizeHPARequest clientset. */
                public clientset: string;

                /** ResizeHPARequest cluster. */
                public cluster: string;

                /** ResizeHPARequest namespace. */
                public namespace: string;

                /** ResizeHPARequest name. */
                public name: string;

                /** ResizeHPARequest sizing. */
                public sizing?: (clutch.k8s.v1.ResizeHPARequest.ISizing|null);

                /**
                 * Verifies a ResizeHPARequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ResizeHPARequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ResizeHPARequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.ResizeHPARequest;

                /**
                 * Creates a plain object from a ResizeHPARequest message. Also converts values to other types if specified.
                 * @param message ResizeHPARequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.ResizeHPARequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ResizeHPARequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace ResizeHPARequest {

                /** Properties of a Sizing. */
                interface ISizing {

                    /** Sizing min */
                    min?: (number|null);

                    /** Sizing max */
                    max?: (number|null);
                }

                /** Represents a Sizing. */
                class Sizing implements ISizing {

                    /**
                     * Constructs a new Sizing.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.k8s.v1.ResizeHPARequest.ISizing);

                    /** Sizing min. */
                    public min: number;

                    /** Sizing max. */
                    public max: number;

                    /**
                     * Verifies a Sizing message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Sizing message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Sizing
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.ResizeHPARequest.Sizing;

                    /**
                     * Creates a plain object from a Sizing message. Also converts values to other types if specified.
                     * @param message Sizing
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.k8s.v1.ResizeHPARequest.Sizing, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Sizing to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a ResizeHPAResponse. */
            interface IResizeHPAResponse {
            }

            /** Represents a ResizeHPAResponse. */
            class ResizeHPAResponse implements IResizeHPAResponse {

                /**
                 * Constructs a new ResizeHPAResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IResizeHPAResponse);

                /**
                 * Verifies a ResizeHPAResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ResizeHPAResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ResizeHPAResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.ResizeHPAResponse;

                /**
                 * Creates a plain object from a ResizeHPAResponse message. Also converts values to other types if specified.
                 * @param message ResizeHPAResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.ResizeHPAResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ResizeHPAResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DeleteHPARequest. */
            interface IDeleteHPARequest {

                /** DeleteHPARequest clientset */
                clientset?: (string|null);

                /** DeleteHPARequest cluster */
                cluster?: (string|null);

                /** DeleteHPARequest namespace */
                namespace?: (string|null);

                /** DeleteHPARequest name */
                name?: (string|null);
            }

            /** Represents a DeleteHPARequest. */
            class DeleteHPARequest implements IDeleteHPARequest {

                /**
                 * Constructs a new DeleteHPARequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDeleteHPARequest);

                /** DeleteHPARequest clientset. */
                public clientset: string;

                /** DeleteHPARequest cluster. */
                public cluster: string;

                /** DeleteHPARequest namespace. */
                public namespace: string;

                /** DeleteHPARequest name. */
                public name: string;

                /**
                 * Verifies a DeleteHPARequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DeleteHPARequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DeleteHPARequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DeleteHPARequest;

                /**
                 * Creates a plain object from a DeleteHPARequest message. Also converts values to other types if specified.
                 * @param message DeleteHPARequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DeleteHPARequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DeleteHPARequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DeleteHPAResponse. */
            interface IDeleteHPAResponse {
            }

            /** Represents a DeleteHPAResponse. */
            class DeleteHPAResponse implements IDeleteHPAResponse {

                /**
                 * Constructs a new DeleteHPAResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDeleteHPAResponse);

                /**
                 * Verifies a DeleteHPAResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DeleteHPAResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DeleteHPAResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DeleteHPAResponse;

                /**
                 * Creates a plain object from a DeleteHPAResponse message. Also converts values to other types if specified.
                 * @param message DeleteHPAResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DeleteHPAResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DeleteHPAResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Deployment. */
            interface IDeployment {

                /** Deployment cluster */
                cluster?: (string|null);

                /** Deployment namespace */
                namespace?: (string|null);

                /** Deployment name */
                name?: (string|null);

                /** Deployment labels */
                labels?: ({ [k: string]: string }|null);

                /** Deployment annotations */
                annotations?: ({ [k: string]: string }|null);
            }

            /** Represents a Deployment. */
            class Deployment implements IDeployment {

                /**
                 * Constructs a new Deployment.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDeployment);

                /** Deployment cluster. */
                public cluster: string;

                /** Deployment namespace. */
                public namespace: string;

                /** Deployment name. */
                public name: string;

                /** Deployment labels. */
                public labels: { [k: string]: string };

                /** Deployment annotations. */
                public annotations: { [k: string]: string };

                /**
                 * Verifies a Deployment message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Deployment message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Deployment
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.Deployment;

                /**
                 * Creates a plain object from a Deployment message. Also converts values to other types if specified.
                 * @param message Deployment
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.Deployment, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Deployment to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an UpdateDeploymentRequest. */
            interface IUpdateDeploymentRequest {

                /** UpdateDeploymentRequest clientset */
                clientset?: (string|null);

                /** UpdateDeploymentRequest cluster */
                cluster?: (string|null);

                /** UpdateDeploymentRequest namespace */
                namespace?: (string|null);

                /** UpdateDeploymentRequest name */
                name?: (string|null);

                /** UpdateDeploymentRequest fields */
                fields?: (clutch.k8s.v1.UpdateDeploymentRequest.IFields|null);
            }

            /** Represents an UpdateDeploymentRequest. */
            class UpdateDeploymentRequest implements IUpdateDeploymentRequest {

                /**
                 * Constructs a new UpdateDeploymentRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IUpdateDeploymentRequest);

                /** UpdateDeploymentRequest clientset. */
                public clientset: string;

                /** UpdateDeploymentRequest cluster. */
                public cluster: string;

                /** UpdateDeploymentRequest namespace. */
                public namespace: string;

                /** UpdateDeploymentRequest name. */
                public name: string;

                /** UpdateDeploymentRequest fields. */
                public fields?: (clutch.k8s.v1.UpdateDeploymentRequest.IFields|null);

                /**
                 * Verifies an UpdateDeploymentRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an UpdateDeploymentRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UpdateDeploymentRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.UpdateDeploymentRequest;

                /**
                 * Creates a plain object from an UpdateDeploymentRequest message. Also converts values to other types if specified.
                 * @param message UpdateDeploymentRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.UpdateDeploymentRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UpdateDeploymentRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace UpdateDeploymentRequest {

                /** Properties of a Fields. */
                interface IFields {

                    /** Fields labels */
                    labels?: ({ [k: string]: string }|null);

                    /** Fields annotations */
                    annotations?: ({ [k: string]: string }|null);
                }

                /** Represents a Fields. */
                class Fields implements IFields {

                    /**
                     * Constructs a new Fields.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.k8s.v1.UpdateDeploymentRequest.IFields);

                    /** Fields labels. */
                    public labels: { [k: string]: string };

                    /** Fields annotations. */
                    public annotations: { [k: string]: string };

                    /**
                     * Verifies a Fields message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Fields message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Fields
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.UpdateDeploymentRequest.Fields;

                    /**
                     * Creates a plain object from a Fields message. Also converts values to other types if specified.
                     * @param message Fields
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.k8s.v1.UpdateDeploymentRequest.Fields, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Fields to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of an UpdateDeploymentResponse. */
            interface IUpdateDeploymentResponse {
            }

            /** Represents an UpdateDeploymentResponse. */
            class UpdateDeploymentResponse implements IUpdateDeploymentResponse {

                /**
                 * Constructs a new UpdateDeploymentResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IUpdateDeploymentResponse);

                /**
                 * Verifies an UpdateDeploymentResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an UpdateDeploymentResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UpdateDeploymentResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.UpdateDeploymentResponse;

                /**
                 * Creates a plain object from an UpdateDeploymentResponse message. Also converts values to other types if specified.
                 * @param message UpdateDeploymentResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.UpdateDeploymentResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UpdateDeploymentResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DeleteDeploymentRequest. */
            interface IDeleteDeploymentRequest {

                /** DeleteDeploymentRequest clientset */
                clientset?: (string|null);

                /** DeleteDeploymentRequest cluster */
                cluster?: (string|null);

                /** DeleteDeploymentRequest namespace */
                namespace?: (string|null);

                /** DeleteDeploymentRequest name */
                name?: (string|null);
            }

            /** Represents a DeleteDeploymentRequest. */
            class DeleteDeploymentRequest implements IDeleteDeploymentRequest {

                /**
                 * Constructs a new DeleteDeploymentRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDeleteDeploymentRequest);

                /** DeleteDeploymentRequest clientset. */
                public clientset: string;

                /** DeleteDeploymentRequest cluster. */
                public cluster: string;

                /** DeleteDeploymentRequest namespace. */
                public namespace: string;

                /** DeleteDeploymentRequest name. */
                public name: string;

                /**
                 * Verifies a DeleteDeploymentRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DeleteDeploymentRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DeleteDeploymentRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DeleteDeploymentRequest;

                /**
                 * Creates a plain object from a DeleteDeploymentRequest message. Also converts values to other types if specified.
                 * @param message DeleteDeploymentRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DeleteDeploymentRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DeleteDeploymentRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DeleteDeploymentResponse. */
            interface IDeleteDeploymentResponse {
            }

            /** Represents a DeleteDeploymentResponse. */
            class DeleteDeploymentResponse implements IDeleteDeploymentResponse {

                /**
                 * Constructs a new DeleteDeploymentResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDeleteDeploymentResponse);

                /**
                 * Verifies a DeleteDeploymentResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DeleteDeploymentResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DeleteDeploymentResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DeleteDeploymentResponse;

                /**
                 * Creates a plain object from a DeleteDeploymentResponse message. Also converts values to other types if specified.
                 * @param message DeleteDeploymentResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DeleteDeploymentResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DeleteDeploymentResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a StatefulSet. */
            interface IStatefulSet {

                /** StatefulSet cluster */
                cluster?: (string|null);

                /** StatefulSet namespace */
                namespace?: (string|null);

                /** StatefulSet name */
                name?: (string|null);

                /** StatefulSet labels */
                labels?: ({ [k: string]: string }|null);

                /** StatefulSet annotations */
                annotations?: ({ [k: string]: string }|null);
            }

            /** Represents a StatefulSet. */
            class StatefulSet implements IStatefulSet {

                /**
                 * Constructs a new StatefulSet.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IStatefulSet);

                /** StatefulSet cluster. */
                public cluster: string;

                /** StatefulSet namespace. */
                public namespace: string;

                /** StatefulSet name. */
                public name: string;

                /** StatefulSet labels. */
                public labels: { [k: string]: string };

                /** StatefulSet annotations. */
                public annotations: { [k: string]: string };

                /**
                 * Verifies a StatefulSet message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a StatefulSet message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns StatefulSet
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.StatefulSet;

                /**
                 * Creates a plain object from a StatefulSet message. Also converts values to other types if specified.
                 * @param message StatefulSet
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.StatefulSet, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this StatefulSet to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an UpdateStatefulSetRequest. */
            interface IUpdateStatefulSetRequest {

                /** UpdateStatefulSetRequest clientset */
                clientset?: (string|null);

                /** UpdateStatefulSetRequest cluster */
                cluster?: (string|null);

                /** UpdateStatefulSetRequest namespace */
                namespace?: (string|null);

                /** UpdateStatefulSetRequest name */
                name?: (string|null);

                /** UpdateStatefulSetRequest fields */
                fields?: (clutch.k8s.v1.UpdateStatefulSetRequest.IFields|null);
            }

            /** Represents an UpdateStatefulSetRequest. */
            class UpdateStatefulSetRequest implements IUpdateStatefulSetRequest {

                /**
                 * Constructs a new UpdateStatefulSetRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IUpdateStatefulSetRequest);

                /** UpdateStatefulSetRequest clientset. */
                public clientset: string;

                /** UpdateStatefulSetRequest cluster. */
                public cluster: string;

                /** UpdateStatefulSetRequest namespace. */
                public namespace: string;

                /** UpdateStatefulSetRequest name. */
                public name: string;

                /** UpdateStatefulSetRequest fields. */
                public fields?: (clutch.k8s.v1.UpdateStatefulSetRequest.IFields|null);

                /**
                 * Verifies an UpdateStatefulSetRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an UpdateStatefulSetRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UpdateStatefulSetRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.UpdateStatefulSetRequest;

                /**
                 * Creates a plain object from an UpdateStatefulSetRequest message. Also converts values to other types if specified.
                 * @param message UpdateStatefulSetRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.UpdateStatefulSetRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UpdateStatefulSetRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace UpdateStatefulSetRequest {

                /** Properties of a Fields. */
                interface IFields {

                    /** Fields labels */
                    labels?: ({ [k: string]: string }|null);

                    /** Fields annotations */
                    annotations?: ({ [k: string]: string }|null);
                }

                /** Represents a Fields. */
                class Fields implements IFields {

                    /**
                     * Constructs a new Fields.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.k8s.v1.UpdateStatefulSetRequest.IFields);

                    /** Fields labels. */
                    public labels: { [k: string]: string };

                    /** Fields annotations. */
                    public annotations: { [k: string]: string };

                    /**
                     * Verifies a Fields message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Fields message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Fields
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.UpdateStatefulSetRequest.Fields;

                    /**
                     * Creates a plain object from a Fields message. Also converts values to other types if specified.
                     * @param message Fields
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.k8s.v1.UpdateStatefulSetRequest.Fields, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Fields to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of an UpdateStatefulSetResponse. */
            interface IUpdateStatefulSetResponse {
            }

            /** Represents an UpdateStatefulSetResponse. */
            class UpdateStatefulSetResponse implements IUpdateStatefulSetResponse {

                /**
                 * Constructs a new UpdateStatefulSetResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IUpdateStatefulSetResponse);

                /**
                 * Verifies an UpdateStatefulSetResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an UpdateStatefulSetResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UpdateStatefulSetResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.UpdateStatefulSetResponse;

                /**
                 * Creates a plain object from an UpdateStatefulSetResponse message. Also converts values to other types if specified.
                 * @param message UpdateStatefulSetResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.UpdateStatefulSetResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UpdateStatefulSetResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Service. */
            interface IService {

                /** Service cluster */
                cluster?: (string|null);

                /** Service namespace */
                namespace?: (string|null);

                /** Service name */
                name?: (string|null);

                /** Service type */
                type?: (clutch.k8s.v1.Service.Type|null);

                /** Service labels */
                labels?: ({ [k: string]: string }|null);

                /** Service annotations */
                annotations?: ({ [k: string]: string }|null);
            }

            /** Represents a Service. */
            class Service implements IService {

                /**
                 * Constructs a new Service.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IService);

                /** Service cluster. */
                public cluster: string;

                /** Service namespace. */
                public namespace: string;

                /** Service name. */
                public name: string;

                /** Service type. */
                public type: clutch.k8s.v1.Service.Type;

                /** Service labels. */
                public labels: { [k: string]: string };

                /** Service annotations. */
                public annotations: { [k: string]: string };

                /**
                 * Verifies a Service message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Service message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Service
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.Service;

                /**
                 * Creates a plain object from a Service message. Also converts values to other types if specified.
                 * @param message Service
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.Service, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Service to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Service {

                /** Type enum. */
                enum Type {
                    UNSPECIFIED = 0,
                    UNKNOWN = 1,
                    CLUSTER_IP = 2,
                    NODE_PORT = 3,
                    LOAD_BALANCER = 4,
                    EXTERNAL_NAME = 5
                }
            }

            /** Properties of a DescribeServiceRequest. */
            interface IDescribeServiceRequest {

                /** DescribeServiceRequest clientset */
                clientset?: (string|null);

                /** DescribeServiceRequest cluster */
                cluster?: (string|null);

                /** DescribeServiceRequest namespace */
                namespace?: (string|null);

                /** DescribeServiceRequest name */
                name?: (string|null);

                /** DescribeServiceRequest labels */
                labels?: ({ [k: string]: string }|null);
            }

            /** Represents a DescribeServiceRequest. */
            class DescribeServiceRequest implements IDescribeServiceRequest {

                /**
                 * Constructs a new DescribeServiceRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDescribeServiceRequest);

                /** DescribeServiceRequest clientset. */
                public clientset: string;

                /** DescribeServiceRequest cluster. */
                public cluster: string;

                /** DescribeServiceRequest namespace. */
                public namespace: string;

                /** DescribeServiceRequest name. */
                public name: string;

                /** DescribeServiceRequest labels. */
                public labels: { [k: string]: string };

                /**
                 * Verifies a DescribeServiceRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DescribeServiceRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DescribeServiceRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DescribeServiceRequest;

                /**
                 * Creates a plain object from a DescribeServiceRequest message. Also converts values to other types if specified.
                 * @param message DescribeServiceRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DescribeServiceRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DescribeServiceRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DescribeServiceResponse. */
            interface IDescribeServiceResponse {

                /** DescribeServiceResponse service */
                service?: (clutch.k8s.v1.IService|null);
            }

            /** Represents a DescribeServiceResponse. */
            class DescribeServiceResponse implements IDescribeServiceResponse {

                /**
                 * Constructs a new DescribeServiceResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDescribeServiceResponse);

                /** DescribeServiceResponse service. */
                public service?: (clutch.k8s.v1.IService|null);

                /**
                 * Verifies a DescribeServiceResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DescribeServiceResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DescribeServiceResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DescribeServiceResponse;

                /**
                 * Creates a plain object from a DescribeServiceResponse message. Also converts values to other types if specified.
                 * @param message DescribeServiceResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DescribeServiceResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DescribeServiceResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DeleteServiceRequest. */
            interface IDeleteServiceRequest {

                /** DeleteServiceRequest clientset */
                clientset?: (string|null);

                /** DeleteServiceRequest cluster */
                cluster?: (string|null);

                /** DeleteServiceRequest namespace */
                namespace?: (string|null);

                /** DeleteServiceRequest name */
                name?: (string|null);
            }

            /** Represents a DeleteServiceRequest. */
            class DeleteServiceRequest implements IDeleteServiceRequest {

                /**
                 * Constructs a new DeleteServiceRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDeleteServiceRequest);

                /** DeleteServiceRequest clientset. */
                public clientset: string;

                /** DeleteServiceRequest cluster. */
                public cluster: string;

                /** DeleteServiceRequest namespace. */
                public namespace: string;

                /** DeleteServiceRequest name. */
                public name: string;

                /**
                 * Verifies a DeleteServiceRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DeleteServiceRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DeleteServiceRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DeleteServiceRequest;

                /**
                 * Creates a plain object from a DeleteServiceRequest message. Also converts values to other types if specified.
                 * @param message DeleteServiceRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DeleteServiceRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DeleteServiceRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DeleteServiceResponse. */
            interface IDeleteServiceResponse {
            }

            /** Represents a DeleteServiceResponse. */
            class DeleteServiceResponse implements IDeleteServiceResponse {

                /**
                 * Constructs a new DeleteServiceResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDeleteServiceResponse);

                /**
                 * Verifies a DeleteServiceResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DeleteServiceResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DeleteServiceResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DeleteServiceResponse;

                /**
                 * Creates a plain object from a DeleteServiceResponse message. Also converts values to other types if specified.
                 * @param message DeleteServiceResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DeleteServiceResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DeleteServiceResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a CronJob. */
            interface ICronJob {

                /** CronJob cluster */
                cluster?: (string|null);

                /** CronJob namespace */
                namespace?: (string|null);

                /** CronJob name */
                name?: (string|null);

                /** CronJob schedule */
                schedule?: (string|null);

                /** CronJob labels */
                labels?: ({ [k: string]: string }|null);

                /** CronJob annotations */
                annotations?: ({ [k: string]: string }|null);
            }

            /** Represents a CronJob. */
            class CronJob implements ICronJob {

                /**
                 * Constructs a new CronJob.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.ICronJob);

                /** CronJob cluster. */
                public cluster: string;

                /** CronJob namespace. */
                public namespace: string;

                /** CronJob name. */
                public name: string;

                /** CronJob schedule. */
                public schedule: string;

                /** CronJob labels. */
                public labels: { [k: string]: string };

                /** CronJob annotations. */
                public annotations: { [k: string]: string };

                /**
                 * Verifies a CronJob message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CronJob message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CronJob
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.CronJob;

                /**
                 * Creates a plain object from a CronJob message. Also converts values to other types if specified.
                 * @param message CronJob
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.CronJob, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CronJob to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DescribeCronJobRequest. */
            interface IDescribeCronJobRequest {

                /** DescribeCronJobRequest clientset */
                clientset?: (string|null);

                /** DescribeCronJobRequest cluster */
                cluster?: (string|null);

                /** DescribeCronJobRequest namespace */
                namespace?: (string|null);

                /** DescribeCronJobRequest name */
                name?: (string|null);

                /** DescribeCronJobRequest labels */
                labels?: ({ [k: string]: string }|null);
            }

            /** Represents a DescribeCronJobRequest. */
            class DescribeCronJobRequest implements IDescribeCronJobRequest {

                /**
                 * Constructs a new DescribeCronJobRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDescribeCronJobRequest);

                /** DescribeCronJobRequest clientset. */
                public clientset: string;

                /** DescribeCronJobRequest cluster. */
                public cluster: string;

                /** DescribeCronJobRequest namespace. */
                public namespace: string;

                /** DescribeCronJobRequest name. */
                public name: string;

                /** DescribeCronJobRequest labels. */
                public labels: { [k: string]: string };

                /**
                 * Verifies a DescribeCronJobRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DescribeCronJobRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DescribeCronJobRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DescribeCronJobRequest;

                /**
                 * Creates a plain object from a DescribeCronJobRequest message. Also converts values to other types if specified.
                 * @param message DescribeCronJobRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DescribeCronJobRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DescribeCronJobRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DescribeCronJobResponse. */
            interface IDescribeCronJobResponse {

                /** DescribeCronJobResponse cronjob */
                cronjob?: (clutch.k8s.v1.ICronJob|null);
            }

            /** Represents a DescribeCronJobResponse. */
            class DescribeCronJobResponse implements IDescribeCronJobResponse {

                /**
                 * Constructs a new DescribeCronJobResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDescribeCronJobResponse);

                /** DescribeCronJobResponse cronjob. */
                public cronjob?: (clutch.k8s.v1.ICronJob|null);

                /**
                 * Verifies a DescribeCronJobResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DescribeCronJobResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DescribeCronJobResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DescribeCronJobResponse;

                /**
                 * Creates a plain object from a DescribeCronJobResponse message. Also converts values to other types if specified.
                 * @param message DescribeCronJobResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DescribeCronJobResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DescribeCronJobResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DeleteCronJobRequest. */
            interface IDeleteCronJobRequest {

                /** DeleteCronJobRequest clientset */
                clientset?: (string|null);

                /** DeleteCronJobRequest cluster */
                cluster?: (string|null);

                /** DeleteCronJobRequest namespace */
                namespace?: (string|null);

                /** DeleteCronJobRequest name */
                name?: (string|null);
            }

            /** Represents a DeleteCronJobRequest. */
            class DeleteCronJobRequest implements IDeleteCronJobRequest {

                /**
                 * Constructs a new DeleteCronJobRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDeleteCronJobRequest);

                /** DeleteCronJobRequest clientset. */
                public clientset: string;

                /** DeleteCronJobRequest cluster. */
                public cluster: string;

                /** DeleteCronJobRequest namespace. */
                public namespace: string;

                /** DeleteCronJobRequest name. */
                public name: string;

                /**
                 * Verifies a DeleteCronJobRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DeleteCronJobRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DeleteCronJobRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DeleteCronJobRequest;

                /**
                 * Creates a plain object from a DeleteCronJobRequest message. Also converts values to other types if specified.
                 * @param message DeleteCronJobRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DeleteCronJobRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DeleteCronJobRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DeleteCronJobResponse. */
            interface IDeleteCronJobResponse {
            }

            /** Represents a DeleteCronJobResponse. */
            class DeleteCronJobResponse implements IDeleteCronJobResponse {

                /**
                 * Constructs a new DeleteCronJobResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IDeleteCronJobResponse);

                /**
                 * Verifies a DeleteCronJobResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DeleteCronJobResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DeleteCronJobResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.DeleteCronJobResponse;

                /**
                 * Creates a plain object from a DeleteCronJobResponse message. Also converts values to other types if specified.
                 * @param message DeleteCronJobResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.DeleteCronJobResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DeleteCronJobResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a NullableString. */
            interface INullableString {

                /** NullableString null */
                "null"?: (google.protobuf.NullValue|null);

                /** NullableString value */
                value?: (string|null);
            }

            /** Represents a NullableString. */
            class NullableString implements INullableString {

                /**
                 * Constructs a new NullableString.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.INullableString);

                /** NullableString null. */
                public null: google.protobuf.NullValue;

                /** NullableString value. */
                public value: string;

                /** NullableString kind. */
                public kind?: ("null"|"value");

                /**
                 * Verifies a NullableString message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a NullableString message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns NullableString
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.NullableString;

                /**
                 * Creates a plain object from a NullableString message. Also converts values to other types if specified.
                 * @param message NullableString
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.NullableString, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this NullableString to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an ExpectedObjectMetaFields. */
            interface IExpectedObjectMetaFields {

                /** ExpectedObjectMetaFields labels */
                labels?: ({ [k: string]: clutch.k8s.v1.INullableString }|null);

                /** ExpectedObjectMetaFields annotations */
                annotations?: ({ [k: string]: clutch.k8s.v1.INullableString }|null);
            }

            /** Represents an ExpectedObjectMetaFields. */
            class ExpectedObjectMetaFields implements IExpectedObjectMetaFields {

                /**
                 * Constructs a new ExpectedObjectMetaFields.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IExpectedObjectMetaFields);

                /** ExpectedObjectMetaFields labels. */
                public labels: { [k: string]: clutch.k8s.v1.INullableString };

                /** ExpectedObjectMetaFields annotations. */
                public annotations: { [k: string]: clutch.k8s.v1.INullableString };

                /**
                 * Verifies an ExpectedObjectMetaFields message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an ExpectedObjectMetaFields message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ExpectedObjectMetaFields
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.ExpectedObjectMetaFields;

                /**
                 * Creates a plain object from an ExpectedObjectMetaFields message. Also converts values to other types if specified.
                 * @param message ExpectedObjectMetaFields
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.ExpectedObjectMetaFields, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ExpectedObjectMetaFields to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an ObjectMetaFields. */
            interface IObjectMetaFields {

                /** ObjectMetaFields labels */
                labels?: ({ [k: string]: string }|null);

                /** ObjectMetaFields annotations */
                annotations?: ({ [k: string]: string }|null);
            }

            /** Represents an ObjectMetaFields. */
            class ObjectMetaFields implements IObjectMetaFields {

                /**
                 * Constructs a new ObjectMetaFields.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IObjectMetaFields);

                /** ObjectMetaFields labels. */
                public labels: { [k: string]: string };

                /** ObjectMetaFields annotations. */
                public annotations: { [k: string]: string };

                /**
                 * Verifies an ObjectMetaFields message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an ObjectMetaFields message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ObjectMetaFields
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.ObjectMetaFields;

                /**
                 * Creates a plain object from an ObjectMetaFields message. Also converts values to other types if specified.
                 * @param message ObjectMetaFields
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.ObjectMetaFields, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ObjectMetaFields to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RemoveObjectMetaFields. */
            interface IRemoveObjectMetaFields {

                /** RemoveObjectMetaFields labels */
                labels?: (string[]|null);

                /** RemoveObjectMetaFields annotations */
                annotations?: (string[]|null);
            }

            /** Represents a RemoveObjectMetaFields. */
            class RemoveObjectMetaFields implements IRemoveObjectMetaFields {

                /**
                 * Constructs a new RemoveObjectMetaFields.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.k8s.v1.IRemoveObjectMetaFields);

                /** RemoveObjectMetaFields labels. */
                public labels: string[];

                /** RemoveObjectMetaFields annotations. */
                public annotations: string[];

                /**
                 * Verifies a RemoveObjectMetaFields message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RemoveObjectMetaFields message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RemoveObjectMetaFields
                 */
                public static fromObject(object: { [k: string]: any }): clutch.k8s.v1.RemoveObjectMetaFields;

                /**
                 * Creates a plain object from a RemoveObjectMetaFields message. Also converts values to other types if specified.
                 * @param message RemoveObjectMetaFields
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.k8s.v1.RemoveObjectMetaFields, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RemoveObjectMetaFields to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace resolver. */
    namespace resolver {

        /** Namespace aws. */
        namespace aws {

            /** Namespace v1. */
            namespace v1 {

                /** Properties of an InstanceID. */
                interface IInstanceID {

                    /** InstanceID id */
                    id?: (string|null);

                    /** InstanceID region */
                    region?: (string|null);
                }

                /** Represents an InstanceID. */
                class InstanceID implements IInstanceID {

                    /**
                     * Constructs a new InstanceID.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.resolver.aws.v1.IInstanceID);

                    /** InstanceID id. */
                    public id: string;

                    /** InstanceID region. */
                    public region: string;

                    /**
                     * Verifies an InstanceID message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an InstanceID message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns InstanceID
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.resolver.aws.v1.InstanceID;

                    /**
                     * Creates a plain object from an InstanceID message. Also converts values to other types if specified.
                     * @param message InstanceID
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.resolver.aws.v1.InstanceID, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this InstanceID to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an AutoscalingGroupName. */
                interface IAutoscalingGroupName {

                    /** AutoscalingGroupName name */
                    name?: (string|null);

                    /** AutoscalingGroupName region */
                    region?: (string|null);
                }

                /** Represents an AutoscalingGroupName. */
                class AutoscalingGroupName implements IAutoscalingGroupName {

                    /**
                     * Constructs a new AutoscalingGroupName.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.resolver.aws.v1.IAutoscalingGroupName);

                    /** AutoscalingGroupName name. */
                    public name: string;

                    /** AutoscalingGroupName region. */
                    public region: string;

                    /**
                     * Verifies an AutoscalingGroupName message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an AutoscalingGroupName message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns AutoscalingGroupName
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.resolver.aws.v1.AutoscalingGroupName;

                    /**
                     * Creates a plain object from an AutoscalingGroupName message. Also converts values to other types if specified.
                     * @param message AutoscalingGroupName
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.resolver.aws.v1.AutoscalingGroupName, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this AutoscalingGroupName to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a KinesisStreamName. */
                interface IKinesisStreamName {

                    /** KinesisStreamName name */
                    name?: (string|null);

                    /** KinesisStreamName region */
                    region?: (string|null);
                }

                /** Represents a KinesisStreamName. */
                class KinesisStreamName implements IKinesisStreamName {

                    /**
                     * Constructs a new KinesisStreamName.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.resolver.aws.v1.IKinesisStreamName);

                    /** KinesisStreamName name. */
                    public name: string;

                    /** KinesisStreamName region. */
                    public region: string;

                    /**
                     * Verifies a KinesisStreamName message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a KinesisStreamName message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns KinesisStreamName
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.resolver.aws.v1.KinesisStreamName;

                    /**
                     * Creates a plain object from a KinesisStreamName message. Also converts values to other types if specified.
                     * @param message KinesisStreamName
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.resolver.aws.v1.KinesisStreamName, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this KinesisStreamName to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }

        /** Namespace v1. */
        namespace v1 {

            /** Properties of a StringField. */
            interface IStringField {

                /** StringField placeholder */
                placeholder?: (string|null);

                /** StringField defaultValue */
                defaultValue?: (string|null);
            }

            /** Represents a StringField. */
            class StringField implements IStringField {

                /**
                 * Constructs a new StringField.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.resolver.v1.IStringField);

                /** StringField placeholder. */
                public placeholder: string;

                /** StringField defaultValue. */
                public defaultValue: string;

                /**
                 * Verifies a StringField message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a StringField message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns StringField
                 */
                public static fromObject(object: { [k: string]: any }): clutch.resolver.v1.StringField;

                /**
                 * Creates a plain object from a StringField message. Also converts values to other types if specified.
                 * @param message StringField
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.resolver.v1.StringField, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this StringField to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an Option. */
            interface IOption {

                /** Option displayName */
                displayName?: (string|null);

                /** Option stringValue */
                stringValue?: (string|null);
            }

            /** Represents an Option. */
            class Option implements IOption {

                /**
                 * Constructs a new Option.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.resolver.v1.IOption);

                /** Option displayName. */
                public displayName: string;

                /** Option stringValue. */
                public stringValue: string;

                /** Option value. */
                public value?: "stringValue";

                /**
                 * Verifies an Option message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Option message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Option
                 */
                public static fromObject(object: { [k: string]: any }): clutch.resolver.v1.Option;

                /**
                 * Creates a plain object from an Option message. Also converts values to other types if specified.
                 * @param message Option
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.resolver.v1.Option, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Option to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an OptionField. */
            interface IOptionField {

                /** OptionField includeAllOption */
                includeAllOption?: (boolean|null);

                /** OptionField includeDynamicOptions */
                includeDynamicOptions?: (string[]|null);

                /** OptionField options */
                options?: (clutch.resolver.v1.IOption[]|null);
            }

            /** Represents an OptionField. */
            class OptionField implements IOptionField {

                /**
                 * Constructs a new OptionField.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.resolver.v1.IOptionField);

                /** OptionField includeAllOption. */
                public includeAllOption: boolean;

                /** OptionField includeDynamicOptions. */
                public includeDynamicOptions: string[];

                /** OptionField options. */
                public options: clutch.resolver.v1.IOption[];

                /**
                 * Verifies an OptionField message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an OptionField message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns OptionField
                 */
                public static fromObject(object: { [k: string]: any }): clutch.resolver.v1.OptionField;

                /**
                 * Creates a plain object from an OptionField message. Also converts values to other types if specified.
                 * @param message OptionField
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.resolver.v1.OptionField, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this OptionField to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Field. */
            interface IField {

                /** Field name */
                name?: (string|null);

                /** Field metadata */
                metadata?: (clutch.resolver.v1.IFieldMetadata|null);
            }

            /** Represents a Field. */
            class Field implements IField {

                /**
                 * Constructs a new Field.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.resolver.v1.IField);

                /** Field name. */
                public name: string;

                /** Field metadata. */
                public metadata?: (clutch.resolver.v1.IFieldMetadata|null);

                /**
                 * Verifies a Field message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Field message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Field
                 */
                public static fromObject(object: { [k: string]: any }): clutch.resolver.v1.Field;

                /**
                 * Creates a plain object from a Field message. Also converts values to other types if specified.
                 * @param message Field
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.resolver.v1.Field, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Field to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a FieldMetadata. */
            interface IFieldMetadata {

                /** FieldMetadata displayName */
                displayName?: (string|null);

                /** FieldMetadata required */
                required?: (boolean|null);

                /** FieldMetadata stringField */
                stringField?: (clutch.resolver.v1.IStringField|null);

                /** FieldMetadata optionField */
                optionField?: (clutch.resolver.v1.IOptionField|null);
            }

            /** Represents a FieldMetadata. */
            class FieldMetadata implements IFieldMetadata {

                /**
                 * Constructs a new FieldMetadata.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.resolver.v1.IFieldMetadata);

                /** FieldMetadata displayName. */
                public displayName: string;

                /** FieldMetadata required. */
                public required: boolean;

                /** FieldMetadata stringField. */
                public stringField?: (clutch.resolver.v1.IStringField|null);

                /** FieldMetadata optionField. */
                public optionField?: (clutch.resolver.v1.IOptionField|null);

                /** FieldMetadata type. */
                public type?: ("stringField"|"optionField");

                /**
                 * Verifies a FieldMetadata message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a FieldMetadata message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns FieldMetadata
                 */
                public static fromObject(object: { [k: string]: any }): clutch.resolver.v1.FieldMetadata;

                /**
                 * Creates a plain object from a FieldMetadata message. Also converts values to other types if specified.
                 * @param message FieldMetadata
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.resolver.v1.FieldMetadata, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this FieldMetadata to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a SchemaMetadata. */
            interface ISchemaMetadata {

                /** SchemaMetadata displayName */
                displayName?: (string|null);

                /** SchemaMetadata searchable */
                searchable?: (boolean|null);
            }

            /** Represents a SchemaMetadata. */
            class SchemaMetadata implements ISchemaMetadata {

                /**
                 * Constructs a new SchemaMetadata.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.resolver.v1.ISchemaMetadata);

                /** SchemaMetadata displayName. */
                public displayName: string;

                /** SchemaMetadata searchable. */
                public searchable: boolean;

                /**
                 * Verifies a SchemaMetadata message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SchemaMetadata message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SchemaMetadata
                 */
                public static fromObject(object: { [k: string]: any }): clutch.resolver.v1.SchemaMetadata;

                /**
                 * Creates a plain object from a SchemaMetadata message. Also converts values to other types if specified.
                 * @param message SchemaMetadata
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.resolver.v1.SchemaMetadata, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SchemaMetadata to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Schema. */
            interface ISchema {

                /** Schema typeUrl */
                typeUrl?: (string|null);

                /** Schema metadata */
                metadata?: (clutch.resolver.v1.ISchemaMetadata|null);

                /** Schema fields */
                fields?: (clutch.resolver.v1.IField[]|null);

                /** Schema error */
                error?: (google.rpc.IStatus|null);
            }

            /** Represents a Schema. */
            class Schema implements ISchema {

                /**
                 * Constructs a new Schema.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.resolver.v1.ISchema);

                /** Schema typeUrl. */
                public typeUrl: string;

                /** Schema metadata. */
                public metadata?: (clutch.resolver.v1.ISchemaMetadata|null);

                /** Schema fields. */
                public fields: clutch.resolver.v1.IField[];

                /** Schema error. */
                public error?: (google.rpc.IStatus|null);

                /**
                 * Verifies a Schema message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Schema message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Schema
                 */
                public static fromObject(object: { [k: string]: any }): clutch.resolver.v1.Schema;

                /**
                 * Creates a plain object from a Schema message. Also converts values to other types if specified.
                 * @param message Schema
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.resolver.v1.Schema, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Schema to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Represents a ResolverAPI */
            class ResolverAPI extends $protobuf.rpc.Service {

                /**
                 * Constructs a new ResolverAPI service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Calls GetObjectSchemas.
                 * @param request GetObjectSchemasRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and GetObjectSchemasResponse
                 */
                public getObjectSchemas(request: clutch.resolver.v1.IGetObjectSchemasRequest, callback: clutch.resolver.v1.ResolverAPI.GetObjectSchemasCallback): void;

                /**
                 * Calls GetObjectSchemas.
                 * @param request GetObjectSchemasRequest message or plain object
                 * @returns Promise
                 */
                public getObjectSchemas(request: clutch.resolver.v1.IGetObjectSchemasRequest): Promise<clutch.resolver.v1.GetObjectSchemasResponse>;

                /**
                 * Calls Search.
                 * @param request SearchRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and SearchResponse
                 */
                public search(request: clutch.resolver.v1.ISearchRequest, callback: clutch.resolver.v1.ResolverAPI.SearchCallback): void;

                /**
                 * Calls Search.
                 * @param request SearchRequest message or plain object
                 * @returns Promise
                 */
                public search(request: clutch.resolver.v1.ISearchRequest): Promise<clutch.resolver.v1.SearchResponse>;

                /**
                 * Calls Resolve.
                 * @param request ResolveRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and ResolveResponse
                 */
                public resolve(request: clutch.resolver.v1.IResolveRequest, callback: clutch.resolver.v1.ResolverAPI.ResolveCallback): void;

                /**
                 * Calls Resolve.
                 * @param request ResolveRequest message or plain object
                 * @returns Promise
                 */
                public resolve(request: clutch.resolver.v1.IResolveRequest): Promise<clutch.resolver.v1.ResolveResponse>;
            }

            namespace ResolverAPI {

                /**
                 * Callback as used by {@link clutch.resolver.v1.ResolverAPI#getObjectSchemas}.
                 * @param error Error, if any
                 * @param [response] GetObjectSchemasResponse
                 */
                type GetObjectSchemasCallback = (error: (Error|null), response?: clutch.resolver.v1.GetObjectSchemasResponse) => void;

                /**
                 * Callback as used by {@link clutch.resolver.v1.ResolverAPI#search}.
                 * @param error Error, if any
                 * @param [response] SearchResponse
                 */
                type SearchCallback = (error: (Error|null), response?: clutch.resolver.v1.SearchResponse) => void;

                /**
                 * Callback as used by {@link clutch.resolver.v1.ResolverAPI#resolve}.
                 * @param error Error, if any
                 * @param [response] ResolveResponse
                 */
                type ResolveCallback = (error: (Error|null), response?: clutch.resolver.v1.ResolveResponse) => void;
            }

            /** Properties of a ResolveRequest. */
            interface IResolveRequest {

                /** ResolveRequest want */
                want?: (string|null);

                /** ResolveRequest have */
                have?: (google.protobuf.IAny|null);

                /** ResolveRequest limit */
                limit?: (number|null);
            }

            /** Represents a ResolveRequest. */
            class ResolveRequest implements IResolveRequest {

                /**
                 * Constructs a new ResolveRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.resolver.v1.IResolveRequest);

                /** ResolveRequest want. */
                public want: string;

                /** ResolveRequest have. */
                public have?: (google.protobuf.IAny|null);

                /** ResolveRequest limit. */
                public limit: number;

                /**
                 * Verifies a ResolveRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ResolveRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ResolveRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.resolver.v1.ResolveRequest;

                /**
                 * Creates a plain object from a ResolveRequest message. Also converts values to other types if specified.
                 * @param message ResolveRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.resolver.v1.ResolveRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ResolveRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ResolveResponse. */
            interface IResolveResponse {

                /** ResolveResponse results */
                results?: (google.protobuf.IAny[]|null);

                /** ResolveResponse partialFailures */
                partialFailures?: (google.rpc.IStatus[]|null);
            }

            /** Represents a ResolveResponse. */
            class ResolveResponse implements IResolveResponse {

                /**
                 * Constructs a new ResolveResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.resolver.v1.IResolveResponse);

                /** ResolveResponse results. */
                public results: google.protobuf.IAny[];

                /** ResolveResponse partialFailures. */
                public partialFailures: google.rpc.IStatus[];

                /**
                 * Verifies a ResolveResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ResolveResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ResolveResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.resolver.v1.ResolveResponse;

                /**
                 * Creates a plain object from a ResolveResponse message. Also converts values to other types if specified.
                 * @param message ResolveResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.resolver.v1.ResolveResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ResolveResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a SearchRequest. */
            interface ISearchRequest {

                /** SearchRequest want */
                want?: (string|null);

                /** SearchRequest query */
                query?: (string|null);

                /** SearchRequest limit */
                limit?: (number|null);
            }

            /** Represents a SearchRequest. */
            class SearchRequest implements ISearchRequest {

                /**
                 * Constructs a new SearchRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.resolver.v1.ISearchRequest);

                /** SearchRequest want. */
                public want: string;

                /** SearchRequest query. */
                public query: string;

                /** SearchRequest limit. */
                public limit: number;

                /**
                 * Verifies a SearchRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SearchRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SearchRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.resolver.v1.SearchRequest;

                /**
                 * Creates a plain object from a SearchRequest message. Also converts values to other types if specified.
                 * @param message SearchRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.resolver.v1.SearchRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SearchRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a SearchResponse. */
            interface ISearchResponse {

                /** SearchResponse results */
                results?: (google.protobuf.IAny[]|null);

                /** SearchResponse partialFailures */
                partialFailures?: (google.rpc.IStatus[]|null);
            }

            /** Represents a SearchResponse. */
            class SearchResponse implements ISearchResponse {

                /**
                 * Constructs a new SearchResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.resolver.v1.ISearchResponse);

                /** SearchResponse results. */
                public results: google.protobuf.IAny[];

                /** SearchResponse partialFailures. */
                public partialFailures: google.rpc.IStatus[];

                /**
                 * Verifies a SearchResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SearchResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SearchResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.resolver.v1.SearchResponse;

                /**
                 * Creates a plain object from a SearchResponse message. Also converts values to other types if specified.
                 * @param message SearchResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.resolver.v1.SearchResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SearchResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a GetObjectSchemasRequest. */
            interface IGetObjectSchemasRequest {

                /** GetObjectSchemasRequest typeUrl */
                typeUrl?: (string|null);
            }

            /** Represents a GetObjectSchemasRequest. */
            class GetObjectSchemasRequest implements IGetObjectSchemasRequest {

                /**
                 * Constructs a new GetObjectSchemasRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.resolver.v1.IGetObjectSchemasRequest);

                /** GetObjectSchemasRequest typeUrl. */
                public typeUrl: string;

                /**
                 * Verifies a GetObjectSchemasRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GetObjectSchemasRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GetObjectSchemasRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.resolver.v1.GetObjectSchemasRequest;

                /**
                 * Creates a plain object from a GetObjectSchemasRequest message. Also converts values to other types if specified.
                 * @param message GetObjectSchemasRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.resolver.v1.GetObjectSchemasRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GetObjectSchemasRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a GetObjectSchemasResponse. */
            interface IGetObjectSchemasResponse {

                /** GetObjectSchemasResponse typeUrl */
                typeUrl?: (string|null);

                /** GetObjectSchemasResponse schemas */
                schemas?: (clutch.resolver.v1.ISchema[]|null);
            }

            /** Represents a GetObjectSchemasResponse. */
            class GetObjectSchemasResponse implements IGetObjectSchemasResponse {

                /**
                 * Constructs a new GetObjectSchemasResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.resolver.v1.IGetObjectSchemasResponse);

                /** GetObjectSchemasResponse typeUrl. */
                public typeUrl: string;

                /** GetObjectSchemasResponse schemas. */
                public schemas: clutch.resolver.v1.ISchema[];

                /**
                 * Verifies a GetObjectSchemasResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GetObjectSchemasResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GetObjectSchemasResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.resolver.v1.GetObjectSchemasResponse;

                /**
                 * Creates a plain object from a GetObjectSchemasResponse message. Also converts values to other types if specified.
                 * @param message GetObjectSchemasResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.resolver.v1.GetObjectSchemasResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GetObjectSchemasResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Namespace k8s. */
        namespace k8s {

            /** Namespace v1. */
            namespace v1 {

                /** Properties of a PodID. */
                interface IPodID {

                    /** PodID name */
                    name?: (string|null);

                    /** PodID clientset */
                    clientset?: (string|null);

                    /** PodID namespace */
                    namespace?: (string|null);
                }

                /** Represents a PodID. */
                class PodID implements IPodID {

                    /**
                     * Constructs a new PodID.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.resolver.k8s.v1.IPodID);

                    /** PodID name. */
                    public name: string;

                    /** PodID clientset. */
                    public clientset: string;

                    /** PodID namespace. */
                    public namespace: string;

                    /**
                     * Verifies a PodID message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a PodID message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns PodID
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.resolver.k8s.v1.PodID;

                    /**
                     * Creates a plain object from a PodID message. Also converts values to other types if specified.
                     * @param message PodID
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.resolver.k8s.v1.PodID, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this PodID to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a IPAddress. */
                interface IIPAddress {

                    /** IPAddress ipAddress */
                    ipAddress?: (string|null);
                }

                /** Represents a IPAddress. */
                class IPAddress implements IIPAddress {

                    /**
                     * Constructs a new IPAddress.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.resolver.k8s.v1.IIPAddress);

                    /** IPAddress ipAddress. */
                    public ipAddress: string;

                    /**
                     * Verifies a IPAddress message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a IPAddress message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns IPAddress
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.resolver.k8s.v1.IPAddress;

                    /**
                     * Creates a plain object from a IPAddress message. Also converts values to other types if specified.
                     * @param message IPAddress
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.resolver.k8s.v1.IPAddress, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this IPAddress to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a HPAName. */
                interface IHPAName {

                    /** HPAName name */
                    name?: (string|null);

                    /** HPAName clientset */
                    clientset?: (string|null);

                    /** HPAName namespace */
                    namespace?: (string|null);
                }

                /** Represents a HPAName. */
                class HPAName implements IHPAName {

                    /**
                     * Constructs a new HPAName.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.resolver.k8s.v1.IHPAName);

                    /** HPAName name. */
                    public name: string;

                    /** HPAName clientset. */
                    public clientset: string;

                    /** HPAName namespace. */
                    public namespace: string;

                    /**
                     * Verifies a HPAName message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a HPAName message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns HPAName
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.resolver.k8s.v1.HPAName;

                    /**
                     * Creates a plain object from a HPAName message. Also converts values to other types if specified.
                     * @param message HPAName
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.resolver.k8s.v1.HPAName, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this HPAName to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Deployment. */
                interface IDeployment {

                    /** Deployment name */
                    name?: (string|null);

                    /** Deployment clientset */
                    clientset?: (string|null);

                    /** Deployment namespace */
                    namespace?: (string|null);
                }

                /** Represents a Deployment. */
                class Deployment implements IDeployment {

                    /**
                     * Constructs a new Deployment.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.resolver.k8s.v1.IDeployment);

                    /** Deployment name. */
                    public name: string;

                    /** Deployment clientset. */
                    public clientset: string;

                    /** Deployment namespace. */
                    public namespace: string;

                    /**
                     * Verifies a Deployment message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Deployment message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Deployment
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.resolver.k8s.v1.Deployment;

                    /**
                     * Creates a plain object from a Deployment message. Also converts values to other types if specified.
                     * @param message Deployment
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.resolver.k8s.v1.Deployment, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Deployment to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a StatefulSet. */
                interface IStatefulSet {

                    /** StatefulSet name */
                    name?: (string|null);

                    /** StatefulSet clientset */
                    clientset?: (string|null);

                    /** StatefulSet namespace */
                    namespace?: (string|null);
                }

                /** Represents a StatefulSet. */
                class StatefulSet implements IStatefulSet {

                    /**
                     * Constructs a new StatefulSet.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.resolver.k8s.v1.IStatefulSet);

                    /** StatefulSet name. */
                    public name: string;

                    /** StatefulSet clientset. */
                    public clientset: string;

                    /** StatefulSet namespace. */
                    public namespace: string;

                    /**
                     * Verifies a StatefulSet message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a StatefulSet message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns StatefulSet
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.resolver.k8s.v1.StatefulSet;

                    /**
                     * Creates a plain object from a StatefulSet message. Also converts values to other types if specified.
                     * @param message StatefulSet
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.resolver.k8s.v1.StatefulSet, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this StatefulSet to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Service. */
                interface IService {

                    /** Service name */
                    name?: (string|null);

                    /** Service clientset */
                    clientset?: (string|null);

                    /** Service namespace */
                    namespace?: (string|null);
                }

                /** Represents a Service. */
                class Service implements IService {

                    /**
                     * Constructs a new Service.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.resolver.k8s.v1.IService);

                    /** Service name. */
                    public name: string;

                    /** Service clientset. */
                    public clientset: string;

                    /** Service namespace. */
                    public namespace: string;

                    /**
                     * Verifies a Service message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Service message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Service
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.resolver.k8s.v1.Service;

                    /**
                     * Creates a plain object from a Service message. Also converts values to other types if specified.
                     * @param message Service
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.resolver.k8s.v1.Service, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Service to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a CronJob. */
                interface ICronJob {

                    /** CronJob name */
                    name?: (string|null);

                    /** CronJob clientset */
                    clientset?: (string|null);

                    /** CronJob namespace */
                    namespace?: (string|null);
                }

                /** Represents a CronJob. */
                class CronJob implements ICronJob {

                    /**
                     * Constructs a new CronJob.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.resolver.k8s.v1.ICronJob);

                    /** CronJob name. */
                    public name: string;

                    /** CronJob clientset. */
                    public clientset: string;

                    /** CronJob namespace. */
                    public namespace: string;

                    /**
                     * Verifies a CronJob message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CronJob message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CronJob
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.resolver.k8s.v1.CronJob;

                    /**
                     * Creates a plain object from a CronJob message. Also converts values to other types if specified.
                     * @param message CronJob
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.resolver.k8s.v1.CronJob, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CronJob to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }
    }

    /** Namespace sourcecontrol. */
    namespace sourcecontrol {

        /** Namespace github. */
        namespace github {

            /** Namespace v1. */
            namespace v1 {

                /** Properties of a RepositoryParameters. */
                interface IRepositoryParameters {

                    /** RepositoryParameters visibility */
                    visibility?: (clutch.sourcecontrol.github.v1.RepositoryParameters.Visibility|null);

                    /** RepositoryParameters allowMergeCommit */
                    allowMergeCommit?: (google.protobuf.IBoolValue|null);

                    /** RepositoryParameters allowRebaseMerge */
                    allowRebaseMerge?: (google.protobuf.IBoolValue|null);

                    /** RepositoryParameters allowSquashMerge */
                    allowSquashMerge?: (google.protobuf.IBoolValue|null);
                }

                /** Represents a RepositoryParameters. */
                class RepositoryParameters implements IRepositoryParameters {

                    /**
                     * Constructs a new RepositoryParameters.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.sourcecontrol.github.v1.IRepositoryParameters);

                    /** RepositoryParameters visibility. */
                    public visibility: clutch.sourcecontrol.github.v1.RepositoryParameters.Visibility;

                    /** RepositoryParameters allowMergeCommit. */
                    public allowMergeCommit?: (google.protobuf.IBoolValue|null);

                    /** RepositoryParameters allowRebaseMerge. */
                    public allowRebaseMerge?: (google.protobuf.IBoolValue|null);

                    /** RepositoryParameters allowSquashMerge. */
                    public allowSquashMerge?: (google.protobuf.IBoolValue|null);

                    /**
                     * Verifies a RepositoryParameters message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a RepositoryParameters message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns RepositoryParameters
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.sourcecontrol.github.v1.RepositoryParameters;

                    /**
                     * Creates a plain object from a RepositoryParameters message. Also converts values to other types if specified.
                     * @param message RepositoryParameters
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.sourcecontrol.github.v1.RepositoryParameters, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this RepositoryParameters to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace RepositoryParameters {

                    /** Visibility enum. */
                    enum Visibility {
                        UNSPECIFIED = 0,
                        PUBLIC = 1,
                        PRIVATE = 2
                    }
                }

                /** Properties of a CreateRepositoryOptions. */
                interface ICreateRepositoryOptions {

                    /** CreateRepositoryOptions parameters */
                    parameters?: (clutch.sourcecontrol.github.v1.IRepositoryParameters|null);

                    /** CreateRepositoryOptions autoInit */
                    autoInit?: (boolean|null);
                }

                /** Represents a CreateRepositoryOptions. */
                class CreateRepositoryOptions implements ICreateRepositoryOptions {

                    /**
                     * Constructs a new CreateRepositoryOptions.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.sourcecontrol.github.v1.ICreateRepositoryOptions);

                    /** CreateRepositoryOptions parameters. */
                    public parameters?: (clutch.sourcecontrol.github.v1.IRepositoryParameters|null);

                    /** CreateRepositoryOptions autoInit. */
                    public autoInit: boolean;

                    /**
                     * Verifies a CreateRepositoryOptions message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CreateRepositoryOptions message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CreateRepositoryOptions
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.sourcecontrol.github.v1.CreateRepositoryOptions;

                    /**
                     * Creates a plain object from a CreateRepositoryOptions message. Also converts values to other types if specified.
                     * @param message CreateRepositoryOptions
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.sourcecontrol.github.v1.CreateRepositoryOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CreateRepositoryOptions to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an UpdateRepositoryOptions. */
                interface IUpdateRepositoryOptions {

                    /** UpdateRepositoryOptions parameters */
                    parameters?: (clutch.sourcecontrol.github.v1.IRepositoryParameters|null);

                    /** UpdateRepositoryOptions archived */
                    archived?: (boolean|null);
                }

                /** Represents an UpdateRepositoryOptions. */
                class UpdateRepositoryOptions implements IUpdateRepositoryOptions {

                    /**
                     * Constructs a new UpdateRepositoryOptions.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.sourcecontrol.github.v1.IUpdateRepositoryOptions);

                    /** UpdateRepositoryOptions parameters. */
                    public parameters?: (clutch.sourcecontrol.github.v1.IRepositoryParameters|null);

                    /** UpdateRepositoryOptions archived. */
                    public archived: boolean;

                    /**
                     * Verifies an UpdateRepositoryOptions message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an UpdateRepositoryOptions message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns UpdateRepositoryOptions
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.sourcecontrol.github.v1.UpdateRepositoryOptions;

                    /**
                     * Creates a plain object from an UpdateRepositoryOptions message. Also converts values to other types if specified.
                     * @param message UpdateRepositoryOptions
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.sourcecontrol.github.v1.UpdateRepositoryOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this UpdateRepositoryOptions to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** CommitCompareStatus enum. */
                enum CommitCompareStatus {
                    UNSPECIFIED = 0,
                    UNKNOWN = 1,
                    BEHIND = 2,
                    AHEAD = 3,
                    IDENTICAL = 4
                }

                /** Properties of a CommitComparison. */
                interface ICommitComparison {

                    /** CommitComparison status */
                    status?: (clutch.sourcecontrol.github.v1.CommitCompareStatus|null);
                }

                /** Represents a CommitComparison. */
                class CommitComparison implements ICommitComparison {

                    /**
                     * Constructs a new CommitComparison.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: clutch.sourcecontrol.github.v1.ICommitComparison);

                    /** CommitComparison status. */
                    public status: clutch.sourcecontrol.github.v1.CommitCompareStatus;

                    /**
                     * Verifies a CommitComparison message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CommitComparison message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CommitComparison
                     */
                    public static fromObject(object: { [k: string]: any }): clutch.sourcecontrol.github.v1.CommitComparison;

                    /**
                     * Creates a plain object from a CommitComparison message. Also converts values to other types if specified.
                     * @param message CommitComparison
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: clutch.sourcecontrol.github.v1.CommitComparison, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CommitComparison to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }

        /** Namespace v1. */
        namespace v1 {

            /** Represents a SourceControlAPI */
            class SourceControlAPI extends $protobuf.rpc.Service {

                /**
                 * Constructs a new SourceControlAPI service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Calls CreateRepository.
                 * @param request CreateRepositoryRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and CreateRepositoryResponse
                 */
                public createRepository(request: clutch.sourcecontrol.v1.ICreateRepositoryRequest, callback: clutch.sourcecontrol.v1.SourceControlAPI.CreateRepositoryCallback): void;

                /**
                 * Calls CreateRepository.
                 * @param request CreateRepositoryRequest message or plain object
                 * @returns Promise
                 */
                public createRepository(request: clutch.sourcecontrol.v1.ICreateRepositoryRequest): Promise<clutch.sourcecontrol.v1.CreateRepositoryResponse>;
            }

            namespace SourceControlAPI {

                /**
                 * Callback as used by {@link clutch.sourcecontrol.v1.SourceControlAPI#createRepository}.
                 * @param error Error, if any
                 * @param [response] CreateRepositoryResponse
                 */
                type CreateRepositoryCallback = (error: (Error|null), response?: clutch.sourcecontrol.v1.CreateRepositoryResponse) => void;
            }

            /** Properties of a CreateRepositoryRequest. */
            interface ICreateRepositoryRequest {

                /** CreateRepositoryRequest owner */
                owner?: (string|null);

                /** CreateRepositoryRequest name */
                name?: (string|null);

                /** CreateRepositoryRequest description */
                description?: (string|null);

                /** CreateRepositoryRequest customOptions */
                customOptions?: (google.protobuf.IAny|null);

                /** CreateRepositoryRequest githubOptions */
                githubOptions?: (clutch.sourcecontrol.github.v1.ICreateRepositoryOptions|null);
            }

            /** Represents a CreateRepositoryRequest. */
            class CreateRepositoryRequest implements ICreateRepositoryRequest {

                /**
                 * Constructs a new CreateRepositoryRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.sourcecontrol.v1.ICreateRepositoryRequest);

                /** CreateRepositoryRequest owner. */
                public owner: string;

                /** CreateRepositoryRequest name. */
                public name: string;

                /** CreateRepositoryRequest description. */
                public description: string;

                /** CreateRepositoryRequest customOptions. */
                public customOptions?: (google.protobuf.IAny|null);

                /** CreateRepositoryRequest githubOptions. */
                public githubOptions?: (clutch.sourcecontrol.github.v1.ICreateRepositoryOptions|null);

                /** CreateRepositoryRequest options. */
                public options?: ("customOptions"|"githubOptions");

                /**
                 * Verifies a CreateRepositoryRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CreateRepositoryRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CreateRepositoryRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.sourcecontrol.v1.CreateRepositoryRequest;

                /**
                 * Creates a plain object from a CreateRepositoryRequest message. Also converts values to other types if specified.
                 * @param message CreateRepositoryRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.sourcecontrol.v1.CreateRepositoryRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CreateRepositoryRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a CreateRepositoryResponse. */
            interface ICreateRepositoryResponse {

                /** CreateRepositoryResponse url */
                url?: (string|null);
            }

            /** Represents a CreateRepositoryResponse. */
            class CreateRepositoryResponse implements ICreateRepositoryResponse {

                /**
                 * Constructs a new CreateRepositoryResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.sourcecontrol.v1.ICreateRepositoryResponse);

                /** CreateRepositoryResponse url. */
                public url: string;

                /**
                 * Verifies a CreateRepositoryResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CreateRepositoryResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CreateRepositoryResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.sourcecontrol.v1.CreateRepositoryResponse;

                /**
                 * Creates a plain object from a CreateRepositoryResponse message. Also converts values to other types if specified.
                 * @param message CreateRepositoryResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.sourcecontrol.v1.CreateRepositoryResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CreateRepositoryResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace topology. */
    namespace topology {

        /** Namespace v1. */
        namespace v1 {

            /** Represents a TopologyAPI */
            class TopologyAPI extends $protobuf.rpc.Service {

                /**
                 * Constructs a new TopologyAPI service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Calls GetTopology.
                 * @param request GetTopologyRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and GetTopologyResponse
                 */
                public getTopology(request: clutch.topology.v1.IGetTopologyRequest, callback: clutch.topology.v1.TopologyAPI.GetTopologyCallback): void;

                /**
                 * Calls GetTopology.
                 * @param request GetTopologyRequest message or plain object
                 * @returns Promise
                 */
                public getTopology(request: clutch.topology.v1.IGetTopologyRequest): Promise<clutch.topology.v1.GetTopologyResponse>;
            }

            namespace TopologyAPI {

                /**
                 * Callback as used by {@link clutch.topology.v1.TopologyAPI#getTopology}.
                 * @param error Error, if any
                 * @param [response] GetTopologyResponse
                 */
                type GetTopologyCallback = (error: (Error|null), response?: clutch.topology.v1.GetTopologyResponse) => void;
            }

            /** Properties of a GetTopologyRequest. */
            interface IGetTopologyRequest {

                /** GetTopologyRequest queries */
                queries?: (clutch.topology.v1.IQuery[]|null);
            }

            /** Represents a GetTopologyRequest. */
            class GetTopologyRequest implements IGetTopologyRequest {

                /**
                 * Constructs a new GetTopologyRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.topology.v1.IGetTopologyRequest);

                /** GetTopologyRequest queries. */
                public queries: clutch.topology.v1.IQuery[];

                /**
                 * Verifies a GetTopologyRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GetTopologyRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GetTopologyRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.topology.v1.GetTopologyRequest;

                /**
                 * Creates a plain object from a GetTopologyRequest message. Also converts values to other types if specified.
                 * @param message GetTopologyRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.topology.v1.GetTopologyRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GetTopologyRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a GetTopologyResponse. */
            interface IGetTopologyResponse {

                /** GetTopologyResponse results */
                results?: (clutch.topology.v1.IQueryResult[]|null);
            }

            /** Represents a GetTopologyResponse. */
            class GetTopologyResponse implements IGetTopologyResponse {

                /**
                 * Constructs a new GetTopologyResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.topology.v1.IGetTopologyResponse);

                /** GetTopologyResponse results. */
                public results: clutch.topology.v1.IQueryResult[];

                /**
                 * Verifies a GetTopologyResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GetTopologyResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GetTopologyResponse
                 */
                public static fromObject(object: { [k: string]: any }): clutch.topology.v1.GetTopologyResponse;

                /**
                 * Creates a plain object from a GetTopologyResponse message. Also converts values to other types if specified.
                 * @param message GetTopologyResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.topology.v1.GetTopologyResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GetTopologyResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a FeatureQuery. */
            interface IFeatureQuery {

                /** FeatureQuery name */
                name?: (string|null);

                /** FeatureQuery values */
                values?: (string[]|null);
            }

            /** Represents a FeatureQuery. */
            class FeatureQuery implements IFeatureQuery {

                /**
                 * Constructs a new FeatureQuery.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.topology.v1.IFeatureQuery);

                /** FeatureQuery name. */
                public name: string;

                /** FeatureQuery values. */
                public values: string[];

                /**
                 * Verifies a FeatureQuery message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a FeatureQuery message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns FeatureQuery
                 */
                public static fromObject(object: { [k: string]: any }): clutch.topology.v1.FeatureQuery;

                /**
                 * Creates a plain object from a FeatureQuery message. Also converts values to other types if specified.
                 * @param message FeatureQuery
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.topology.v1.FeatureQuery, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this FeatureQuery to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Constraint. */
            interface IConstraint {

                /** Constraint operator */
                operator?: (clutch.topology.v1.Constraint.Operator|null);

                /** Constraint value */
                value?: (google.protobuf.IValue|null);
            }

            /** Represents a Constraint. */
            class Constraint implements IConstraint {

                /**
                 * Constructs a new Constraint.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.topology.v1.IConstraint);

                /** Constraint operator. */
                public operator: clutch.topology.v1.Constraint.Operator;

                /** Constraint value. */
                public value?: (google.protobuf.IValue|null);

                /**
                 * Verifies a Constraint message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Constraint message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Constraint
                 */
                public static fromObject(object: { [k: string]: any }): clutch.topology.v1.Constraint;

                /**
                 * Creates a plain object from a Constraint message. Also converts values to other types if specified.
                 * @param message Constraint
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.topology.v1.Constraint, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Constraint to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Constraint {

                /** Operator enum. */
                enum Operator {
                    UNSPECIFIED = 0,
                    EQUAL = 1,
                    NOT_EQUAL = 2,
                    GREATER_THAN = 3,
                    GREATER_THAN_OR_EQUAL = 4,
                    LESS_THAN = 5,
                    LESS_THAN_OR_EQUAL = 6,
                    CONTAINS_STRING = 7,
                    CONTAINS_VALUE = 8,
                    CONTAINS_KEY = 9
                }
            }

            /** Properties of a MetadataQuery. */
            interface IMetadataQuery {

                /** MetadataQuery name */
                name?: (string|null);

                /** MetadataQuery params */
                params?: (google.protobuf.IStruct|null);

                /** MetadataQuery aggregation */
                aggregation?: (clutch.topology.v1.MetadataQuery.Aggregation|null);

                /** MetadataQuery constraints */
                constraints?: (clutch.topology.v1.IConstraint[]|null);
            }

            /** Represents a MetadataQuery. */
            class MetadataQuery implements IMetadataQuery {

                /**
                 * Constructs a new MetadataQuery.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.topology.v1.IMetadataQuery);

                /** MetadataQuery name. */
                public name: string;

                /** MetadataQuery params. */
                public params?: (google.protobuf.IStruct|null);

                /** MetadataQuery aggregation. */
                public aggregation: clutch.topology.v1.MetadataQuery.Aggregation;

                /** MetadataQuery constraints. */
                public constraints: clutch.topology.v1.IConstraint[];

                /**
                 * Verifies a MetadataQuery message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MetadataQuery message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MetadataQuery
                 */
                public static fromObject(object: { [k: string]: any }): clutch.topology.v1.MetadataQuery;

                /**
                 * Creates a plain object from a MetadataQuery message. Also converts values to other types if specified.
                 * @param message MetadataQuery
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.topology.v1.MetadataQuery, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MetadataQuery to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace MetadataQuery {

                /** Aggregation enum. */
                enum Aggregation {
                    UNSPECIFIED = 0,
                    SUM = 1,
                    AVERAGE = 2,
                    MEDIAN = 3,
                    MODE = 4,
                    MIN = 5,
                    MAX = 6,
                    COUNT = 7
                }
            }

            /** Properties of a Query. */
            interface IQuery {

                /** Query features */
                features?: (clutch.topology.v1.IFeatureQuery[]|null);

                /** Query nodeMetadata */
                nodeMetadata?: (clutch.topology.v1.IMetadataQuery[]|null);

                /** Query edgeMetadata */
                edgeMetadata?: (clutch.topology.v1.IMetadataQuery[]|null);

                /** Query sourceDepth */
                sourceDepth?: (number|null);

                /** Query targetDepth */
                targetDepth?: (number|null);
            }

            /** Represents a Query. */
            class Query implements IQuery {

                /**
                 * Constructs a new Query.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.topology.v1.IQuery);

                /** Query features. */
                public features: clutch.topology.v1.IFeatureQuery[];

                /** Query nodeMetadata. */
                public nodeMetadata: clutch.topology.v1.IMetadataQuery[];

                /** Query edgeMetadata. */
                public edgeMetadata: clutch.topology.v1.IMetadataQuery[];

                /** Query sourceDepth. */
                public sourceDepth: number;

                /** Query targetDepth. */
                public targetDepth: number;

                /**
                 * Verifies a Query message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Query message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Query
                 */
                public static fromObject(object: { [k: string]: any }): clutch.topology.v1.Query;

                /**
                 * Creates a plain object from a Query message. Also converts values to other types if specified.
                 * @param message Query
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.topology.v1.Query, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Query to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a QueryResult. */
            interface IQueryResult {

                /** QueryResult status */
                status?: (google.rpc.IStatus|null);

                /** QueryResult query */
                query?: (clutch.topology.v1.IQuery|null);

                /** QueryResult matchedNodeIds */
                matchedNodeIds?: (string[]|null);

                /** QueryResult nodes */
                nodes?: ({ [k: string]: clutch.topology.v1.INode }|null);

                /** QueryResult edges */
                edges?: ({ [k: string]: clutch.topology.v1.IEdge }|null);
            }

            /** Represents a QueryResult. */
            class QueryResult implements IQueryResult {

                /**
                 * Constructs a new QueryResult.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.topology.v1.IQueryResult);

                /** QueryResult status. */
                public status?: (google.rpc.IStatus|null);

                /** QueryResult query. */
                public query?: (clutch.topology.v1.IQuery|null);

                /** QueryResult matchedNodeIds. */
                public matchedNodeIds: string[];

                /** QueryResult nodes. */
                public nodes: { [k: string]: clutch.topology.v1.INode };

                /** QueryResult edges. */
                public edges: { [k: string]: clutch.topology.v1.IEdge };

                /**
                 * Verifies a QueryResult message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a QueryResult message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns QueryResult
                 */
                public static fromObject(object: { [k: string]: any }): clutch.topology.v1.QueryResult;

                /**
                 * Creates a plain object from a QueryResult message. Also converts values to other types if specified.
                 * @param message QueryResult
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.topology.v1.QueryResult, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this QueryResult to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Node. */
            interface INode {

                /** Node id */
                id?: (string|null);

                /** Node features */
                features?: ({ [k: string]: string }|null);

                /** Node metadata */
                metadata?: ({ [k: string]: google.protobuf.IValue }|null);
            }

            /** Represents a Node. */
            class Node implements INode {

                /**
                 * Constructs a new Node.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.topology.v1.INode);

                /** Node id. */
                public id: string;

                /** Node features. */
                public features: { [k: string]: string };

                /** Node metadata. */
                public metadata: { [k: string]: google.protobuf.IValue };

                /**
                 * Verifies a Node message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Node message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Node
                 */
                public static fromObject(object: { [k: string]: any }): clutch.topology.v1.Node;

                /**
                 * Creates a plain object from a Node message. Also converts values to other types if specified.
                 * @param message Node
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.topology.v1.Node, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Node to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an Edge. */
            interface IEdge {

                /** Edge id */
                id?: (string|null);

                /** Edge sourceNodeId */
                sourceNodeId?: (string|null);

                /** Edge targetNodeId */
                targetNodeId?: (string|null);

                /** Edge metadata */
                metadata?: ({ [k: string]: google.protobuf.IValue }|null);
            }

            /** Represents an Edge. */
            class Edge implements IEdge {

                /**
                 * Constructs a new Edge.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.topology.v1.IEdge);

                /** Edge id. */
                public id: string;

                /** Edge sourceNodeId. */
                public sourceNodeId: string;

                /** Edge targetNodeId. */
                public targetNodeId: string;

                /** Edge metadata. */
                public metadata: { [k: string]: google.protobuf.IValue };

                /**
                 * Verifies an Edge message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Edge message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Edge
                 */
                public static fromObject(object: { [k: string]: any }): clutch.topology.v1.Edge;

                /**
                 * Creates a plain object from an Edge message. Also converts values to other types if specified.
                 * @param message Edge
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.topology.v1.Edge, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Edge to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Resource. */
            interface IResource {

                /** Resource id */
                id?: (string|null);

                /** Resource pb */
                pb?: (google.protobuf.IAny|null);

                /** Resource metadata */
                metadata?: ({ [k: string]: string }|null);
            }

            /** Represents a Resource. */
            class Resource implements IResource {

                /**
                 * Constructs a new Resource.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.topology.v1.IResource);

                /** Resource id. */
                public id: string;

                /** Resource pb. */
                public pb?: (google.protobuf.IAny|null);

                /** Resource metadata. */
                public metadata: { [k: string]: string };

                /**
                 * Verifies a Resource message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Resource message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Resource
                 */
                public static fromObject(object: { [k: string]: any }): clutch.topology.v1.Resource;

                /**
                 * Creates a plain object from a Resource message. Also converts values to other types if specified.
                 * @param message Resource
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.topology.v1.Resource, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Resource to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an UpdateCacheRequest. */
            interface IUpdateCacheRequest {

                /** UpdateCacheRequest resource */
                resource?: (clutch.topology.v1.IResource|null);

                /** UpdateCacheRequest action */
                action?: (clutch.topology.v1.UpdateCacheRequest.Action|null);
            }

            /** Represents an UpdateCacheRequest. */
            class UpdateCacheRequest implements IUpdateCacheRequest {

                /**
                 * Constructs a new UpdateCacheRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: clutch.topology.v1.IUpdateCacheRequest);

                /** UpdateCacheRequest resource. */
                public resource?: (clutch.topology.v1.IResource|null);

                /** UpdateCacheRequest action. */
                public action: clutch.topology.v1.UpdateCacheRequest.Action;

                /**
                 * Verifies an UpdateCacheRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an UpdateCacheRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UpdateCacheRequest
                 */
                public static fromObject(object: { [k: string]: any }): clutch.topology.v1.UpdateCacheRequest;

                /**
                 * Creates a plain object from an UpdateCacheRequest message. Also converts values to other types if specified.
                 * @param message UpdateCacheRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: clutch.topology.v1.UpdateCacheRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UpdateCacheRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace UpdateCacheRequest {

                /** Action enum. */
                enum Action {
                    UNSPECIFIED = 0,
                    CREATE_OR_UPDATE = 1,
                    DELETE = 2
                }
            }
        }
    }
}

/** Namespace validate. */
export namespace validate {

    /** Properties of a FieldRules. */
    interface IFieldRules {

        /** FieldRules message */
        message?: (validate.IMessageRules|null);

        /** FieldRules float */
        float?: (validate.IFloatRules|null);

        /** FieldRules double */
        double?: (validate.IDoubleRules|null);

        /** FieldRules int32 */
        int32?: (validate.IInt32Rules|null);

        /** FieldRules int64 */
        int64?: (validate.IInt64Rules|null);

        /** FieldRules uint32 */
        uint32?: (validate.IUInt32Rules|null);

        /** FieldRules uint64 */
        uint64?: (validate.IUInt64Rules|null);

        /** FieldRules sint32 */
        sint32?: (validate.ISInt32Rules|null);

        /** FieldRules sint64 */
        sint64?: (validate.ISInt64Rules|null);

        /** FieldRules fixed32 */
        fixed32?: (validate.IFixed32Rules|null);

        /** FieldRules fixed64 */
        fixed64?: (validate.IFixed64Rules|null);

        /** FieldRules sfixed32 */
        sfixed32?: (validate.ISFixed32Rules|null);

        /** FieldRules sfixed64 */
        sfixed64?: (validate.ISFixed64Rules|null);

        /** FieldRules bool */
        bool?: (validate.IBoolRules|null);

        /** FieldRules string */
        string?: (validate.IStringRules|null);

        /** FieldRules bytes */
        bytes?: (validate.IBytesRules|null);

        /** FieldRules enum */
        "enum"?: (validate.IEnumRules|null);

        /** FieldRules repeated */
        repeated?: (validate.IRepeatedRules|null);

        /** FieldRules map */
        map?: (validate.IMapRules|null);

        /** FieldRules any */
        any?: (validate.IAnyRules|null);

        /** FieldRules duration */
        duration?: (validate.IDurationRules|null);

        /** FieldRules timestamp */
        timestamp?: (validate.ITimestampRules|null);
    }

    /** Represents a FieldRules. */
    class FieldRules implements IFieldRules {

        /**
         * Constructs a new FieldRules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IFieldRules);

        /** FieldRules message. */
        public message?: (validate.IMessageRules|null);

        /** FieldRules float. */
        public float?: (validate.IFloatRules|null);

        /** FieldRules double. */
        public double?: (validate.IDoubleRules|null);

        /** FieldRules int32. */
        public int32?: (validate.IInt32Rules|null);

        /** FieldRules int64. */
        public int64?: (validate.IInt64Rules|null);

        /** FieldRules uint32. */
        public uint32?: (validate.IUInt32Rules|null);

        /** FieldRules uint64. */
        public uint64?: (validate.IUInt64Rules|null);

        /** FieldRules sint32. */
        public sint32?: (validate.ISInt32Rules|null);

        /** FieldRules sint64. */
        public sint64?: (validate.ISInt64Rules|null);

        /** FieldRules fixed32. */
        public fixed32?: (validate.IFixed32Rules|null);

        /** FieldRules fixed64. */
        public fixed64?: (validate.IFixed64Rules|null);

        /** FieldRules sfixed32. */
        public sfixed32?: (validate.ISFixed32Rules|null);

        /** FieldRules sfixed64. */
        public sfixed64?: (validate.ISFixed64Rules|null);

        /** FieldRules bool. */
        public bool?: (validate.IBoolRules|null);

        /** FieldRules string. */
        public string?: (validate.IStringRules|null);

        /** FieldRules bytes. */
        public bytes?: (validate.IBytesRules|null);

        /** FieldRules enum. */
        public enum?: (validate.IEnumRules|null);

        /** FieldRules repeated. */
        public repeated?: (validate.IRepeatedRules|null);

        /** FieldRules map. */
        public map?: (validate.IMapRules|null);

        /** FieldRules any. */
        public any?: (validate.IAnyRules|null);

        /** FieldRules duration. */
        public duration?: (validate.IDurationRules|null);

        /** FieldRules timestamp. */
        public timestamp?: (validate.ITimestampRules|null);

        /** FieldRules type. */
        public type?: ("float"|"double"|"int32"|"int64"|"uint32"|"uint64"|"sint32"|"sint64"|"fixed32"|"fixed64"|"sfixed32"|"sfixed64"|"bool"|"string"|"bytes"|"enum"|"repeated"|"map"|"any"|"duration"|"timestamp");

        /**
         * Verifies a FieldRules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a FieldRules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns FieldRules
         */
        public static fromObject(object: { [k: string]: any }): validate.FieldRules;

        /**
         * Creates a plain object from a FieldRules message. Also converts values to other types if specified.
         * @param message FieldRules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.FieldRules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this FieldRules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a FloatRules. */
    interface IFloatRules {

        /** FloatRules const */
        "const"?: (number|null);

        /** FloatRules lt */
        lt?: (number|null);

        /** FloatRules lte */
        lte?: (number|null);

        /** FloatRules gt */
        gt?: (number|null);

        /** FloatRules gte */
        gte?: (number|null);

        /** FloatRules in */
        "in"?: (number[]|null);

        /** FloatRules notIn */
        notIn?: (number[]|null);
    }

    /** Represents a FloatRules. */
    class FloatRules implements IFloatRules {

        /**
         * Constructs a new FloatRules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IFloatRules);

        /** FloatRules const. */
        public const: number;

        /** FloatRules lt. */
        public lt: number;

        /** FloatRules lte. */
        public lte: number;

        /** FloatRules gt. */
        public gt: number;

        /** FloatRules gte. */
        public gte: number;

        /** FloatRules in. */
        public in: number[];

        /** FloatRules notIn. */
        public notIn: number[];

        /**
         * Verifies a FloatRules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a FloatRules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns FloatRules
         */
        public static fromObject(object: { [k: string]: any }): validate.FloatRules;

        /**
         * Creates a plain object from a FloatRules message. Also converts values to other types if specified.
         * @param message FloatRules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.FloatRules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this FloatRules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a DoubleRules. */
    interface IDoubleRules {

        /** DoubleRules const */
        "const"?: (number|null);

        /** DoubleRules lt */
        lt?: (number|null);

        /** DoubleRules lte */
        lte?: (number|null);

        /** DoubleRules gt */
        gt?: (number|null);

        /** DoubleRules gte */
        gte?: (number|null);

        /** DoubleRules in */
        "in"?: (number[]|null);

        /** DoubleRules notIn */
        notIn?: (number[]|null);
    }

    /** Represents a DoubleRules. */
    class DoubleRules implements IDoubleRules {

        /**
         * Constructs a new DoubleRules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IDoubleRules);

        /** DoubleRules const. */
        public const: number;

        /** DoubleRules lt. */
        public lt: number;

        /** DoubleRules lte. */
        public lte: number;

        /** DoubleRules gt. */
        public gt: number;

        /** DoubleRules gte. */
        public gte: number;

        /** DoubleRules in. */
        public in: number[];

        /** DoubleRules notIn. */
        public notIn: number[];

        /**
         * Verifies a DoubleRules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a DoubleRules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns DoubleRules
         */
        public static fromObject(object: { [k: string]: any }): validate.DoubleRules;

        /**
         * Creates a plain object from a DoubleRules message. Also converts values to other types if specified.
         * @param message DoubleRules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.DoubleRules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this DoubleRules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of an Int32Rules. */
    interface IInt32Rules {

        /** Int32Rules const */
        "const"?: (number|null);

        /** Int32Rules lt */
        lt?: (number|null);

        /** Int32Rules lte */
        lte?: (number|null);

        /** Int32Rules gt */
        gt?: (number|null);

        /** Int32Rules gte */
        gte?: (number|null);

        /** Int32Rules in */
        "in"?: (number[]|null);

        /** Int32Rules notIn */
        notIn?: (number[]|null);
    }

    /** Represents an Int32Rules. */
    class Int32Rules implements IInt32Rules {

        /**
         * Constructs a new Int32Rules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IInt32Rules);

        /** Int32Rules const. */
        public const: number;

        /** Int32Rules lt. */
        public lt: number;

        /** Int32Rules lte. */
        public lte: number;

        /** Int32Rules gt. */
        public gt: number;

        /** Int32Rules gte. */
        public gte: number;

        /** Int32Rules in. */
        public in: number[];

        /** Int32Rules notIn. */
        public notIn: number[];

        /**
         * Verifies an Int32Rules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates an Int32Rules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Int32Rules
         */
        public static fromObject(object: { [k: string]: any }): validate.Int32Rules;

        /**
         * Creates a plain object from an Int32Rules message. Also converts values to other types if specified.
         * @param message Int32Rules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.Int32Rules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Int32Rules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of an Int64Rules. */
    interface IInt64Rules {

        /** Int64Rules const */
        "const"?: (number|Long|null);

        /** Int64Rules lt */
        lt?: (number|Long|null);

        /** Int64Rules lte */
        lte?: (number|Long|null);

        /** Int64Rules gt */
        gt?: (number|Long|null);

        /** Int64Rules gte */
        gte?: (number|Long|null);

        /** Int64Rules in */
        "in"?: ((number|Long)[]|null);

        /** Int64Rules notIn */
        notIn?: ((number|Long)[]|null);
    }

    /** Represents an Int64Rules. */
    class Int64Rules implements IInt64Rules {

        /**
         * Constructs a new Int64Rules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IInt64Rules);

        /** Int64Rules const. */
        public const: (number|Long);

        /** Int64Rules lt. */
        public lt: (number|Long);

        /** Int64Rules lte. */
        public lte: (number|Long);

        /** Int64Rules gt. */
        public gt: (number|Long);

        /** Int64Rules gte. */
        public gte: (number|Long);

        /** Int64Rules in. */
        public in: (number|Long)[];

        /** Int64Rules notIn. */
        public notIn: (number|Long)[];

        /**
         * Verifies an Int64Rules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates an Int64Rules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Int64Rules
         */
        public static fromObject(object: { [k: string]: any }): validate.Int64Rules;

        /**
         * Creates a plain object from an Int64Rules message. Also converts values to other types if specified.
         * @param message Int64Rules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.Int64Rules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Int64Rules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a UInt32Rules. */
    interface IUInt32Rules {

        /** UInt32Rules const */
        "const"?: (number|null);

        /** UInt32Rules lt */
        lt?: (number|null);

        /** UInt32Rules lte */
        lte?: (number|null);

        /** UInt32Rules gt */
        gt?: (number|null);

        /** UInt32Rules gte */
        gte?: (number|null);

        /** UInt32Rules in */
        "in"?: (number[]|null);

        /** UInt32Rules notIn */
        notIn?: (number[]|null);
    }

    /** Represents a UInt32Rules. */
    class UInt32Rules implements IUInt32Rules {

        /**
         * Constructs a new UInt32Rules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IUInt32Rules);

        /** UInt32Rules const. */
        public const: number;

        /** UInt32Rules lt. */
        public lt: number;

        /** UInt32Rules lte. */
        public lte: number;

        /** UInt32Rules gt. */
        public gt: number;

        /** UInt32Rules gte. */
        public gte: number;

        /** UInt32Rules in. */
        public in: number[];

        /** UInt32Rules notIn. */
        public notIn: number[];

        /**
         * Verifies a UInt32Rules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a UInt32Rules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns UInt32Rules
         */
        public static fromObject(object: { [k: string]: any }): validate.UInt32Rules;

        /**
         * Creates a plain object from a UInt32Rules message. Also converts values to other types if specified.
         * @param message UInt32Rules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.UInt32Rules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this UInt32Rules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a UInt64Rules. */
    interface IUInt64Rules {

        /** UInt64Rules const */
        "const"?: (number|Long|null);

        /** UInt64Rules lt */
        lt?: (number|Long|null);

        /** UInt64Rules lte */
        lte?: (number|Long|null);

        /** UInt64Rules gt */
        gt?: (number|Long|null);

        /** UInt64Rules gte */
        gte?: (number|Long|null);

        /** UInt64Rules in */
        "in"?: ((number|Long)[]|null);

        /** UInt64Rules notIn */
        notIn?: ((number|Long)[]|null);
    }

    /** Represents a UInt64Rules. */
    class UInt64Rules implements IUInt64Rules {

        /**
         * Constructs a new UInt64Rules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IUInt64Rules);

        /** UInt64Rules const. */
        public const: (number|Long);

        /** UInt64Rules lt. */
        public lt: (number|Long);

        /** UInt64Rules lte. */
        public lte: (number|Long);

        /** UInt64Rules gt. */
        public gt: (number|Long);

        /** UInt64Rules gte. */
        public gte: (number|Long);

        /** UInt64Rules in. */
        public in: (number|Long)[];

        /** UInt64Rules notIn. */
        public notIn: (number|Long)[];

        /**
         * Verifies a UInt64Rules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a UInt64Rules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns UInt64Rules
         */
        public static fromObject(object: { [k: string]: any }): validate.UInt64Rules;

        /**
         * Creates a plain object from a UInt64Rules message. Also converts values to other types if specified.
         * @param message UInt64Rules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.UInt64Rules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this UInt64Rules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a SInt32Rules. */
    interface ISInt32Rules {

        /** SInt32Rules const */
        "const"?: (number|null);

        /** SInt32Rules lt */
        lt?: (number|null);

        /** SInt32Rules lte */
        lte?: (number|null);

        /** SInt32Rules gt */
        gt?: (number|null);

        /** SInt32Rules gte */
        gte?: (number|null);

        /** SInt32Rules in */
        "in"?: (number[]|null);

        /** SInt32Rules notIn */
        notIn?: (number[]|null);
    }

    /** Represents a SInt32Rules. */
    class SInt32Rules implements ISInt32Rules {

        /**
         * Constructs a new SInt32Rules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.ISInt32Rules);

        /** SInt32Rules const. */
        public const: number;

        /** SInt32Rules lt. */
        public lt: number;

        /** SInt32Rules lte. */
        public lte: number;

        /** SInt32Rules gt. */
        public gt: number;

        /** SInt32Rules gte. */
        public gte: number;

        /** SInt32Rules in. */
        public in: number[];

        /** SInt32Rules notIn. */
        public notIn: number[];

        /**
         * Verifies a SInt32Rules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a SInt32Rules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns SInt32Rules
         */
        public static fromObject(object: { [k: string]: any }): validate.SInt32Rules;

        /**
         * Creates a plain object from a SInt32Rules message. Also converts values to other types if specified.
         * @param message SInt32Rules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.SInt32Rules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this SInt32Rules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a SInt64Rules. */
    interface ISInt64Rules {

        /** SInt64Rules const */
        "const"?: (number|Long|null);

        /** SInt64Rules lt */
        lt?: (number|Long|null);

        /** SInt64Rules lte */
        lte?: (number|Long|null);

        /** SInt64Rules gt */
        gt?: (number|Long|null);

        /** SInt64Rules gte */
        gte?: (number|Long|null);

        /** SInt64Rules in */
        "in"?: ((number|Long)[]|null);

        /** SInt64Rules notIn */
        notIn?: ((number|Long)[]|null);
    }

    /** Represents a SInt64Rules. */
    class SInt64Rules implements ISInt64Rules {

        /**
         * Constructs a new SInt64Rules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.ISInt64Rules);

        /** SInt64Rules const. */
        public const: (number|Long);

        /** SInt64Rules lt. */
        public lt: (number|Long);

        /** SInt64Rules lte. */
        public lte: (number|Long);

        /** SInt64Rules gt. */
        public gt: (number|Long);

        /** SInt64Rules gte. */
        public gte: (number|Long);

        /** SInt64Rules in. */
        public in: (number|Long)[];

        /** SInt64Rules notIn. */
        public notIn: (number|Long)[];

        /**
         * Verifies a SInt64Rules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a SInt64Rules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns SInt64Rules
         */
        public static fromObject(object: { [k: string]: any }): validate.SInt64Rules;

        /**
         * Creates a plain object from a SInt64Rules message. Also converts values to other types if specified.
         * @param message SInt64Rules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.SInt64Rules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this SInt64Rules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a Fixed32Rules. */
    interface IFixed32Rules {

        /** Fixed32Rules const */
        "const"?: (number|null);

        /** Fixed32Rules lt */
        lt?: (number|null);

        /** Fixed32Rules lte */
        lte?: (number|null);

        /** Fixed32Rules gt */
        gt?: (number|null);

        /** Fixed32Rules gte */
        gte?: (number|null);

        /** Fixed32Rules in */
        "in"?: (number[]|null);

        /** Fixed32Rules notIn */
        notIn?: (number[]|null);
    }

    /** Represents a Fixed32Rules. */
    class Fixed32Rules implements IFixed32Rules {

        /**
         * Constructs a new Fixed32Rules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IFixed32Rules);

        /** Fixed32Rules const. */
        public const: number;

        /** Fixed32Rules lt. */
        public lt: number;

        /** Fixed32Rules lte. */
        public lte: number;

        /** Fixed32Rules gt. */
        public gt: number;

        /** Fixed32Rules gte. */
        public gte: number;

        /** Fixed32Rules in. */
        public in: number[];

        /** Fixed32Rules notIn. */
        public notIn: number[];

        /**
         * Verifies a Fixed32Rules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a Fixed32Rules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Fixed32Rules
         */
        public static fromObject(object: { [k: string]: any }): validate.Fixed32Rules;

        /**
         * Creates a plain object from a Fixed32Rules message. Also converts values to other types if specified.
         * @param message Fixed32Rules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.Fixed32Rules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Fixed32Rules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a Fixed64Rules. */
    interface IFixed64Rules {

        /** Fixed64Rules const */
        "const"?: (number|Long|null);

        /** Fixed64Rules lt */
        lt?: (number|Long|null);

        /** Fixed64Rules lte */
        lte?: (number|Long|null);

        /** Fixed64Rules gt */
        gt?: (number|Long|null);

        /** Fixed64Rules gte */
        gte?: (number|Long|null);

        /** Fixed64Rules in */
        "in"?: ((number|Long)[]|null);

        /** Fixed64Rules notIn */
        notIn?: ((number|Long)[]|null);
    }

    /** Represents a Fixed64Rules. */
    class Fixed64Rules implements IFixed64Rules {

        /**
         * Constructs a new Fixed64Rules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IFixed64Rules);

        /** Fixed64Rules const. */
        public const: (number|Long);

        /** Fixed64Rules lt. */
        public lt: (number|Long);

        /** Fixed64Rules lte. */
        public lte: (number|Long);

        /** Fixed64Rules gt. */
        public gt: (number|Long);

        /** Fixed64Rules gte. */
        public gte: (number|Long);

        /** Fixed64Rules in. */
        public in: (number|Long)[];

        /** Fixed64Rules notIn. */
        public notIn: (number|Long)[];

        /**
         * Verifies a Fixed64Rules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a Fixed64Rules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Fixed64Rules
         */
        public static fromObject(object: { [k: string]: any }): validate.Fixed64Rules;

        /**
         * Creates a plain object from a Fixed64Rules message. Also converts values to other types if specified.
         * @param message Fixed64Rules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.Fixed64Rules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Fixed64Rules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a SFixed32Rules. */
    interface ISFixed32Rules {

        /** SFixed32Rules const */
        "const"?: (number|null);

        /** SFixed32Rules lt */
        lt?: (number|null);

        /** SFixed32Rules lte */
        lte?: (number|null);

        /** SFixed32Rules gt */
        gt?: (number|null);

        /** SFixed32Rules gte */
        gte?: (number|null);

        /** SFixed32Rules in */
        "in"?: (number[]|null);

        /** SFixed32Rules notIn */
        notIn?: (number[]|null);
    }

    /** Represents a SFixed32Rules. */
    class SFixed32Rules implements ISFixed32Rules {

        /**
         * Constructs a new SFixed32Rules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.ISFixed32Rules);

        /** SFixed32Rules const. */
        public const: number;

        /** SFixed32Rules lt. */
        public lt: number;

        /** SFixed32Rules lte. */
        public lte: number;

        /** SFixed32Rules gt. */
        public gt: number;

        /** SFixed32Rules gte. */
        public gte: number;

        /** SFixed32Rules in. */
        public in: number[];

        /** SFixed32Rules notIn. */
        public notIn: number[];

        /**
         * Verifies a SFixed32Rules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a SFixed32Rules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns SFixed32Rules
         */
        public static fromObject(object: { [k: string]: any }): validate.SFixed32Rules;

        /**
         * Creates a plain object from a SFixed32Rules message. Also converts values to other types if specified.
         * @param message SFixed32Rules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.SFixed32Rules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this SFixed32Rules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a SFixed64Rules. */
    interface ISFixed64Rules {

        /** SFixed64Rules const */
        "const"?: (number|Long|null);

        /** SFixed64Rules lt */
        lt?: (number|Long|null);

        /** SFixed64Rules lte */
        lte?: (number|Long|null);

        /** SFixed64Rules gt */
        gt?: (number|Long|null);

        /** SFixed64Rules gte */
        gte?: (number|Long|null);

        /** SFixed64Rules in */
        "in"?: ((number|Long)[]|null);

        /** SFixed64Rules notIn */
        notIn?: ((number|Long)[]|null);
    }

    /** Represents a SFixed64Rules. */
    class SFixed64Rules implements ISFixed64Rules {

        /**
         * Constructs a new SFixed64Rules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.ISFixed64Rules);

        /** SFixed64Rules const. */
        public const: (number|Long);

        /** SFixed64Rules lt. */
        public lt: (number|Long);

        /** SFixed64Rules lte. */
        public lte: (number|Long);

        /** SFixed64Rules gt. */
        public gt: (number|Long);

        /** SFixed64Rules gte. */
        public gte: (number|Long);

        /** SFixed64Rules in. */
        public in: (number|Long)[];

        /** SFixed64Rules notIn. */
        public notIn: (number|Long)[];

        /**
         * Verifies a SFixed64Rules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a SFixed64Rules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns SFixed64Rules
         */
        public static fromObject(object: { [k: string]: any }): validate.SFixed64Rules;

        /**
         * Creates a plain object from a SFixed64Rules message. Also converts values to other types if specified.
         * @param message SFixed64Rules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.SFixed64Rules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this SFixed64Rules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a BoolRules. */
    interface IBoolRules {

        /** BoolRules const */
        "const"?: (boolean|null);
    }

    /** Represents a BoolRules. */
    class BoolRules implements IBoolRules {

        /**
         * Constructs a new BoolRules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IBoolRules);

        /** BoolRules const. */
        public const: boolean;

        /**
         * Verifies a BoolRules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a BoolRules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns BoolRules
         */
        public static fromObject(object: { [k: string]: any }): validate.BoolRules;

        /**
         * Creates a plain object from a BoolRules message. Also converts values to other types if specified.
         * @param message BoolRules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.BoolRules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this BoolRules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a StringRules. */
    interface IStringRules {

        /** StringRules const */
        "const"?: (string|null);

        /** StringRules len */
        len?: (number|Long|null);

        /** StringRules minLen */
        minLen?: (number|Long|null);

        /** StringRules maxLen */
        maxLen?: (number|Long|null);

        /** StringRules lenBytes */
        lenBytes?: (number|Long|null);

        /** StringRules minBytes */
        minBytes?: (number|Long|null);

        /** StringRules maxBytes */
        maxBytes?: (number|Long|null);

        /** StringRules pattern */
        pattern?: (string|null);

        /** StringRules prefix */
        prefix?: (string|null);

        /** StringRules suffix */
        suffix?: (string|null);

        /** StringRules contains */
        contains?: (string|null);

        /** StringRules notContains */
        notContains?: (string|null);

        /** StringRules in */
        "in"?: (string[]|null);

        /** StringRules notIn */
        notIn?: (string[]|null);

        /** StringRules email */
        email?: (boolean|null);

        /** StringRules hostname */
        hostname?: (boolean|null);

        /** StringRules ip */
        ip?: (boolean|null);

        /** StringRules ipv4 */
        ipv4?: (boolean|null);

        /** StringRules ipv6 */
        ipv6?: (boolean|null);

        /** StringRules uri */
        uri?: (boolean|null);

        /** StringRules uriRef */
        uriRef?: (boolean|null);

        /** StringRules address */
        address?: (boolean|null);

        /** StringRules uuid */
        uuid?: (boolean|null);

        /** StringRules wellKnownRegex */
        wellKnownRegex?: (validate.KnownRegex|null);

        /** StringRules strict */
        strict?: (boolean|null);
    }

    /** Represents a StringRules. */
    class StringRules implements IStringRules {

        /**
         * Constructs a new StringRules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IStringRules);

        /** StringRules const. */
        public const: string;

        /** StringRules len. */
        public len: (number|Long);

        /** StringRules minLen. */
        public minLen: (number|Long);

        /** StringRules maxLen. */
        public maxLen: (number|Long);

        /** StringRules lenBytes. */
        public lenBytes: (number|Long);

        /** StringRules minBytes. */
        public minBytes: (number|Long);

        /** StringRules maxBytes. */
        public maxBytes: (number|Long);

        /** StringRules pattern. */
        public pattern: string;

        /** StringRules prefix. */
        public prefix: string;

        /** StringRules suffix. */
        public suffix: string;

        /** StringRules contains. */
        public contains: string;

        /** StringRules notContains. */
        public notContains: string;

        /** StringRules in. */
        public in: string[];

        /** StringRules notIn. */
        public notIn: string[];

        /** StringRules email. */
        public email: boolean;

        /** StringRules hostname. */
        public hostname: boolean;

        /** StringRules ip. */
        public ip: boolean;

        /** StringRules ipv4. */
        public ipv4: boolean;

        /** StringRules ipv6. */
        public ipv6: boolean;

        /** StringRules uri. */
        public uri: boolean;

        /** StringRules uriRef. */
        public uriRef: boolean;

        /** StringRules address. */
        public address: boolean;

        /** StringRules uuid. */
        public uuid: boolean;

        /** StringRules wellKnownRegex. */
        public wellKnownRegex: validate.KnownRegex;

        /** StringRules strict. */
        public strict: boolean;

        /** StringRules wellKnown. */
        public wellKnown?: ("email"|"hostname"|"ip"|"ipv4"|"ipv6"|"uri"|"uriRef"|"address"|"uuid"|"wellKnownRegex");

        /**
         * Verifies a StringRules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a StringRules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns StringRules
         */
        public static fromObject(object: { [k: string]: any }): validate.StringRules;

        /**
         * Creates a plain object from a StringRules message. Also converts values to other types if specified.
         * @param message StringRules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.StringRules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this StringRules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** KnownRegex enum. */
    enum KnownRegex {
        UNKNOWN = 0,
        HTTP_HEADER_NAME = 1,
        HTTP_HEADER_VALUE = 2
    }

    /** Properties of a BytesRules. */
    interface IBytesRules {

        /** BytesRules const */
        "const"?: (Uint8Array|null);

        /** BytesRules len */
        len?: (number|Long|null);

        /** BytesRules minLen */
        minLen?: (number|Long|null);

        /** BytesRules maxLen */
        maxLen?: (number|Long|null);

        /** BytesRules pattern */
        pattern?: (string|null);

        /** BytesRules prefix */
        prefix?: (Uint8Array|null);

        /** BytesRules suffix */
        suffix?: (Uint8Array|null);

        /** BytesRules contains */
        contains?: (Uint8Array|null);

        /** BytesRules in */
        "in"?: (Uint8Array[]|null);

        /** BytesRules notIn */
        notIn?: (Uint8Array[]|null);

        /** BytesRules ip */
        ip?: (boolean|null);

        /** BytesRules ipv4 */
        ipv4?: (boolean|null);

        /** BytesRules ipv6 */
        ipv6?: (boolean|null);
    }

    /** Represents a BytesRules. */
    class BytesRules implements IBytesRules {

        /**
         * Constructs a new BytesRules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IBytesRules);

        /** BytesRules const. */
        public const: Uint8Array;

        /** BytesRules len. */
        public len: (number|Long);

        /** BytesRules minLen. */
        public minLen: (number|Long);

        /** BytesRules maxLen. */
        public maxLen: (number|Long);

        /** BytesRules pattern. */
        public pattern: string;

        /** BytesRules prefix. */
        public prefix: Uint8Array;

        /** BytesRules suffix. */
        public suffix: Uint8Array;

        /** BytesRules contains. */
        public contains: Uint8Array;

        /** BytesRules in. */
        public in: Uint8Array[];

        /** BytesRules notIn. */
        public notIn: Uint8Array[];

        /** BytesRules ip. */
        public ip: boolean;

        /** BytesRules ipv4. */
        public ipv4: boolean;

        /** BytesRules ipv6. */
        public ipv6: boolean;

        /** BytesRules wellKnown. */
        public wellKnown?: ("ip"|"ipv4"|"ipv6");

        /**
         * Verifies a BytesRules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a BytesRules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns BytesRules
         */
        public static fromObject(object: { [k: string]: any }): validate.BytesRules;

        /**
         * Creates a plain object from a BytesRules message. Also converts values to other types if specified.
         * @param message BytesRules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.BytesRules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this BytesRules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of an EnumRules. */
    interface IEnumRules {

        /** EnumRules const */
        "const"?: (number|null);

        /** EnumRules definedOnly */
        definedOnly?: (boolean|null);

        /** EnumRules in */
        "in"?: (number[]|null);

        /** EnumRules notIn */
        notIn?: (number[]|null);
    }

    /** Represents an EnumRules. */
    class EnumRules implements IEnumRules {

        /**
         * Constructs a new EnumRules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IEnumRules);

        /** EnumRules const. */
        public const: number;

        /** EnumRules definedOnly. */
        public definedOnly: boolean;

        /** EnumRules in. */
        public in: number[];

        /** EnumRules notIn. */
        public notIn: number[];

        /**
         * Verifies an EnumRules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates an EnumRules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns EnumRules
         */
        public static fromObject(object: { [k: string]: any }): validate.EnumRules;

        /**
         * Creates a plain object from an EnumRules message. Also converts values to other types if specified.
         * @param message EnumRules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.EnumRules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this EnumRules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a MessageRules. */
    interface IMessageRules {

        /** MessageRules skip */
        skip?: (boolean|null);

        /** MessageRules required */
        required?: (boolean|null);
    }

    /** Represents a MessageRules. */
    class MessageRules implements IMessageRules {

        /**
         * Constructs a new MessageRules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IMessageRules);

        /** MessageRules skip. */
        public skip: boolean;

        /** MessageRules required. */
        public required: boolean;

        /**
         * Verifies a MessageRules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a MessageRules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns MessageRules
         */
        public static fromObject(object: { [k: string]: any }): validate.MessageRules;

        /**
         * Creates a plain object from a MessageRules message. Also converts values to other types if specified.
         * @param message MessageRules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.MessageRules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this MessageRules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a RepeatedRules. */
    interface IRepeatedRules {

        /** RepeatedRules minItems */
        minItems?: (number|Long|null);

        /** RepeatedRules maxItems */
        maxItems?: (number|Long|null);

        /** RepeatedRules unique */
        unique?: (boolean|null);

        /** RepeatedRules items */
        items?: (validate.IFieldRules|null);
    }

    /** Represents a RepeatedRules. */
    class RepeatedRules implements IRepeatedRules {

        /**
         * Constructs a new RepeatedRules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IRepeatedRules);

        /** RepeatedRules minItems. */
        public minItems: (number|Long);

        /** RepeatedRules maxItems. */
        public maxItems: (number|Long);

        /** RepeatedRules unique. */
        public unique: boolean;

        /** RepeatedRules items. */
        public items?: (validate.IFieldRules|null);

        /**
         * Verifies a RepeatedRules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a RepeatedRules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns RepeatedRules
         */
        public static fromObject(object: { [k: string]: any }): validate.RepeatedRules;

        /**
         * Creates a plain object from a RepeatedRules message. Also converts values to other types if specified.
         * @param message RepeatedRules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.RepeatedRules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this RepeatedRules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a MapRules. */
    interface IMapRules {

        /** MapRules minPairs */
        minPairs?: (number|Long|null);

        /** MapRules maxPairs */
        maxPairs?: (number|Long|null);

        /** MapRules noSparse */
        noSparse?: (boolean|null);

        /** MapRules keys */
        keys?: (validate.IFieldRules|null);

        /** MapRules values */
        values?: (validate.IFieldRules|null);
    }

    /** Represents a MapRules. */
    class MapRules implements IMapRules {

        /**
         * Constructs a new MapRules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IMapRules);

        /** MapRules minPairs. */
        public minPairs: (number|Long);

        /** MapRules maxPairs. */
        public maxPairs: (number|Long);

        /** MapRules noSparse. */
        public noSparse: boolean;

        /** MapRules keys. */
        public keys?: (validate.IFieldRules|null);

        /** MapRules values. */
        public values?: (validate.IFieldRules|null);

        /**
         * Verifies a MapRules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a MapRules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns MapRules
         */
        public static fromObject(object: { [k: string]: any }): validate.MapRules;

        /**
         * Creates a plain object from a MapRules message. Also converts values to other types if specified.
         * @param message MapRules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.MapRules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this MapRules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of an AnyRules. */
    interface IAnyRules {

        /** AnyRules required */
        required?: (boolean|null);

        /** AnyRules in */
        "in"?: (string[]|null);

        /** AnyRules notIn */
        notIn?: (string[]|null);
    }

    /** Represents an AnyRules. */
    class AnyRules implements IAnyRules {

        /**
         * Constructs a new AnyRules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IAnyRules);

        /** AnyRules required. */
        public required: boolean;

        /** AnyRules in. */
        public in: string[];

        /** AnyRules notIn. */
        public notIn: string[];

        /**
         * Verifies an AnyRules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates an AnyRules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns AnyRules
         */
        public static fromObject(object: { [k: string]: any }): validate.AnyRules;

        /**
         * Creates a plain object from an AnyRules message. Also converts values to other types if specified.
         * @param message AnyRules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.AnyRules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this AnyRules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a DurationRules. */
    interface IDurationRules {

        /** DurationRules required */
        required?: (boolean|null);

        /** DurationRules const */
        "const"?: (google.protobuf.IDuration|null);

        /** DurationRules lt */
        lt?: (google.protobuf.IDuration|null);

        /** DurationRules lte */
        lte?: (google.protobuf.IDuration|null);

        /** DurationRules gt */
        gt?: (google.protobuf.IDuration|null);

        /** DurationRules gte */
        gte?: (google.protobuf.IDuration|null);

        /** DurationRules in */
        "in"?: (google.protobuf.IDuration[]|null);

        /** DurationRules notIn */
        notIn?: (google.protobuf.IDuration[]|null);
    }

    /** Represents a DurationRules. */
    class DurationRules implements IDurationRules {

        /**
         * Constructs a new DurationRules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.IDurationRules);

        /** DurationRules required. */
        public required: boolean;

        /** DurationRules const. */
        public const?: (google.protobuf.IDuration|null);

        /** DurationRules lt. */
        public lt?: (google.protobuf.IDuration|null);

        /** DurationRules lte. */
        public lte?: (google.protobuf.IDuration|null);

        /** DurationRules gt. */
        public gt?: (google.protobuf.IDuration|null);

        /** DurationRules gte. */
        public gte?: (google.protobuf.IDuration|null);

        /** DurationRules in. */
        public in: google.protobuf.IDuration[];

        /** DurationRules notIn. */
        public notIn: google.protobuf.IDuration[];

        /**
         * Verifies a DurationRules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a DurationRules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns DurationRules
         */
        public static fromObject(object: { [k: string]: any }): validate.DurationRules;

        /**
         * Creates a plain object from a DurationRules message. Also converts values to other types if specified.
         * @param message DurationRules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.DurationRules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this DurationRules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a TimestampRules. */
    interface ITimestampRules {

        /** TimestampRules required */
        required?: (boolean|null);

        /** TimestampRules const */
        "const"?: (google.protobuf.ITimestamp|null);

        /** TimestampRules lt */
        lt?: (google.protobuf.ITimestamp|null);

        /** TimestampRules lte */
        lte?: (google.protobuf.ITimestamp|null);

        /** TimestampRules gt */
        gt?: (google.protobuf.ITimestamp|null);

        /** TimestampRules gte */
        gte?: (google.protobuf.ITimestamp|null);

        /** TimestampRules ltNow */
        ltNow?: (boolean|null);

        /** TimestampRules gtNow */
        gtNow?: (boolean|null);

        /** TimestampRules within */
        within?: (google.protobuf.IDuration|null);
    }

    /** Represents a TimestampRules. */
    class TimestampRules implements ITimestampRules {

        /**
         * Constructs a new TimestampRules.
         * @param [properties] Properties to set
         */
        constructor(properties?: validate.ITimestampRules);

        /** TimestampRules required. */
        public required: boolean;

        /** TimestampRules const. */
        public const?: (google.protobuf.ITimestamp|null);

        /** TimestampRules lt. */
        public lt?: (google.protobuf.ITimestamp|null);

        /** TimestampRules lte. */
        public lte?: (google.protobuf.ITimestamp|null);

        /** TimestampRules gt. */
        public gt?: (google.protobuf.ITimestamp|null);

        /** TimestampRules gte. */
        public gte?: (google.protobuf.ITimestamp|null);

        /** TimestampRules ltNow. */
        public ltNow: boolean;

        /** TimestampRules gtNow. */
        public gtNow: boolean;

        /** TimestampRules within. */
        public within?: (google.protobuf.IDuration|null);

        /**
         * Verifies a TimestampRules message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a TimestampRules message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns TimestampRules
         */
        public static fromObject(object: { [k: string]: any }): validate.TimestampRules;

        /**
         * Creates a plain object from a TimestampRules message. Also converts values to other types if specified.
         * @param message TimestampRules
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: validate.TimestampRules, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this TimestampRules to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }
}

/** Namespace google. */
export namespace google {

    /** Namespace protobuf. */
    namespace protobuf {

        /** Properties of a FileDescriptorSet. */
        interface IFileDescriptorSet {

            /** FileDescriptorSet file */
            file?: (google.protobuf.IFileDescriptorProto[]|null);
        }

        /** Represents a FileDescriptorSet. */
        class FileDescriptorSet implements IFileDescriptorSet {

            /**
             * Constructs a new FileDescriptorSet.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFileDescriptorSet);

            /** FileDescriptorSet file. */
            public file: google.protobuf.IFileDescriptorProto[];

            /**
             * Verifies a FileDescriptorSet message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FileDescriptorSet
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FileDescriptorSet;

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @param message FileDescriptorSet
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FileDescriptorSet, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FileDescriptorProto. */
        interface IFileDescriptorProto {

            /** FileDescriptorProto name */
            name?: (string|null);

            /** FileDescriptorProto package */
            "package"?: (string|null);

            /** FileDescriptorProto dependency */
            dependency?: (string[]|null);

            /** FileDescriptorProto publicDependency */
            publicDependency?: (number[]|null);

            /** FileDescriptorProto weakDependency */
            weakDependency?: (number[]|null);

            /** FileDescriptorProto messageType */
            messageType?: (google.protobuf.IDescriptorProto[]|null);

            /** FileDescriptorProto enumType */
            enumType?: (google.protobuf.IEnumDescriptorProto[]|null);

            /** FileDescriptorProto service */
            service?: (google.protobuf.IServiceDescriptorProto[]|null);

            /** FileDescriptorProto extension */
            extension?: (google.protobuf.IFieldDescriptorProto[]|null);

            /** FileDescriptorProto options */
            options?: (google.protobuf.IFileOptions|null);

            /** FileDescriptorProto sourceCodeInfo */
            sourceCodeInfo?: (google.protobuf.ISourceCodeInfo|null);

            /** FileDescriptorProto syntax */
            syntax?: (string|null);
        }

        /** Represents a FileDescriptorProto. */
        class FileDescriptorProto implements IFileDescriptorProto {

            /**
             * Constructs a new FileDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFileDescriptorProto);

            /** FileDescriptorProto name. */
            public name: string;

            /** FileDescriptorProto package. */
            public package: string;

            /** FileDescriptorProto dependency. */
            public dependency: string[];

            /** FileDescriptorProto publicDependency. */
            public publicDependency: number[];

            /** FileDescriptorProto weakDependency. */
            public weakDependency: number[];

            /** FileDescriptorProto messageType. */
            public messageType: google.protobuf.IDescriptorProto[];

            /** FileDescriptorProto enumType. */
            public enumType: google.protobuf.IEnumDescriptorProto[];

            /** FileDescriptorProto service. */
            public service: google.protobuf.IServiceDescriptorProto[];

            /** FileDescriptorProto extension. */
            public extension: google.protobuf.IFieldDescriptorProto[];

            /** FileDescriptorProto options. */
            public options?: (google.protobuf.IFileOptions|null);

            /** FileDescriptorProto sourceCodeInfo. */
            public sourceCodeInfo?: (google.protobuf.ISourceCodeInfo|null);

            /** FileDescriptorProto syntax. */
            public syntax: string;

            /**
             * Verifies a FileDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FileDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FileDescriptorProto;

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @param message FileDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FileDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a DescriptorProto. */
        interface IDescriptorProto {

            /** DescriptorProto name */
            name?: (string|null);

            /** DescriptorProto field */
            field?: (google.protobuf.IFieldDescriptorProto[]|null);

            /** DescriptorProto extension */
            extension?: (google.protobuf.IFieldDescriptorProto[]|null);

            /** DescriptorProto nestedType */
            nestedType?: (google.protobuf.IDescriptorProto[]|null);

            /** DescriptorProto enumType */
            enumType?: (google.protobuf.IEnumDescriptorProto[]|null);

            /** DescriptorProto extensionRange */
            extensionRange?: (google.protobuf.DescriptorProto.IExtensionRange[]|null);

            /** DescriptorProto oneofDecl */
            oneofDecl?: (google.protobuf.IOneofDescriptorProto[]|null);

            /** DescriptorProto options */
            options?: (google.protobuf.IMessageOptions|null);

            /** DescriptorProto reservedRange */
            reservedRange?: (google.protobuf.DescriptorProto.IReservedRange[]|null);

            /** DescriptorProto reservedName */
            reservedName?: (string[]|null);
        }

        /** Represents a DescriptorProto. */
        class DescriptorProto implements IDescriptorProto {

            /**
             * Constructs a new DescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IDescriptorProto);

            /** DescriptorProto name. */
            public name: string;

            /** DescriptorProto field. */
            public field: google.protobuf.IFieldDescriptorProto[];

            /** DescriptorProto extension. */
            public extension: google.protobuf.IFieldDescriptorProto[];

            /** DescriptorProto nestedType. */
            public nestedType: google.protobuf.IDescriptorProto[];

            /** DescriptorProto enumType. */
            public enumType: google.protobuf.IEnumDescriptorProto[];

            /** DescriptorProto extensionRange. */
            public extensionRange: google.protobuf.DescriptorProto.IExtensionRange[];

            /** DescriptorProto oneofDecl. */
            public oneofDecl: google.protobuf.IOneofDescriptorProto[];

            /** DescriptorProto options. */
            public options?: (google.protobuf.IMessageOptions|null);

            /** DescriptorProto reservedRange. */
            public reservedRange: google.protobuf.DescriptorProto.IReservedRange[];

            /** DescriptorProto reservedName. */
            public reservedName: string[];

            /**
             * Verifies a DescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns DescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.DescriptorProto;

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @param message DescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.DescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this DescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace DescriptorProto {

            /** Properties of an ExtensionRange. */
            interface IExtensionRange {

                /** ExtensionRange start */
                start?: (number|null);

                /** ExtensionRange end */
                end?: (number|null);

                /** ExtensionRange options */
                options?: (google.protobuf.IExtensionRangeOptions|null);
            }

            /** Represents an ExtensionRange. */
            class ExtensionRange implements IExtensionRange {

                /**
                 * Constructs a new ExtensionRange.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.DescriptorProto.IExtensionRange);

                /** ExtensionRange start. */
                public start: number;

                /** ExtensionRange end. */
                public end: number;

                /** ExtensionRange options. */
                public options?: (google.protobuf.IExtensionRangeOptions|null);

                /**
                 * Verifies an ExtensionRange message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ExtensionRange
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @param message ExtensionRange
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.DescriptorProto.ExtensionRange, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ReservedRange. */
            interface IReservedRange {

                /** ReservedRange start */
                start?: (number|null);

                /** ReservedRange end */
                end?: (number|null);
            }

            /** Represents a ReservedRange. */
            class ReservedRange implements IReservedRange {

                /**
                 * Constructs a new ReservedRange.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.DescriptorProto.IReservedRange);

                /** ReservedRange start. */
                public start: number;

                /** ReservedRange end. */
                public end: number;

                /**
                 * Verifies a ReservedRange message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ReservedRange
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @param message ReservedRange
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.DescriptorProto.ReservedRange, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ReservedRange to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of an ExtensionRangeOptions. */
        interface IExtensionRangeOptions {

            /** ExtensionRangeOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents an ExtensionRangeOptions. */
        class ExtensionRangeOptions implements IExtensionRangeOptions {

            /**
             * Constructs a new ExtensionRangeOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IExtensionRangeOptions);

            /** ExtensionRangeOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Verifies an ExtensionRangeOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ExtensionRangeOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.ExtensionRangeOptions;

            /**
             * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
             * @param message ExtensionRangeOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.ExtensionRangeOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ExtensionRangeOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FieldDescriptorProto. */
        interface IFieldDescriptorProto {

            /** FieldDescriptorProto name */
            name?: (string|null);

            /** FieldDescriptorProto number */
            number?: (number|null);

            /** FieldDescriptorProto label */
            label?: (google.protobuf.FieldDescriptorProto.Label|null);

            /** FieldDescriptorProto type */
            type?: (google.protobuf.FieldDescriptorProto.Type|null);

            /** FieldDescriptorProto typeName */
            typeName?: (string|null);

            /** FieldDescriptorProto extendee */
            extendee?: (string|null);

            /** FieldDescriptorProto defaultValue */
            defaultValue?: (string|null);

            /** FieldDescriptorProto oneofIndex */
            oneofIndex?: (number|null);

            /** FieldDescriptorProto jsonName */
            jsonName?: (string|null);

            /** FieldDescriptorProto options */
            options?: (google.protobuf.IFieldOptions|null);

            /** FieldDescriptorProto proto3Optional */
            proto3Optional?: (boolean|null);
        }

        /** Represents a FieldDescriptorProto. */
        class FieldDescriptorProto implements IFieldDescriptorProto {

            /**
             * Constructs a new FieldDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFieldDescriptorProto);

            /** FieldDescriptorProto name. */
            public name: string;

            /** FieldDescriptorProto number. */
            public number: number;

            /** FieldDescriptorProto label. */
            public label: google.protobuf.FieldDescriptorProto.Label;

            /** FieldDescriptorProto type. */
            public type: google.protobuf.FieldDescriptorProto.Type;

            /** FieldDescriptorProto typeName. */
            public typeName: string;

            /** FieldDescriptorProto extendee. */
            public extendee: string;

            /** FieldDescriptorProto defaultValue. */
            public defaultValue: string;

            /** FieldDescriptorProto oneofIndex. */
            public oneofIndex: number;

            /** FieldDescriptorProto jsonName. */
            public jsonName: string;

            /** FieldDescriptorProto options. */
            public options?: (google.protobuf.IFieldOptions|null);

            /** FieldDescriptorProto proto3Optional. */
            public proto3Optional: boolean;

            /**
             * Verifies a FieldDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FieldDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FieldDescriptorProto;

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @param message FieldDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FieldDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FieldDescriptorProto {

            /** Type enum. */
            enum Type {
                TYPE_DOUBLE = 1,
                TYPE_FLOAT = 2,
                TYPE_INT64 = 3,
                TYPE_UINT64 = 4,
                TYPE_INT32 = 5,
                TYPE_FIXED64 = 6,
                TYPE_FIXED32 = 7,
                TYPE_BOOL = 8,
                TYPE_STRING = 9,
                TYPE_GROUP = 10,
                TYPE_MESSAGE = 11,
                TYPE_BYTES = 12,
                TYPE_UINT32 = 13,
                TYPE_ENUM = 14,
                TYPE_SFIXED32 = 15,
                TYPE_SFIXED64 = 16,
                TYPE_SINT32 = 17,
                TYPE_SINT64 = 18
            }

            /** Label enum. */
            enum Label {
                LABEL_OPTIONAL = 1,
                LABEL_REQUIRED = 2,
                LABEL_REPEATED = 3
            }
        }

        /** Properties of an OneofDescriptorProto. */
        interface IOneofDescriptorProto {

            /** OneofDescriptorProto name */
            name?: (string|null);

            /** OneofDescriptorProto options */
            options?: (google.protobuf.IOneofOptions|null);
        }

        /** Represents an OneofDescriptorProto. */
        class OneofDescriptorProto implements IOneofDescriptorProto {

            /**
             * Constructs a new OneofDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IOneofDescriptorProto);

            /** OneofDescriptorProto name. */
            public name: string;

            /** OneofDescriptorProto options. */
            public options?: (google.protobuf.IOneofOptions|null);

            /**
             * Verifies an OneofDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns OneofDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.OneofDescriptorProto;

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @param message OneofDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.OneofDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnumDescriptorProto. */
        interface IEnumDescriptorProto {

            /** EnumDescriptorProto name */
            name?: (string|null);

            /** EnumDescriptorProto value */
            value?: (google.protobuf.IEnumValueDescriptorProto[]|null);

            /** EnumDescriptorProto options */
            options?: (google.protobuf.IEnumOptions|null);

            /** EnumDescriptorProto reservedRange */
            reservedRange?: (google.protobuf.EnumDescriptorProto.IEnumReservedRange[]|null);

            /** EnumDescriptorProto reservedName */
            reservedName?: (string[]|null);
        }

        /** Represents an EnumDescriptorProto. */
        class EnumDescriptorProto implements IEnumDescriptorProto {

            /**
             * Constructs a new EnumDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IEnumDescriptorProto);

            /** EnumDescriptorProto name. */
            public name: string;

            /** EnumDescriptorProto value. */
            public value: google.protobuf.IEnumValueDescriptorProto[];

            /** EnumDescriptorProto options. */
            public options?: (google.protobuf.IEnumOptions|null);

            /** EnumDescriptorProto reservedRange. */
            public reservedRange: google.protobuf.EnumDescriptorProto.IEnumReservedRange[];

            /** EnumDescriptorProto reservedName. */
            public reservedName: string[];

            /**
             * Verifies an EnumDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnumDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumDescriptorProto;

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @param message EnumDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.EnumDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace EnumDescriptorProto {

            /** Properties of an EnumReservedRange. */
            interface IEnumReservedRange {

                /** EnumReservedRange start */
                start?: (number|null);

                /** EnumReservedRange end */
                end?: (number|null);
            }

            /** Represents an EnumReservedRange. */
            class EnumReservedRange implements IEnumReservedRange {

                /**
                 * Constructs a new EnumReservedRange.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.EnumDescriptorProto.IEnumReservedRange);

                /** EnumReservedRange start. */
                public start: number;

                /** EnumReservedRange end. */
                public end: number;

                /**
                 * Verifies an EnumReservedRange message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns EnumReservedRange
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.EnumDescriptorProto.EnumReservedRange;

                /**
                 * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                 * @param message EnumReservedRange
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.EnumDescriptorProto.EnumReservedRange, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this EnumReservedRange to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of an EnumValueDescriptorProto. */
        interface IEnumValueDescriptorProto {

            /** EnumValueDescriptorProto name */
            name?: (string|null);

            /** EnumValueDescriptorProto number */
            number?: (number|null);

            /** EnumValueDescriptorProto options */
            options?: (google.protobuf.IEnumValueOptions|null);
        }

        /** Represents an EnumValueDescriptorProto. */
        class EnumValueDescriptorProto implements IEnumValueDescriptorProto {

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IEnumValueDescriptorProto);

            /** EnumValueDescriptorProto name. */
            public name: string;

            /** EnumValueDescriptorProto number. */
            public number: number;

            /** EnumValueDescriptorProto options. */
            public options?: (google.protobuf.IEnumValueOptions|null);

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnumValueDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumValueDescriptorProto;

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @param message EnumValueDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.EnumValueDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ServiceDescriptorProto. */
        interface IServiceDescriptorProto {

            /** ServiceDescriptorProto name */
            name?: (string|null);

            /** ServiceDescriptorProto method */
            method?: (google.protobuf.IMethodDescriptorProto[]|null);

            /** ServiceDescriptorProto options */
            options?: (google.protobuf.IServiceOptions|null);
        }

        /** Represents a ServiceDescriptorProto. */
        class ServiceDescriptorProto implements IServiceDescriptorProto {

            /**
             * Constructs a new ServiceDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IServiceDescriptorProto);

            /** ServiceDescriptorProto name. */
            public name: string;

            /** ServiceDescriptorProto method. */
            public method: google.protobuf.IMethodDescriptorProto[];

            /** ServiceDescriptorProto options. */
            public options?: (google.protobuf.IServiceOptions|null);

            /**
             * Verifies a ServiceDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ServiceDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.ServiceDescriptorProto;

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @param message ServiceDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.ServiceDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a MethodDescriptorProto. */
        interface IMethodDescriptorProto {

            /** MethodDescriptorProto name */
            name?: (string|null);

            /** MethodDescriptorProto inputType */
            inputType?: (string|null);

            /** MethodDescriptorProto outputType */
            outputType?: (string|null);

            /** MethodDescriptorProto options */
            options?: (google.protobuf.IMethodOptions|null);

            /** MethodDescriptorProto clientStreaming */
            clientStreaming?: (boolean|null);

            /** MethodDescriptorProto serverStreaming */
            serverStreaming?: (boolean|null);
        }

        /** Represents a MethodDescriptorProto. */
        class MethodDescriptorProto implements IMethodDescriptorProto {

            /**
             * Constructs a new MethodDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IMethodDescriptorProto);

            /** MethodDescriptorProto name. */
            public name: string;

            /** MethodDescriptorProto inputType. */
            public inputType: string;

            /** MethodDescriptorProto outputType. */
            public outputType: string;

            /** MethodDescriptorProto options. */
            public options?: (google.protobuf.IMethodOptions|null);

            /** MethodDescriptorProto clientStreaming. */
            public clientStreaming: boolean;

            /** MethodDescriptorProto serverStreaming. */
            public serverStreaming: boolean;

            /**
             * Verifies a MethodDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MethodDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.MethodDescriptorProto;

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @param message MethodDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.MethodDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FileOptions. */
        interface IFileOptions {

            /** FileOptions javaPackage */
            javaPackage?: (string|null);

            /** FileOptions javaOuterClassname */
            javaOuterClassname?: (string|null);

            /** FileOptions javaMultipleFiles */
            javaMultipleFiles?: (boolean|null);

            /** FileOptions javaGenerateEqualsAndHash */
            javaGenerateEqualsAndHash?: (boolean|null);

            /** FileOptions javaStringCheckUtf8 */
            javaStringCheckUtf8?: (boolean|null);

            /** FileOptions optimizeFor */
            optimizeFor?: (google.protobuf.FileOptions.OptimizeMode|null);

            /** FileOptions goPackage */
            goPackage?: (string|null);

            /** FileOptions ccGenericServices */
            ccGenericServices?: (boolean|null);

            /** FileOptions javaGenericServices */
            javaGenericServices?: (boolean|null);

            /** FileOptions pyGenericServices */
            pyGenericServices?: (boolean|null);

            /** FileOptions phpGenericServices */
            phpGenericServices?: (boolean|null);

            /** FileOptions deprecated */
            deprecated?: (boolean|null);

            /** FileOptions ccEnableArenas */
            ccEnableArenas?: (boolean|null);

            /** FileOptions objcClassPrefix */
            objcClassPrefix?: (string|null);

            /** FileOptions csharpNamespace */
            csharpNamespace?: (string|null);

            /** FileOptions swiftPrefix */
            swiftPrefix?: (string|null);

            /** FileOptions phpClassPrefix */
            phpClassPrefix?: (string|null);

            /** FileOptions phpNamespace */
            phpNamespace?: (string|null);

            /** FileOptions phpMetadataNamespace */
            phpMetadataNamespace?: (string|null);

            /** FileOptions rubyPackage */
            rubyPackage?: (string|null);

            /** FileOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents a FileOptions. */
        class FileOptions implements IFileOptions {

            /**
             * Constructs a new FileOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFileOptions);

            /** FileOptions javaPackage. */
            public javaPackage: string;

            /** FileOptions javaOuterClassname. */
            public javaOuterClassname: string;

            /** FileOptions javaMultipleFiles. */
            public javaMultipleFiles: boolean;

            /** FileOptions javaGenerateEqualsAndHash. */
            public javaGenerateEqualsAndHash: boolean;

            /** FileOptions javaStringCheckUtf8. */
            public javaStringCheckUtf8: boolean;

            /** FileOptions optimizeFor. */
            public optimizeFor: google.protobuf.FileOptions.OptimizeMode;

            /** FileOptions goPackage. */
            public goPackage: string;

            /** FileOptions ccGenericServices. */
            public ccGenericServices: boolean;

            /** FileOptions javaGenericServices. */
            public javaGenericServices: boolean;

            /** FileOptions pyGenericServices. */
            public pyGenericServices: boolean;

            /** FileOptions phpGenericServices. */
            public phpGenericServices: boolean;

            /** FileOptions deprecated. */
            public deprecated: boolean;

            /** FileOptions ccEnableArenas. */
            public ccEnableArenas: boolean;

            /** FileOptions objcClassPrefix. */
            public objcClassPrefix: string;

            /** FileOptions csharpNamespace. */
            public csharpNamespace: string;

            /** FileOptions swiftPrefix. */
            public swiftPrefix: string;

            /** FileOptions phpClassPrefix. */
            public phpClassPrefix: string;

            /** FileOptions phpNamespace. */
            public phpNamespace: string;

            /** FileOptions phpMetadataNamespace. */
            public phpMetadataNamespace: string;

            /** FileOptions rubyPackage. */
            public rubyPackage: string;

            /** FileOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Verifies a FileOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FileOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FileOptions;

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @param message FileOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FileOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FileOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FileOptions {

            /** OptimizeMode enum. */
            enum OptimizeMode {
                SPEED = 1,
                CODE_SIZE = 2,
                LITE_RUNTIME = 3
            }
        }

        /** Properties of a MessageOptions. */
        interface IMessageOptions {

            /** MessageOptions messageSetWireFormat */
            messageSetWireFormat?: (boolean|null);

            /** MessageOptions noStandardDescriptorAccessor */
            noStandardDescriptorAccessor?: (boolean|null);

            /** MessageOptions deprecated */
            deprecated?: (boolean|null);

            /** MessageOptions mapEntry */
            mapEntry?: (boolean|null);

            /** MessageOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);

            /** MessageOptions .clutch.api.v1.reference */
            ".clutch.api.v1.reference"?: (clutch.api.v1.IReference|null);

            /** MessageOptions .clutch.api.v1.id */
            ".clutch.api.v1.id"?: (clutch.api.v1.IIdentifier|null);

            /** MessageOptions .clutch.api.v1.redacted */
            ".clutch.api.v1.redacted"?: (boolean|null);

            /** MessageOptions .validate.disabled */
            ".validate.disabled"?: (boolean|null);

            /** MessageOptions .clutch.resolver.v1.schema */
            ".clutch.resolver.v1.schema"?: (clutch.resolver.v1.ISchemaMetadata|null);
        }

        /** Represents a MessageOptions. */
        class MessageOptions implements IMessageOptions {

            /**
             * Constructs a new MessageOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IMessageOptions);

            /** MessageOptions messageSetWireFormat. */
            public messageSetWireFormat: boolean;

            /** MessageOptions noStandardDescriptorAccessor. */
            public noStandardDescriptorAccessor: boolean;

            /** MessageOptions deprecated. */
            public deprecated: boolean;

            /** MessageOptions mapEntry. */
            public mapEntry: boolean;

            /** MessageOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Verifies a MessageOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MessageOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.MessageOptions;

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @param message MessageOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.MessageOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MessageOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FieldOptions. */
        interface IFieldOptions {

            /** FieldOptions ctype */
            ctype?: (google.protobuf.FieldOptions.CType|null);

            /** FieldOptions packed */
            packed?: (boolean|null);

            /** FieldOptions jstype */
            jstype?: (google.protobuf.FieldOptions.JSType|null);

            /** FieldOptions lazy */
            lazy?: (boolean|null);

            /** FieldOptions deprecated */
            deprecated?: (boolean|null);

            /** FieldOptions weak */
            weak?: (boolean|null);

            /** FieldOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);

            /** FieldOptions .validate.rules */
            ".validate.rules"?: (validate.IFieldRules|null);

            /** FieldOptions .clutch.resolver.v1.schemaField */
            ".clutch.resolver.v1.schemaField"?: (clutch.resolver.v1.IFieldMetadata|null);
        }

        /** Represents a FieldOptions. */
        class FieldOptions implements IFieldOptions {

            /**
             * Constructs a new FieldOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFieldOptions);

            /** FieldOptions ctype. */
            public ctype: google.protobuf.FieldOptions.CType;

            /** FieldOptions packed. */
            public packed: boolean;

            /** FieldOptions jstype. */
            public jstype: google.protobuf.FieldOptions.JSType;

            /** FieldOptions lazy. */
            public lazy: boolean;

            /** FieldOptions deprecated. */
            public deprecated: boolean;

            /** FieldOptions weak. */
            public weak: boolean;

            /** FieldOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Verifies a FieldOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FieldOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FieldOptions;

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @param message FieldOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FieldOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FieldOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FieldOptions {

            /** CType enum. */
            enum CType {
                STRING = 0,
                CORD = 1,
                STRING_PIECE = 2
            }

            /** JSType enum. */
            enum JSType {
                JS_NORMAL = 0,
                JS_STRING = 1,
                JS_NUMBER = 2
            }
        }

        /** Properties of an OneofOptions. */
        interface IOneofOptions {

            /** OneofOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);

            /** OneofOptions .validate.required */
            ".validate.required"?: (boolean|null);
        }

        /** Represents an OneofOptions. */
        class OneofOptions implements IOneofOptions {

            /**
             * Constructs a new OneofOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IOneofOptions);

            /** OneofOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Verifies an OneofOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns OneofOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.OneofOptions;

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @param message OneofOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.OneofOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this OneofOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnumOptions. */
        interface IEnumOptions {

            /** EnumOptions allowAlias */
            allowAlias?: (boolean|null);

            /** EnumOptions deprecated */
            deprecated?: (boolean|null);

            /** EnumOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents an EnumOptions. */
        class EnumOptions implements IEnumOptions {

            /**
             * Constructs a new EnumOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IEnumOptions);

            /** EnumOptions allowAlias. */
            public allowAlias: boolean;

            /** EnumOptions deprecated. */
            public deprecated: boolean;

            /** EnumOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Verifies an EnumOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnumOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumOptions;

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @param message EnumOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.EnumOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnumValueOptions. */
        interface IEnumValueOptions {

            /** EnumValueOptions deprecated */
            deprecated?: (boolean|null);

            /** EnumValueOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents an EnumValueOptions. */
        class EnumValueOptions implements IEnumValueOptions {

            /**
             * Constructs a new EnumValueOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IEnumValueOptions);

            /** EnumValueOptions deprecated. */
            public deprecated: boolean;

            /** EnumValueOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Verifies an EnumValueOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnumValueOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumValueOptions;

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @param message EnumValueOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.EnumValueOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumValueOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ServiceOptions. */
        interface IServiceOptions {

            /** ServiceOptions deprecated */
            deprecated?: (boolean|null);

            /** ServiceOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents a ServiceOptions. */
        class ServiceOptions implements IServiceOptions {

            /**
             * Constructs a new ServiceOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IServiceOptions);

            /** ServiceOptions deprecated. */
            public deprecated: boolean;

            /** ServiceOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Verifies a ServiceOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ServiceOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.ServiceOptions;

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @param message ServiceOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.ServiceOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ServiceOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a MethodOptions. */
        interface IMethodOptions {

            /** MethodOptions deprecated */
            deprecated?: (boolean|null);

            /** MethodOptions idempotencyLevel */
            idempotencyLevel?: (google.protobuf.MethodOptions.IdempotencyLevel|null);

            /** MethodOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);

            /** MethodOptions .clutch.api.v1.action */
            ".clutch.api.v1.action"?: (clutch.api.v1.IAction|null);

            /** MethodOptions .clutch.api.v1.disableAudit */
            ".clutch.api.v1.disableAudit"?: (boolean|null);

            /** MethodOptions .google.api.http */
            ".google.api.http"?: (google.api.IHttpRule|null);
        }

        /** Represents a MethodOptions. */
        class MethodOptions implements IMethodOptions {

            /**
             * Constructs a new MethodOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IMethodOptions);

            /** MethodOptions deprecated. */
            public deprecated: boolean;

            /** MethodOptions idempotencyLevel. */
            public idempotencyLevel: google.protobuf.MethodOptions.IdempotencyLevel;

            /** MethodOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Verifies a MethodOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MethodOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.MethodOptions;

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @param message MethodOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.MethodOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MethodOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace MethodOptions {

            /** IdempotencyLevel enum. */
            enum IdempotencyLevel {
                IDEMPOTENCY_UNKNOWN = 0,
                NO_SIDE_EFFECTS = 1,
                IDEMPOTENT = 2
            }
        }

        /** Properties of an UninterpretedOption. */
        interface IUninterpretedOption {

            /** UninterpretedOption name */
            name?: (google.protobuf.UninterpretedOption.INamePart[]|null);

            /** UninterpretedOption identifierValue */
            identifierValue?: (string|null);

            /** UninterpretedOption positiveIntValue */
            positiveIntValue?: (number|Long|null);

            /** UninterpretedOption negativeIntValue */
            negativeIntValue?: (number|Long|null);

            /** UninterpretedOption doubleValue */
            doubleValue?: (number|null);

            /** UninterpretedOption stringValue */
            stringValue?: (Uint8Array|null);

            /** UninterpretedOption aggregateValue */
            aggregateValue?: (string|null);
        }

        /** Represents an UninterpretedOption. */
        class UninterpretedOption implements IUninterpretedOption {

            /**
             * Constructs a new UninterpretedOption.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IUninterpretedOption);

            /** UninterpretedOption name. */
            public name: google.protobuf.UninterpretedOption.INamePart[];

            /** UninterpretedOption identifierValue. */
            public identifierValue: string;

            /** UninterpretedOption positiveIntValue. */
            public positiveIntValue: (number|Long);

            /** UninterpretedOption negativeIntValue. */
            public negativeIntValue: (number|Long);

            /** UninterpretedOption doubleValue. */
            public doubleValue: number;

            /** UninterpretedOption stringValue. */
            public stringValue: Uint8Array;

            /** UninterpretedOption aggregateValue. */
            public aggregateValue: string;

            /**
             * Verifies an UninterpretedOption message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns UninterpretedOption
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.UninterpretedOption;

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @param message UninterpretedOption
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.UninterpretedOption, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this UninterpretedOption to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace UninterpretedOption {

            /** Properties of a NamePart. */
            interface INamePart {

                /** NamePart namePart */
                namePart: string;

                /** NamePart isExtension */
                isExtension: boolean;
            }

            /** Represents a NamePart. */
            class NamePart implements INamePart {

                /**
                 * Constructs a new NamePart.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.UninterpretedOption.INamePart);

                /** NamePart namePart. */
                public namePart: string;

                /** NamePart isExtension. */
                public isExtension: boolean;

                /**
                 * Verifies a NamePart message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns NamePart
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @param message NamePart
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.UninterpretedOption.NamePart, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this NamePart to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a SourceCodeInfo. */
        interface ISourceCodeInfo {

            /** SourceCodeInfo location */
            location?: (google.protobuf.SourceCodeInfo.ILocation[]|null);
        }

        /** Represents a SourceCodeInfo. */
        class SourceCodeInfo implements ISourceCodeInfo {

            /**
             * Constructs a new SourceCodeInfo.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.ISourceCodeInfo);

            /** SourceCodeInfo location. */
            public location: google.protobuf.SourceCodeInfo.ILocation[];

            /**
             * Verifies a SourceCodeInfo message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns SourceCodeInfo
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.SourceCodeInfo;

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @param message SourceCodeInfo
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.SourceCodeInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace SourceCodeInfo {

            /** Properties of a Location. */
            interface ILocation {

                /** Location path */
                path?: (number[]|null);

                /** Location span */
                span?: (number[]|null);

                /** Location leadingComments */
                leadingComments?: (string|null);

                /** Location trailingComments */
                trailingComments?: (string|null);

                /** Location leadingDetachedComments */
                leadingDetachedComments?: (string[]|null);
            }

            /** Represents a Location. */
            class Location implements ILocation {

                /**
                 * Constructs a new Location.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.SourceCodeInfo.ILocation);

                /** Location path. */
                public path: number[];

                /** Location span. */
                public span: number[];

                /** Location leadingComments. */
                public leadingComments: string;

                /** Location trailingComments. */
                public trailingComments: string;

                /** Location leadingDetachedComments. */
                public leadingDetachedComments: string[];

                /**
                 * Verifies a Location message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Location
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @param message Location
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.SourceCodeInfo.Location, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Location to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a GeneratedCodeInfo. */
        interface IGeneratedCodeInfo {

            /** GeneratedCodeInfo annotation */
            annotation?: (google.protobuf.GeneratedCodeInfo.IAnnotation[]|null);
        }

        /** Represents a GeneratedCodeInfo. */
        class GeneratedCodeInfo implements IGeneratedCodeInfo {

            /**
             * Constructs a new GeneratedCodeInfo.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IGeneratedCodeInfo);

            /** GeneratedCodeInfo annotation. */
            public annotation: google.protobuf.GeneratedCodeInfo.IAnnotation[];

            /**
             * Verifies a GeneratedCodeInfo message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns GeneratedCodeInfo
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.GeneratedCodeInfo;

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @param message GeneratedCodeInfo
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.GeneratedCodeInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace GeneratedCodeInfo {

            /** Properties of an Annotation. */
            interface IAnnotation {

                /** Annotation path */
                path?: (number[]|null);

                /** Annotation sourceFile */
                sourceFile?: (string|null);

                /** Annotation begin */
                begin?: (number|null);

                /** Annotation end */
                end?: (number|null);
            }

            /** Represents an Annotation. */
            class Annotation implements IAnnotation {

                /**
                 * Constructs a new Annotation.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.GeneratedCodeInfo.IAnnotation);

                /** Annotation path. */
                public path: number[];

                /** Annotation sourceFile. */
                public sourceFile: string;

                /** Annotation begin. */
                public begin: number;

                /** Annotation end. */
                public end: number;

                /**
                 * Verifies an Annotation message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Annotation
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @param message Annotation
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.GeneratedCodeInfo.Annotation, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Annotation to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of an Any. */
        interface IAny {

            /** Any type_url */
            type_url?: (string|null);

            /** Any value */
            value?: (Uint8Array|null);
        }

        /** Represents an Any. */
        class Any implements IAny {

            /**
             * Constructs a new Any.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IAny);

            /** Any type_url. */
            public type_url: string;

            /** Any value. */
            public value: Uint8Array;

            /**
             * Verifies an Any message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Any message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Any
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Any;

            /**
             * Creates a plain object from an Any message. Also converts values to other types if specified.
             * @param message Any
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.Any, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Any to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Duration. */
        interface IDuration {

            /** Duration seconds */
            seconds?: (number|Long|null);

            /** Duration nanos */
            nanos?: (number|null);
        }

        /** Represents a Duration. */
        class Duration implements IDuration {

            /**
             * Constructs a new Duration.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IDuration);

            /** Duration seconds. */
            public seconds: (number|Long);

            /** Duration nanos. */
            public nanos: number;

            /**
             * Verifies a Duration message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Duration message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Duration
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Duration;

            /**
             * Creates a plain object from a Duration message. Also converts values to other types if specified.
             * @param message Duration
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.Duration, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Duration to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Timestamp. */
        interface ITimestamp {

            /** Timestamp seconds */
            seconds?: (number|Long|null);

            /** Timestamp nanos */
            nanos?: (number|null);
        }

        /** Represents a Timestamp. */
        class Timestamp implements ITimestamp {

            /**
             * Constructs a new Timestamp.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.ITimestamp);

            /** Timestamp seconds. */
            public seconds: (number|Long);

            /** Timestamp nanos. */
            public nanos: number;

            /**
             * Verifies a Timestamp message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Timestamp
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Timestamp;

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @param message Timestamp
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.Timestamp, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Timestamp to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a DoubleValue. */
        interface IDoubleValue {

            /** DoubleValue value */
            value?: (number|null);
        }

        /** Represents a DoubleValue. */
        class DoubleValue implements IDoubleValue {

            /**
             * Constructs a new DoubleValue.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IDoubleValue);

            /** DoubleValue value. */
            public value: number;

            /**
             * Verifies a DoubleValue message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a DoubleValue message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns DoubleValue
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.DoubleValue;

            /**
             * Creates a plain object from a DoubleValue message. Also converts values to other types if specified.
             * @param message DoubleValue
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.DoubleValue, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this DoubleValue to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FloatValue. */
        interface IFloatValue {

            /** FloatValue value */
            value?: (number|null);
        }

        /** Represents a FloatValue. */
        class FloatValue implements IFloatValue {

            /**
             * Constructs a new FloatValue.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFloatValue);

            /** FloatValue value. */
            public value: number;

            /**
             * Verifies a FloatValue message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FloatValue message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FloatValue
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FloatValue;

            /**
             * Creates a plain object from a FloatValue message. Also converts values to other types if specified.
             * @param message FloatValue
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FloatValue, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FloatValue to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an Int64Value. */
        interface IInt64Value {

            /** Int64Value value */
            value?: (number|Long|null);
        }

        /** Represents an Int64Value. */
        class Int64Value implements IInt64Value {

            /**
             * Constructs a new Int64Value.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IInt64Value);

            /** Int64Value value. */
            public value: (number|Long);

            /**
             * Verifies an Int64Value message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Int64Value message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Int64Value
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Int64Value;

            /**
             * Creates a plain object from an Int64Value message. Also converts values to other types if specified.
             * @param message Int64Value
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.Int64Value, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Int64Value to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a UInt64Value. */
        interface IUInt64Value {

            /** UInt64Value value */
            value?: (number|Long|null);
        }

        /** Represents a UInt64Value. */
        class UInt64Value implements IUInt64Value {

            /**
             * Constructs a new UInt64Value.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IUInt64Value);

            /** UInt64Value value. */
            public value: (number|Long);

            /**
             * Verifies a UInt64Value message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a UInt64Value message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns UInt64Value
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.UInt64Value;

            /**
             * Creates a plain object from a UInt64Value message. Also converts values to other types if specified.
             * @param message UInt64Value
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.UInt64Value, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this UInt64Value to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an Int32Value. */
        interface IInt32Value {

            /** Int32Value value */
            value?: (number|null);
        }

        /** Represents an Int32Value. */
        class Int32Value implements IInt32Value {

            /**
             * Constructs a new Int32Value.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IInt32Value);

            /** Int32Value value. */
            public value: number;

            /**
             * Verifies an Int32Value message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Int32Value message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Int32Value
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Int32Value;

            /**
             * Creates a plain object from an Int32Value message. Also converts values to other types if specified.
             * @param message Int32Value
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.Int32Value, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Int32Value to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a UInt32Value. */
        interface IUInt32Value {

            /** UInt32Value value */
            value?: (number|null);
        }

        /** Represents a UInt32Value. */
        class UInt32Value implements IUInt32Value {

            /**
             * Constructs a new UInt32Value.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IUInt32Value);

            /** UInt32Value value. */
            public value: number;

            /**
             * Verifies a UInt32Value message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a UInt32Value message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns UInt32Value
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.UInt32Value;

            /**
             * Creates a plain object from a UInt32Value message. Also converts values to other types if specified.
             * @param message UInt32Value
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.UInt32Value, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this UInt32Value to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a BoolValue. */
        interface IBoolValue {

            /** BoolValue value */
            value?: (boolean|null);
        }

        /** Represents a BoolValue. */
        class BoolValue implements IBoolValue {

            /**
             * Constructs a new BoolValue.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IBoolValue);

            /** BoolValue value. */
            public value: boolean;

            /**
             * Verifies a BoolValue message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a BoolValue message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns BoolValue
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.BoolValue;

            /**
             * Creates a plain object from a BoolValue message. Also converts values to other types if specified.
             * @param message BoolValue
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.BoolValue, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this BoolValue to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a StringValue. */
        interface IStringValue {

            /** StringValue value */
            value?: (string|null);
        }

        /** Represents a StringValue. */
        class StringValue implements IStringValue {

            /**
             * Constructs a new StringValue.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IStringValue);

            /** StringValue value. */
            public value: string;

            /**
             * Verifies a StringValue message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a StringValue message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns StringValue
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.StringValue;

            /**
             * Creates a plain object from a StringValue message. Also converts values to other types if specified.
             * @param message StringValue
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.StringValue, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this StringValue to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a BytesValue. */
        interface IBytesValue {

            /** BytesValue value */
            value?: (Uint8Array|null);
        }

        /** Represents a BytesValue. */
        class BytesValue implements IBytesValue {

            /**
             * Constructs a new BytesValue.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IBytesValue);

            /** BytesValue value. */
            public value: Uint8Array;

            /**
             * Verifies a BytesValue message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a BytesValue message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns BytesValue
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.BytesValue;

            /**
             * Creates a plain object from a BytesValue message. Also converts values to other types if specified.
             * @param message BytesValue
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.BytesValue, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this BytesValue to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Struct. */
        interface IStruct {

            /** Struct fields */
            fields?: ({ [k: string]: google.protobuf.IValue }|null);
        }

        /** Represents a Struct. */
        class Struct implements IStruct {

            /**
             * Constructs a new Struct.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IStruct);

            /** Struct fields. */
            public fields: { [k: string]: google.protobuf.IValue };

            /**
             * Verifies a Struct message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Struct message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Struct
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Struct;

            /**
             * Creates a plain object from a Struct message. Also converts values to other types if specified.
             * @param message Struct
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.Struct, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Struct to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Value. */
        interface IValue {

            /** Value nullValue */
            nullValue?: (google.protobuf.NullValue|null);

            /** Value numberValue */
            numberValue?: (number|null);

            /** Value stringValue */
            stringValue?: (string|null);

            /** Value boolValue */
            boolValue?: (boolean|null);

            /** Value structValue */
            structValue?: (google.protobuf.IStruct|null);

            /** Value listValue */
            listValue?: (google.protobuf.IListValue|null);
        }

        /** Represents a Value. */
        class Value implements IValue {

            /**
             * Constructs a new Value.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IValue);

            /** Value nullValue. */
            public nullValue: google.protobuf.NullValue;

            /** Value numberValue. */
            public numberValue: number;

            /** Value stringValue. */
            public stringValue: string;

            /** Value boolValue. */
            public boolValue: boolean;

            /** Value structValue. */
            public structValue?: (google.protobuf.IStruct|null);

            /** Value listValue. */
            public listValue?: (google.protobuf.IListValue|null);

            /** Value kind. */
            public kind?: ("nullValue"|"numberValue"|"stringValue"|"boolValue"|"structValue"|"listValue");

            /**
             * Verifies a Value message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Value message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Value
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Value;

            /**
             * Creates a plain object from a Value message. Also converts values to other types if specified.
             * @param message Value
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.Value, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Value to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** NullValue enum. */
        enum NullValue {
            NULL_VALUE = 0
        }

        /** Properties of a ListValue. */
        interface IListValue {

            /** ListValue values */
            values?: (google.protobuf.IValue[]|null);
        }

        /** Represents a ListValue. */
        class ListValue implements IListValue {

            /**
             * Constructs a new ListValue.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IListValue);

            /** ListValue values. */
            public values: google.protobuf.IValue[];

            /**
             * Verifies a ListValue message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ListValue message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ListValue
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.ListValue;

            /**
             * Creates a plain object from a ListValue message. Also converts values to other types if specified.
             * @param message ListValue
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.ListValue, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ListValue to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }

    /** Namespace api. */
    namespace api {

        /** Properties of a Http. */
        interface IHttp {

            /** Http rules */
            rules?: (google.api.IHttpRule[]|null);

            /** Http fullyDecodeReservedExpansion */
            fullyDecodeReservedExpansion?: (boolean|null);
        }

        /** Represents a Http. */
        class Http implements IHttp {

            /**
             * Constructs a new Http.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.api.IHttp);

            /** Http rules. */
            public rules: google.api.IHttpRule[];

            /** Http fullyDecodeReservedExpansion. */
            public fullyDecodeReservedExpansion: boolean;

            /**
             * Verifies a Http message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Http message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Http
             */
            public static fromObject(object: { [k: string]: any }): google.api.Http;

            /**
             * Creates a plain object from a Http message. Also converts values to other types if specified.
             * @param message Http
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.api.Http, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Http to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a HttpRule. */
        interface IHttpRule {

            /** HttpRule selector */
            selector?: (string|null);

            /** HttpRule get */
            get?: (string|null);

            /** HttpRule put */
            put?: (string|null);

            /** HttpRule post */
            post?: (string|null);

            /** HttpRule delete */
            "delete"?: (string|null);

            /** HttpRule patch */
            patch?: (string|null);

            /** HttpRule custom */
            custom?: (google.api.ICustomHttpPattern|null);

            /** HttpRule body */
            body?: (string|null);

            /** HttpRule responseBody */
            responseBody?: (string|null);

            /** HttpRule additionalBindings */
            additionalBindings?: (google.api.IHttpRule[]|null);
        }

        /** Represents a HttpRule. */
        class HttpRule implements IHttpRule {

            /**
             * Constructs a new HttpRule.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.api.IHttpRule);

            /** HttpRule selector. */
            public selector: string;

            /** HttpRule get. */
            public get: string;

            /** HttpRule put. */
            public put: string;

            /** HttpRule post. */
            public post: string;

            /** HttpRule delete. */
            public delete: string;

            /** HttpRule patch. */
            public patch: string;

            /** HttpRule custom. */
            public custom?: (google.api.ICustomHttpPattern|null);

            /** HttpRule body. */
            public body: string;

            /** HttpRule responseBody. */
            public responseBody: string;

            /** HttpRule additionalBindings. */
            public additionalBindings: google.api.IHttpRule[];

            /** HttpRule pattern. */
            public pattern?: ("get"|"put"|"post"|"delete"|"patch"|"custom");

            /**
             * Verifies a HttpRule message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns HttpRule
             */
            public static fromObject(object: { [k: string]: any }): google.api.HttpRule;

            /**
             * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
             * @param message HttpRule
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.api.HttpRule, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this HttpRule to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a CustomHttpPattern. */
        interface ICustomHttpPattern {

            /** CustomHttpPattern kind */
            kind?: (string|null);

            /** CustomHttpPattern path */
            path?: (string|null);
        }

        /** Represents a CustomHttpPattern. */
        class CustomHttpPattern implements ICustomHttpPattern {

            /**
             * Constructs a new CustomHttpPattern.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.api.ICustomHttpPattern);

            /** CustomHttpPattern kind. */
            public kind: string;

            /** CustomHttpPattern path. */
            public path: string;

            /**
             * Verifies a CustomHttpPattern message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns CustomHttpPattern
             */
            public static fromObject(object: { [k: string]: any }): google.api.CustomHttpPattern;

            /**
             * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
             * @param message CustomHttpPattern
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.api.CustomHttpPattern, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this CustomHttpPattern to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }

    /** Namespace rpc. */
    namespace rpc {

        /** Properties of a Status. */
        interface IStatus {

            /** Status code */
            code?: (number|null);

            /** Status message */
            message?: (string|null);

            /** Status details */
            details?: (google.protobuf.IAny[]|null);
        }

        /** Represents a Status. */
        class Status implements IStatus {

            /**
             * Constructs a new Status.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.rpc.IStatus);

            /** Status code. */
            public code: number;

            /** Status message. */
            public message: string;

            /** Status details. */
            public details: google.protobuf.IAny[];

            /**
             * Verifies a Status message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Status message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Status
             */
            public static fromObject(object: { [k: string]: any }): google.rpc.Status;

            /**
             * Creates a plain object from a Status message. Also converts values to other types if specified.
             * @param message Status
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.rpc.Status, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Status to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }
}
