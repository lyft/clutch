syntax = "proto3";

package clutch.k8s.v1;

option go_package = "github.com/lyft/clutch/backend/api/k8s/v1;k8sv1";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";

import "api/v1/annotations.proto";

service K8sAPI {
  rpc DescribePod(DescribePodRequest) returns (DescribePodResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/describePod"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }

  rpc ListPods(ListPodsRequest) returns (ListPodsResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/listPods"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }

  rpc DeletePod(DeletePodRequest) returns (DeletePodResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/deletePod"
      body : "*"
    };
    option (clutch.api.v1.action).type = DELETE;
  }

  rpc UpdatePod(UpdatePodRequest) returns (UpdatePodResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/updatePod"
      body : "*"
    };
    option (clutch.api.v1.action).type = UPDATE;
  }

  rpc ResizeHPA(ResizeHPARequest) returns (ResizeHPAResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/resizeHPA"
      body : "*"
    };
    option (clutch.api.v1.action).type = UPDATE;
  }

  rpc DeleteHPA(DeleteHPARequest) returns (DeleteHPAResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/deleteHPA"
      body : "*"
    };
    option (clutch.api.v1.action).type = DELETE;
  }

  rpc DescribeDeployment(DescribeDeploymentRequest) returns (DescribeDeploymentResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/describeDeployment"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }

  rpc ListDeployments(ListDeploymentsRequest) returns (ListDeploymentsResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/listDeployments"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }

  rpc UpdateDeployment(UpdateDeploymentRequest) returns (UpdateDeploymentResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/updateDeployment"
      body : "*"
    };
    option (clutch.api.v1.action).type = UPDATE;
  }

  rpc DeleteDeployment(DeleteDeploymentRequest) returns (DeleteDeploymentResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/deleteDeployment"
      body : "*"
    };
    option (clutch.api.v1.action).type = DELETE;
  }

  rpc DescribeService(DescribeServiceRequest) returns (DescribeServiceResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/describeService"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }

  rpc ListServices(ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/listServices"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
  rpc DeleteService(DeleteServiceRequest) returns (DeleteServiceResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/deleteService"
      body : "*"
    };
    option (clutch.api.v1.action).type = DELETE;
  }

  rpc DescribeStatefulSet(DescribeStatefulSetRequest) returns (DescribeStatefulSetResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/describeStatefulSet"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }

  rpc ListStatefulSets(ListStatefulSetsRequest) returns (ListStatefulSetsResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/listStatefulSets"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }

  rpc UpdateStatefulSet(UpdateStatefulSetRequest) returns (UpdateStatefulSetResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/updateStatefulSet"
      body : "*"
    };
    option (clutch.api.v1.action).type = UPDATE;
  }

  rpc DeleteStatefulSet(DeleteStatefulSetRequest) returns (DeleteStatefulSetResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/deleteStatefulSet"
      body : "*"
    };
    option (clutch.api.v1.action).type = DELETE;
  }

  rpc DescribeCronJob(DescribeCronJobRequest) returns (DescribeCronJobResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/describeCronJob"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }

  rpc ListCronJobs(ListCronJobsRequest) returns (ListCronJobsResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/listCronJobs"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }

  rpc DeleteCronJob(DeleteCronJobRequest) returns (DeleteCronJobResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/deleteCronJob"
      body : "*"
    };
    option (clutch.api.v1.action).type = DELETE;
  }

  rpc ListConfigMaps(ListConfigMapsRequest) returns (ListConfigMapsResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/listConfigMaps"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }

  rpc DescribeConfigMap(DescribeConfigMapRequest) returns (DescribeConfigMapResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/describeConfigMap"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }

  rpc DeleteConfigMap(DeleteConfigMapRequest) returns (DeleteConfigMapResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/deleteConfigMap"
      body : "*"
    };
    option (clutch.api.v1.action).type = DELETE;
  }

  rpc ListJobs(ListJobsRequest) returns (ListJobsResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/listJobs"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }

  rpc DeleteJob(DeleteJobRequest) returns (DeleteJobResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/deleteJob"
      body : "*"
    };
    option (clutch.api.v1.action).type = DELETE;
  }

  rpc CreateJob(CreateJobRequest) returns (CreateJobResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/createJob"
      body : "*"
    };
    option (clutch.api.v1.action).type = CREATE;
  }

  rpc DescribeNamespace(DescribeNamespaceRequest) returns (DescribeNamespaceResponse) {
    option (google.api.http) = {
      post : "/v1/k8s/describeNamespace"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
}

message DescribePodRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Pod",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DescribePodResponse {
  option (clutch.api.v1.reference).fields = "pod";

  Pod pod = 1;
}

// TODO(maybe): Identify with resource annotations.
message Container {
  string name = 1;
  string image = 2;

  // https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#containerstate-v1-core
  enum State {
    UNSPECIFIED = 0;
    UNKNOWN = 1;
    TERMINATED = 2;
    RUNNING = 3;
    WAITING = 4;
  }
  State state = 3;
  bool ready = 4;
  int32 restart_count = 5;

  // ref: https://pkg.go.dev/k8s.io/api/core/v1#ContainerState
  oneof state_details {
    StateWaiting state_waiting = 6;
    StateRunning state_running = 7;
    StateTerminated state_terminated = 8;
  }
}

// ref: https://pkg.go.dev/k8s.io/api/core/v1#ContainerStateWaiting
message StateWaiting {
  string reason = 1;
  string message = 2;
}

// ref: https://pkg.go.dev/k8s.io/api/core/v1#ContainerStateRunning
message StateRunning {
  google.protobuf.Timestamp start_time = 1;
}

// ref: https://pkg.go.dev/k8s.io/api/core/v1#ContainerStateTerminated
message StateTerminated {
  string reason = 1;
  string message = 2;
  int32 exit_code = 3;
  int32 signal = 4;
}

message PodCondition {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    CONTAINERS_READY = 1;
    INITIALIZED = 2;
    READY = 3;
    POD_SCHEDULED = 4;
  }
  Type type = 1;

  enum Status {
    STATUS_UNSPECIFIED = 0;
    TRUE = 1;
    FALSE = 2;
    UNKNOWN = 3;
  }
  Status status = 2;
}

message Pod {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Pod",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string cluster = 1;
  string namespace = 2;
  string name = 3;

  repeated Container containers = 4;

  string node_ip = 5;
  string pod_ip = 6;

  // https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/
  enum State {
    UNSPECIFIED = 0;
    UNKNOWN = 1;
    PENDING = 2;
    RUNNING = 3;
    SUCCEEDED = 4;
    FAILED = 5;
  }
  State state = 7;

  google.protobuf.Timestamp start_time = 8;

  map<string, string> labels = 9;
  map<string, string> annotations = 10;

  // message indicating details about why the pod is in this state.
  // https://pkg.go.dev/k8s.io/api/core/v1#PodStatus
  string state_reason = 11;

  // current service state of pod.
  // https://pkg.go.dev/k8s.io/api/core/v1#PodCondition
  repeated PodCondition pod_conditions = 12;

  // one entry per init container.
  // ref: https://pkg.go.dev/k8s.io/api/core/v1#PodStatus
  repeated Container init_containers = 13;

  // status string calculated based on the same logic as kubectl
  // which summarizes the current status of the pod depending on
  // the status of its containers.
  // ref: https://github.com/kubernetes/kubernetes/blob/master/pkg/printers/internalversion/printers.go#L761
  string status = 14;

  // This is here as a workound since protobufjs currently has serialization
  // issues for well-known types like google.protobuf.Timestamp
  // Unix timestamp (milliseconds since Jan 01 1970)
  int64 start_time_millis = 15;
}

message ListOptions {
  map<string, string> labels = 9;
  // This selector string will be concatenated to the string that is
  // formed from formatting the labels.
  // This is useful in the case of having Set-based selectors rather
  // than just equality-based selectors which is how the map is formatted.
  string supplemental_selector_string = 10;
}

message ListPodsRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Namespace",
    pattern : "{cluster}/{namespace}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];

  ListOptions options = 4 [ (validate.rules).message = {required : true} ];
}

message ListPodsResponse {
  option (clutch.api.v1.reference).fields = "pods";

  repeated Pod pods = 1 [ (clutch.api.v1.log) = false ];
}

message DeletePodRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Pod",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DeletePodResponse {
}

message UpdatePodRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Pod",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];

  // Preconditions to check before updating the pod's metadata
  //
  // Note: An empty StringValue signals that the label/annotation should not be set
  ExpectedObjectMetaFields expected_object_meta_fields = 5;

  // Metadata fields to update
  ObjectMetaFields object_meta_fields = 6;

  // Metadata fields to remove
  RemoveObjectMetaFields remove_object_meta_fields = 7;
}

message UpdatePodResponse {
}

message HPA {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.HPA",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string cluster = 1;
  string namespace = 2;
  string name = 3;

  message Sizing {
    uint32 min_replicas = 1;
    uint32 max_replicas = 2;
    uint32 current_replicas = 3;
    uint32 desired_replicas = 4;
  }
  Sizing sizing = 4;

  map<string, string> labels = 5;
  map<string, string> annotations = 6;
}

message ResizeHPARequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.HPA",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];

  message Sizing {
    uint32 min = 1;
    uint32 max = 2;
  }
  Sizing sizing = 5 [ (validate.rules).message = {required : true} ];
}

message ResizeHPAResponse {
}

message DeleteHPARequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.HPA",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DeleteHPAResponse {
}

message Deployment {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Deployment",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string cluster = 1;
  string namespace = 2;
  string name = 3;

  map<string, string> labels = 4;
  map<string, string> annotations = 5;

  message DeploymentStatus {
    uint32 replicas = 1;
    uint32 updated_replicas = 2;
    uint32 ready_replicas = 3;
    uint32 available_replicas = 4;
    uint32 unavailable_replicas = 5;
    message Condition {
      // This is mirroring upstream values here:
      // https://pkg.go.dev/k8s.io/api/apps/v1#DeploymentConditionType
      enum Type {
        UNSPECIFIED = 0;
        UNKNOWN = 1;
        AVAILABLE = 2;
        PROGRESSING = 3;
        REPLICA_FAILURE = 4;
      }
      Type type = 1;
      enum ConditionStatus {
        CONDITION_UNSPECIFIED = 0;
        CONDITION_TRUE = 1;
        CONDITION_FALSE = 2;
        CONDITION_UNKNOWN = 3;
      }
      ConditionStatus condition_status = 2;

      string reason = 5;
      string message = 6;
    }
    repeated Condition deployment_conditions = 6;
  }
  DeploymentStatus deployment_status = 6;

  // This is a workound since protobufjs currently has serialization
  // issues for well-known types like google.protobuf.Timestamp
  // Unix timestamp (milliseconds since Jan 01 1970)
  int64 creation_time_millis = 7;
}

message DescribeDeploymentRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Deployment",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DescribeDeploymentResponse {
  option (clutch.api.v1.reference).fields = "deployment";

  Deployment deployment = 1 [ (clutch.api.v1.log) = false ];
}

message ListDeploymentsRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Namespace",
    pattern : "{cluster}/{namespace}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];

  ListOptions options = 4 [ (validate.rules).message = {required : true} ];
}

message ListDeploymentsResponse {
  option (clutch.api.v1.reference).fields = "deployments";

  repeated Deployment deployments = 1 [ (clutch.api.v1.log) = false ];
}

message UpdateDeploymentRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Deployment",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];

  // Fields are merged with the existing deployment object, existing
  // labels and annotations are not deleted in the update process.
  // Currently this api does not support removing Fields from the deployment object.
  // A two way strategic merge is done on the old and new deployment objects.
  // https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment
  message Fields {
    map<string, string> labels = 1 [ (validate.rules).map.keys.string = {min_bytes : 1} ];
    map<string, string> annotations = 2 [ (validate.rules).map.keys.string = {min_bytes : 1} ];
  }

  Fields fields = 5 [ (validate.rules).message = {required : true} ];
}

message UpdateDeploymentResponse {
}

message DeleteDeploymentRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Deployment",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DeleteDeploymentResponse {
}

message StatefulSet {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.StatefulSet",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string cluster = 1;
  string namespace = 2;
  string name = 3;

  map<string, string> labels = 4;
  map<string, string> annotations = 5;

  message Status {
    uint32 replicas = 1;
    uint32 updated_replicas = 2;
    uint32 ready_replicas = 3;
  }
  Status status = 6;

  // This is a workound since protobufjs currently has serialization
  // issues for well-known types like google.protobuf.Timestamp
  // Unix timestamp (milliseconds since Jan 01 1970)
  int64 creation_time_millis = 7;
}

message DescribeStatefulSetRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.StatefulSet",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DescribeStatefulSetResponse {
  option (clutch.api.v1.reference).fields = "stateful_set";

  StatefulSet stateful_set = 1 [ (clutch.api.v1.log) = false ];
}

message ListStatefulSetsRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Namespace",
    pattern : "{cluster}/{namespace}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];

  ListOptions options = 4 [ (validate.rules).message = {required : true} ];
}

message ListStatefulSetsResponse {
  option (clutch.api.v1.reference).fields = "stateful_sets";

  repeated StatefulSet stateful_sets = 1 [ (clutch.api.v1.log) = false ];
}

message DeleteStatefulSetRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.StatefulSet",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DeleteStatefulSetResponse {
}

message UpdateStatefulSetRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.StatefulSet",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];

  // Fields are merged with the existing statefulset object, existing
  // labels and annotations are not deleted in the update process.
  // Currently this api does not support removing Fields from the statefulset object.
  // A two way strategic merge is done on the old and new statefulset objects.
  // https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment
  message Fields {
    map<string, string> labels = 1 [ (validate.rules).map.keys.string = {min_bytes : 1} ];
    map<string, string> annotations = 2 [ (validate.rules).map.keys.string = {min_bytes : 1} ];
  }

  Fields fields = 5 [ (validate.rules).message = {required : true} ];
}

message UpdateStatefulSetResponse {
}

message Service {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Service",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string cluster = 1;
  string namespace = 2;
  string name = 3;

  enum Type {
    UNSPECIFIED = 0;
    UNKNOWN = 1;
    CLUSTER_IP = 2;
    NODE_PORT = 3;
    LOAD_BALANCER = 4;
    EXTERNAL_NAME = 5;
  }
  Type type = 4;

  map<string, string> labels = 5;
  map<string, string> annotations = 6;

  // service traffic routed to pods with label keys
  // and values matching this selector.
  // ref: https://pkg.go.dev/k8s.io/api/core/v1#ServiceSpec
  map<string, string> selector = 7;
}

message DescribeServiceRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Service",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DescribeServiceResponse {
  option (clutch.api.v1.reference).fields = "service";

  Service service = 1 [ (clutch.api.v1.log) = false ];
}

message ListServicesRequest {
  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];

  ListOptions options = 4 [ (validate.rules).message = {required : true} ];
}

message ListServicesResponse {
  option (clutch.api.v1.reference).fields = "services";

  repeated Service services = 1 [ (clutch.api.v1.log) = false ];
}

message DeleteServiceRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Service",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DeleteServiceResponse {
}

message CronJob {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.CronJob",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string cluster = 1;
  string namespace = 2;
  string name = 3;
  string schedule = 4;

  map<string, string> labels = 5;
  map<string, string> annotations = 6;

  bool suspend = 7;
  int32 num_active_jobs = 8;

  enum ConcurrencyPolicy {
    UNSPECIFIED = 0;
    UNKNOWN = 1;
    ALLOW = 2;
    FORBID = 3;
    REPLACE = 4;
  }
  ConcurrencyPolicy concurrency_policy = 9;

  google.protobuf.Int64Value starting_deadline_seconds = 10;
}

message DescribeCronJobRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.CronJob",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DescribeCronJobResponse {
  option (clutch.api.v1.reference).fields = "cron";

  CronJob cronjob = 1 [ (clutch.api.v1.log) = false ];
}

message ListCronJobsRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Namespace",
    pattern : "{cluster}/{namespace}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];

  ListOptions options = 4 [ (validate.rules).message = {required : true} ];
}

message ListCronJobsResponse {
  option (clutch.api.v1.reference).fields = "cron_jobs";

  repeated CronJob cron_jobs = 1 [ (clutch.api.v1.log) = false ];
}

message DeleteCronJobRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.CronJob",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DeleteCronJobResponse {
}

message ConfigMap {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.ConfigMap",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string cluster = 1;
  string namespace = 2;
  string name = 3;

  map<string, string> annotations = 4;
  map<string, string> labels = 5;

  // represents a configmaps Data field which is a
  // key:value map
  map<string, string> data = 6;
  // represents a configmaps BinaryData field which is
  // a map of binary data.
  map<string, bytes> binary_data = 7;
}

message ListConfigMapsRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Namespace",
    pattern : "{cluster}/{namespace}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];

  ListOptions options = 4 [ (validate.rules).message = {required : true} ];
}

message ListConfigMapsResponse {
  option (clutch.api.v1.reference).fields = "config_maps";

  repeated ConfigMap config_maps = 1 [ (clutch.api.v1.log) = false ];
}

message DescribeConfigMapRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.ConfigMap",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DescribeConfigMapResponse {
  option (clutch.api.v1.reference).fields = "config_map";

  ConfigMap config_map = 1 [ (clutch.api.v1.log) = false ];
}

message DeleteConfigMapRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.ConfigMap",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DeleteConfigMapResponse {
}

message Job {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Job",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string cluster = 1;
  string namespace = 2;
  string name = 3;

  map<string, string> annotations = 4;
  map<string, string> labels = 5;
}

message ListJobsRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Namespace",
    pattern : "{cluster}/{namespace}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];

  ListOptions options = 4 [ (validate.rules).message = {required : true} ];
}

message ListJobsResponse {
  option (clutch.api.v1.reference).fields = "jobs";

  repeated Job jobs = 1 [ (clutch.api.v1.log) = false ];
}

message DeleteJobRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Job",
    pattern : "{cluster}/{namespace}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 4 [ (validate.rules).string = {min_bytes : 1} ];
}

message DeleteJobResponse {
}

message JobConfig {
  google.protobuf.Value value = 1;
}

message CreateJobRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Job",
    pattern : "{cluster}/{namespace}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string namespace = 3 [ (validate.rules).string = {min_bytes : 1} ];
  JobConfig job_config = 4;
}

message CreateJobResponse {
  Job job = 1 [ (clutch.api.v1.log) = false ];
}

message Namespace {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Namespace",
    pattern : "{cluster}/{name}"
  };

  string cluster = 1;
  string name = 2;

  map<string, string> annotations = 3;
  map<string, string> labels = 4;
}

message DescribeNamespaceRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.k8s.v1.Namespace",
    pattern : "{cluster}/{name}"
  };

  string clientset = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 3 [ (validate.rules).string = {min_bytes : 1} ];
}

message DescribeNamespaceResponse {
  option (clutch.api.v1.reference).fields = "namespace";

  Namespace namespace = 1 [ (clutch.api.v1.log) = false ];
}

// This message type is used to add support for nullable strings and is an
// alternative to the well-known `StringValue` type. We need it, because the
// grpc-gateway used by Clutch deserializes a null `StringValue` as an empty
// string.
message NullableString {
  oneof kind {
    google.protobuf.NullValue null = 1;
    string value = 2;
  }
}

// Preconditions to check before updating an object's metadata.
//
// Note: A `null` NullableString means that the label/annotation should not be set.
message ExpectedObjectMetaFields {
  map<string, NullableString> labels = 1 [ (validate.rules).map.keys.string = {min_bytes : 1} ];
  map<string, NullableString> annotations = 2 [ (validate.rules).map.keys.string = {min_bytes : 1} ];
}

// Metadata fields to update when updating an object
message ObjectMetaFields {
  map<string, string> labels = 1 [ (validate.rules).map.keys.string = {min_bytes : 1} ];
  map<string, string> annotations = 2 [ (validate.rules).map.keys.string = {min_bytes : 1} ];
}

// Metadata fields to remove when updating an object
message RemoveObjectMetaFields {
  repeated string labels = 1 [ (validate.rules).repeated = {unique : true} ];
  repeated string annotations = 2 [ (validate.rules).repeated = {unique : true} ];
}
