syntax = "proto3";

package clutch.bot.slackbot.v1;

option go_package = "github.com/lyft/clutch/backend/api/bot/slackbot/v1;slackbotv1";

import "api/v1/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

service SlackBotAPI {
  rpc Event(EventRequest) returns (EventResponse) {
    option (google.api.http) = {
      post : "/v1/bot/slackbot/event"
      body : "*"
    };
    option (clutch.api.v1.action).type = CREATE;
  }
}

// Information on the bot user
message Bot {
  // bot id
  string id = 1;
  // if the bot is deleted
  bool deleted = 2;
  // bot name
  string name = 3;
  // timestamp of when the bot app was last updated
  int64 updated = 4;
  // unique identifier of the installed Slack application
  string app_id = 5;
  // image urls
  map<string, string> icons = 6;
  // unique identifier of the workspace where the event occurred
  string team_id = 7;
}

// The structure of events vary among types. Full list of event types: https://api.slack.com/events.
// We will be receiving app_mention events (events that mention the bot) or message.im events (a message posted in a DM
// with the bot).
message Event {
  // the type of event
  string type = 1;
  // the user who messaged the bot
  string user = 2;
  string bot_id = 3;
  Bot bot_profile = 4;
  // the message text
  string text = 5;
  // timestamp
  string ts = 6;
  // the channel where the event happened
  string channel = 7;
  // for DM messages, this will be "im"
  string channel_type = 8;
  // when the event was dispatched
  string event_ts = 9;
  string client_msg_id = 10;
  // unique identifier of the workspace where the event occurred
  string team = 11;
  // received when a user interacts with a Block Kit component, schema can vary.
  // https://api.slack.com/reference/block-kit/interactive-components
  google.protobuf.Value blocks = 12;
}

// For more details:
// https://api.slack.com/apis/connections/events-api#the-events-api__receiving-events
// https://api.slack.com/enterprise/apps/reference#event
message EventRequest {
  option (clutch.api.v1.redacted) = true;
  // verification token to validate the event originated from Slack
  string token = 1;
  // if where the event occured is an external shared channel
  bool is_ext_shared_channel = 2;
  // unique identifier of the workspace where the event occurred
  string team_id = 3;
  // unique identifier of the installed Slack application
  string api_app_id = 4;
  // TODO: (sperry) if we expand the types of events we suscribe to and their fields vary alot, maybe we should use
  // google.protobuf.Value.
  Event event = 5;
  // indicates which kind of event this is
  string type = 6;
  // identifier for this specific event, globally unique across all workspaces
  string event_id = 7;
  // epoch timestamp in seconds indicating when this event was dispatched
  int64 event_time = 8;
  // an identifier for this specific event, can be used with list of authorizations to obtain a full list of
  // installations of your app that this event is visible to
  string event_context = 9;
  // an installation of the app, object type
  google.protobuf.Value authorizations = 10;
  // randomly generated string used as part of the URL verification handshake,
  // https://api.slack.com/apis/connections/events-api#the-events-api__subscribing-to-event-types__events-api-request-urls__request-url-configuration--verification__url-verification-handshake
  string challenge = 11;
}

// Respond back to the Slack Events API with the challenge or a 2xx,
// https://api.slack.com/apis/connections/events-api#the-events-api__responding-to-events
message EventResponse {
  option (clutch.api.v1.redacted) = true;
  // the request will include the challenge and we respond back with the same challenge to complete the URL verification
  // handshake
  string challenge = 1;
}
