syntax = "proto3";

package clutch.chaos.serverexperimentation.v1;

import "validate/validate.proto";

option go_package = "serverexperimentationv1";

message TestConfig {
  // The pair of clusters specifying the origin and the destination of
  // the traffic that faults should be applied to.
  ClusterPairTarget cluster_pair = 1;

  oneof fault {
    AbortFaultConfig abort = 2;
    LatencyFaultConfig latency = 3;
  }

  // The fault injection type that controls whether faults are
  // injected on ingress or egress.
  FaultInjectionType fault_injection_type = 4;
}

// Targets requests from downstream_cluster -> upstream_cluster.
message ClusterPairTarget {
  // The name of the downstream cluster.
  string downstream_cluster = 1 [ (validate.rules).string = {min_bytes : 1} ];

  // The name of the upstream cluster.
  string upstream_cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];
}

message AbortFaultConfig {
  // The percentage of requests that will be slowed down.
  float percent = 1 [ (validate.rules).float = {gt : 0.0, lte : 100.0} ];

  // The abort HTTP status that will be returned.
  int32 http_status = 2 [ (validate.rules).int32 = {gt : 99, lt : 600} ];
}

message LatencyFaultConfig {
  // The percentage of requests that will be slowed down.
  float percent = 1 [ (validate.rules).float = {gt : 0.0, lte : 100.0} ];

  // The latency duration in milliseconds.
  int32 duration_ms = 2 [ (validate.rules).int32.gt = 0 ];
}

enum FaultInjectionType {
  // Fault injection type is unspecified. Faults should be injected
  // on ingress if possible, on egress otherwise.
  FAULTINJECTIONTYPE_UNSPECIFIED = 0;
  // Faults are injected to ingress traffic by an upstream service(s).
  FAULTINJECTIONTYPE_INGRESS = 1;
  // Faults are injected to egress traffic by a downstream service(s).
  FAULTINJECTIONTYPE_EGRESS = 2;
}
