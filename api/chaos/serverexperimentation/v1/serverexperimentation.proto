syntax = "proto3";

package clutch.chaos.serverexperimentation.v1;

import "validate/validate.proto";

option go_package = "github.com/lyft/clutch/backend/api/chaos/serverexperimentation/v1;serverexperimentationv1";

// The configuration of an HTTP fault.
message HTTPFaultConfig {
  // The targeting of the fault describing what requests are being considered for faults.
  FaultTargeting fault_targeting = 1 [ (validate.rules).message.required = true ];

  oneof fault {
    option (validate.required) = true;

    // The abort fault.
    AbortFault abort_fault = 2;
    // The latency fault.
    LatencyFault latency_fault = 3;
  }
}

// The definition of an abort fault.
message AbortFault {
  // The percentage of requests the fault should be applied to.
  FaultPercentage percentage = 1 [ (validate.rules).message.required = true ];
  // The HTTP status code to insert when applying an abort fault.
  FaultAbortStatus abort_status = 2 [ (validate.rules).message.required = true ];
}

// The definition of a latency fault.
message LatencyFault {
  // The percentage of requests the fault should be applied to.
  FaultPercentage percentage = 1 [ (validate.rules).message.required = true ];
  // The latency duration to apply when applying a latency fault.
  FaultLatencyDuration latency_duration = 2 [ (validate.rules).message.required = true ];
}

// The fault targeting that allows us to control which requests are considered for
// fault injection and what part of the system is responsible for applying faults.
// The `enforcer` abstraction allows us to define a different list of matching criteria
// depending on whether faults are applied on the upstream or downstream.
message FaultTargeting {
  // A fault enforcer.
  oneof enforcer {
    option (validate.required) = true;

    // Enforce a fault on an upstream.
    UpstreamEnforcing upstream_enforcing = 1;
    // Enforce a fault on a downstream.
    DownstreamEnforcing downstream_enforcing = 2;
  }
}

// Enforce faults on an upstream.
message UpstreamEnforcing {
  // An upstream responsible for enforcing a fault. Only requests that are handled
  // by the specified upstream are considered for the fault injection.
  oneof upstream_type {
    option (validate.required) = true;

    // A single upstream cluster.
    SingleCluster upstream_cluster = 1;
  }

  // A downstream responsible for enforcing a fault. Only requests that are started
  // by the specified downstream are considered for the fault injection.
  oneof downstream_type {
    option (validate.required) = true;

    // A single downstream cluster.
    SingleCluster downstream_cluster = 3;
  }
}

// Enforce faults on a downstream.
message DownstreamEnforcing {
  // An upstream responsible for enforcing a fault. Only requests that are handled
  // by the specified upstream are considered for the fault injection.
  oneof upstream_type {
    option (validate.required) = true;

    // A single upstream cluster.
    SingleCluster upstream_cluster = 1;
  }

  // A downstream responsible for enforcing a fault. Only requests that are started
  // by the specified downstream are considered for a fault injection.
  oneof downstream_type {
    option (validate.required) = true;

    // A single downstream cluster.
    SingleCluster downstream_cluster = 2;
  }
}

// A single cluster that is partaking in the fault injection.
message SingleCluster {
  // The name of a cluster.
  string name = 1 [ (validate.rules).string = {min_bytes : 1} ];
}

// The percentage controlling what portion of a given cluster should be applying faults.
message ClusterPercentage {
  // The numerator of a percentage with a fixed denumerator equal to 100
  // (i.e. percentage equal to 50 results in 50/100 = 50%)
  uint32 percentage = 1 [ (validate.rules).uint32 = {gt : 0, lte : 100} ];
}

// The fault percentage controlling what percentage of requests considered for a fault injection
// should have the fault applied.
message FaultPercentage {
  // The numerator of a percentage with a fixed denumerator equal to 100
  // (i.e. percentage equal to 50 results in 50/100 = 50%)
  uint32 percentage = 1 [ (validate.rules).uint32 = {gt : 0, lte : 100} ];
}

// The abort status to apply as part of an abort fault.
message FaultAbortStatus {
  // The abort HTTP status.
  uint32 http_status_code = 1 [ (validate.rules).uint32 = {gt : 99, lt : 600} ];
}

// The latency duration to apply as part of a latency fault.
message FaultLatencyDuration {
  // The fixed latency duration in milliseconds.
  uint32 fixed_duration_ms = 1 [ (validate.rules).uint32.gt = 0 ];
}
