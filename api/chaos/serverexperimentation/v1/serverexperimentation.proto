syntax = "proto3";

package clutch.chaos.serverexperimentation.v1;

import "validate/validate.proto";

option go_package = "github.com/lyft/clutch/backend/api/chaos/serverexperimentation/v1;serverexperimentationv1";

message TestConfig {
  // The pair of clusters specifying the origin and the destination of
  // the traffic that faults should be applied to.
  ClusterPairTarget cluster_pair = 1 [ (validate.rules).message.required = true ];

  oneof fault {
    option (validate.required) = true;

    AbortFaultConfig abort = 2;
    LatencyFaultConfig latency = 3;
  }
}

// Targets requests from downstream_cluster -> upstream_cluster.
message ClusterPairTarget {
  // The name of the downstream cluster.
  string downstream_cluster = 1 [ (validate.rules).string = {min_bytes : 1} ];

  // The name of the upstream cluster.
  string upstream_cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];

  // The fault injection cluster that controls whether faults are
  // injected by downstream or upstream cluster.
  FaultInjectionCluster fault_injection_cluster = 3 [ (validate.rules).enum.defined_only = true ];
}

message AbortFaultConfig {
  // The percentage of requests that will be slowed down.
  float percent = 1 [ (validate.rules).float = {gt : 0.0, lte : 100.0} ];

  // The abort HTTP status that will be returned.
  int32 http_status = 2 [ (validate.rules).int32 = {gt : 99, lt : 600} ];
}

message LatencyFaultConfig {
  // The percentage of requests that will be slowed down.
  float percent = 1 [ (validate.rules).float = {gt : 0.0, lte : 100.0} ];

  // The latency duration in milliseconds.
  int32 duration_ms = 2 [ (validate.rules).int32.gt = 0 ];
}

enum FaultInjectionCluster {
  // Fault injection cluster is unspecified. Faults are not injected.
  FAULTINJECTIONCLUSTER_UNSPECIFIED = 0;
  // Faults are injected to egress traffic by a downstream service(s).
  FAULTINJECTIONCLUSTER_DOWNSTREAM = 1;
  // Faults are injected to ingesss traffic by an upstream service(s).
  FAULTINJECTIONCLUSTER_UPSTREAM = 2;
}

message HTTPFaultConfig {
  oneof fault {
    option (validate.required) = true;

    Abort abort = 1;
    Latency latency = 2;
  }
}

message Abort {
  FaultTargeting fault_targeting = 1 [ (validate.rules).message.required = true ];
  FaultPercentage fault_parcentage = 2 [ (validate.rules).message.required = true ];
  AbortStatus abort_status = 3 [ (validate.rules).message.required = true ];
}

message Latency {
  FaultTargeting fault_targeting = 1 [ (validate.rules).message.required = true ];
  FaultPercentage fault_parcentage = 2 [ (validate.rules).message.required = true ];
  LatencyDuration latency_duration = 3 [ (validate.rules).message.required = true ];
}

message FaultPercentage {
  uint32 percentage = 1 [ (validate.rules).uint32 = {gt : 0, lte : 100} ];
}

message AbortStatus {
  uint32 http_status_code = 1 [ (validate.rules).uint32 = {gt : 99, lt : 600} ];
}

message LatencyDuration {
  uint32 fixed_duration_ms = 1 [ (validate.rules).uint32.gt = 0 ];
}

message FaultTargeting {
  oneof enforcer {
    option (validate.required) = true;

    UpstreamEnforcing upstream = 1;
    DownstreamEnforcing downstream = 2;
  }
}

message UpstreamEnforcing {
  oneof upstream_type {
    option (validate.required) = true;

    SingleCluster upstream_cluster = 1;
    PartialSingleCluster upstream_partial_single_cluster = 2;
  }

  oneof downstream_type {
    option (validate.required) = true;

    SingleCluster downstream_cluster = 3;
  }
}

message DownstreamEnforcing {
  oneof upstream_type {
    option (validate.required) = true;

    SingleCluster upstream_cluster = 1;
  }

  oneof downstream_type {
    option (validate.required) = true;

    SingleCluster downstream_cluster = 2;
  }
}

message SingleCluster {
  string name = 1 [ (validate.rules).string = {min_bytes : 1} ];
}

message PartialSingleCluster {
  string name = 1 [ (validate.rules).string = {min_bytes : 1} ];
  float percentage = 2 [ (validate.rules).float = {gt : 0.0, lte : 100.0} ];
}
