syntax = "proto3";

package clutch.chaos.serverexperimentation.v1;

import "validate/validate.proto";

option go_package = "github.com/lyft/clutch/backend/api/chaos/serverexperimentation/v1;serverexperimentationv1";

message TestConfig {
  // The pair of clusters specifying the origin and the destination of
  // the traffic that faults should be applied to.
  ClusterPairTarget cluster_pair = 1 [ (validate.rules).message.required = true ];

  oneof fault {
    option (validate.required) = true;

    AbortFaultConfig abort = 2;
    LatencyFaultConfig latency = 3;
  }
}

// Targets requests from downstream_cluster -> upstream_cluster.
message ClusterPairTarget {
  // The name of the downstream cluster.
  string downstream_cluster = 1 [ (validate.rules).string = {min_bytes : 1} ];

  // The name of the upstream cluster.
  string upstream_cluster = 2 [ (validate.rules).string = {min_bytes : 1} ];

  // The fault injection cluster that controls whether faults are
  // injected by downstream or upstream cluster.
  FaultInjectionCluster fault_injection_cluster = 3 [ (validate.rules).enum.defined_only = true ];
}

message AbortFaultConfig {
  // The percentage of requests that will be slowed down.
  float percent = 1 [ (validate.rules).float = {gt : 0.0, lte : 100.0} ];

  // The abort HTTP status that will be returned.
  int32 http_status = 2 [ (validate.rules).int32 = {gt : 99, lt : 600} ];
}

message LatencyFaultConfig {
  // The percentage of requests that will be slowed down.
  float percent = 1 [ (validate.rules).float = {gt : 0.0, lte : 100.0} ];

  // The latency duration in milliseconds.
  int32 duration_ms = 2 [ (validate.rules).int32.gt = 0 ];
}

enum FaultInjectionCluster {
  // Fault injection cluster is unspecified. Faults are not injected.
  FAULTINJECTIONCLUSTER_UNSPECIFIED = 0;
  // Faults are injected to egress traffic by a downstream service(s).
  FAULTINJECTIONCLUSTER_DOWNSTREAM = 1;
  // Faults are injected to ingesss traffic by an upstream service(s).
  FAULTINJECTIONCLUSTER_UPSTREAM = 2;
}

// The configuration of an HTTP fault.
message HTTPFaultConfig {
  oneof fault {
    option (validate.required) = true;

    // The abort fault.
    AbortFault abort_fault = 1;
    // The latency fault.
    LatencyFault latency_fault = 2;
  }
}

// The definition of an abort fault.
message AbortFault {
  // The targeting of the fault describing what requests faults should be applied to.
  FaultTargeting fault_targeting = 1 [ (validate.rules).message.required = true ];
  // The percentage of requests the fault should be applied to.
  FaultPercentage fault_parcentage = 2 [ (validate.rules).message.required = true ];
  // The abort status to apply.
  FaultAbortStatus fault_abort_status = 3 [ (validate.rules).message.required = true ];
}

// The definition of a latency fault.
message LatencyFault {
  // The targeting of the fault describing where the faults should be applied.
  FaultTargeting fault_targeting = 1 [ (validate.rules).message.required = true ];
  // The percentage of requests the fault should be applied to.
  FaultPercentage fault_parcentage = 2 [ (validate.rules).message.required = true ];
  // The latency duration to apply.
  FaultLatencyDuration fault_latency_duration = 3 [ (validate.rules).message.required = true ];
}

// The fault targeting that describes a part of the system that's responsible for enforcing a fault.
message FaultTargeting {
  // A fault enforcer.
  oneof enforcer {
    option (validate.required) = true;

    // Enforce a fault on an upstream.
    UpstreamEnforcing upstream = 1;
    // Enfore a fault on a downstream.
    DownstreamEnforcing downstream = 2;
  }
}

/// Enforce faults on an upstream.
message UpstreamEnforcing {
  // An upstream responsible for enforcing a fault.
  oneof upstream_type {
    option (validate.required) = true;

    // A single upstream cluster.
    SingleCluster upstream_cluster = 1;
    // A partial single upstream cluster.
    PartialSingleCluster upstream_partial_single_cluster = 2;
  }

  // A downstream responsible for enforcing a fault.
  oneof downstream_type {
    option (validate.required) = true;

    // A single downstream cluster.
    SingleCluster downstream_cluster = 3;
  }
}

/// Enforce faults on a downstream.
message DownstreamEnforcing {
  // An upstream responsible for enforcing a fault.
  oneof upstream_type {
    option (validate.required) = true;

    // A single upstream cluster.
    SingleCluster upstream_cluster = 1;
  }

  // A downstream responsible for enforcing a fault.
  oneof downstream_type {
    option (validate.required) = true;

    // A single downstream cluster.
    SingleCluster downstream_cluster = 2;
  }
}

// A single cluster.
message SingleCluster {
  // The name of a cluster.
  string name = 1 [ (validate.rules).string = {min_bytes : 1} ];
}

// A partial single cluster - the part of a single cluster.
message PartialSingleCluster {
  // The name of a cluster.
  string name = 1 [ (validate.rules).string = {min_bytes : 1} ];
  // The percentage controlling what part of a cluster should be included.
  ClusterPercentage cluster_percentage = 2 [ (validate.rules).message.required = true ];
}

// The percentage controlling what portion of a given cluster should be applying faults.
message ClusterPercentage {
  // The numerator of a percentage with a fixed denumerator equal to 100
  // (i.e. percentage equal to 50 results in 50/100 = 50%)
  uint32 percentage = 1 [ (validate.rules).uint32 = {gt : 0, lte : 100} ];
}

// The fault percentage controlling how often a given fault should be applied.
message FaultPercentage {
  // The numerator of a percentage with a fixed denumerator equal to 100
  // (i.e. percentage equal to 50 results in 50/100 = 50%)
  uint32 percentage = 1 [ (validate.rules).uint32 = {gt : 0, lte : 100} ];
}

// The abort status to apply as part of an abort fault.
message FaultAbortStatus {
  // The abort HTTP status.
  uint32 http_status_code = 1 [ (validate.rules).uint32 = {gt : 99, lt : 600} ];
}

// The latency duration to apply as part of a latency fault.
message FaultLatencyDuration {
  // The fixed latency duration in milliseconds.
  uint32 fixed_duration_ms = 1 [ (validate.rules).uint32.gt = 0 ];
}
