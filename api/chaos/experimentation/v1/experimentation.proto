syntax = "proto3";

package clutch.chaos.experimentation.v1;

import "validate/validate.proto";
import "api/v1/annotations.proto";
import "google/api/annotations.proto";

import "chaos/experimentation/v1/experiment.proto";
import "chaos/experimentation/v1/create_experiment_data.proto";
import "chaos/experimentation/v1/list_view_item.proto";
import "chaos/experimentation/v1/experiment_run_details.proto";

option go_package = "github.com/lyft/clutch/backend/api/chaos/experimentation/v1;experimentationv1";

message CreateExperimentRequest {
  // The data specifying the experiment to create. See `CreateExperiment` for more details.
  CreateExperimentData data = 1 [ (validate.rules).message.required = true ];
}

message CreateExperimentResponse {
  // The created experiment.
  Experiment experiment = 1;
}

message CreateOrGetExperimentRequest {
  // The data specifying the experiment to fetch or create. See `CreateOrGetExperiment` for more details.
  CreateExperimentData data = 1 [ (validate.rules).message.required = true ];
}

message CreateOrGetExperimentResponse {
  enum Origin {
    ORIGIN_UNSPECIFIED = 0;
    ORIGIN_EXISTING = 1;
    ORIGIN_NEW = 2;
  }

  // The created or fetched experiment that was requested by a caller. See `origin` to learn more
  // about how to check whether a new experiment was created as the result of the request's execution.
  Experiment experiment = 1;
  // The type of returned experiment - either a newly created experiment or an existing one.
  Origin origin = 2;
}

message GetExperimentsRequest {
  // The status of an experiment.
  enum Status {
    // Unspecified status.
    STATUS_UNSPECIFIED = 0;
    // Return experiments that are currently running.
    STATUS_RUNNING = 1;
  }

  // Return experiments whose config's type URL matches the provided config type URL.
  // Set to empty string to query for all.
  string config_type = 1;
  // Return experiments whose status is equal to the provided value.
  // Set to STATUS_UNSPECIFIED to query for all.
  Status status = 2 [ (validate.rules).enum = {defined_only : true} ];
}

message GetExperimentsResponse {
  repeated Experiment experiments = 1;
}

message CancelExperimentRunRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.chaos.experimentation.v1.CancelExperimentRunRequest",
    pattern : "{id}"
  };

  // The identifier of an experiment run to cancel.
  string id = 1 [ (validate.rules).string = {min_bytes : 1} ];
  // The reason for the cancelation request.
  string reason = 2 [ (validate.rules).string = {min_bytes : 1, max_len : 150} ];
}

message CancelExperimentRunResponse {
}

message GetListViewRequest {
}

message GetListViewResponse {
  repeated ListViewItem items = 1;
}

message GetExperimentRunDetailsRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.chaos.experimentation.v1.GetExperimentRunDetailsRequest",
    pattern : "{id}"
  };

  // The identifier of an experiment run whose details should be returned to the caller.
  string id = 1 [ (validate.rules).string = {min_bytes : 1} ];
}

message GetExperimentRunDetailsResponse {
  ExperimentRunDetails run_details = 1;
}

// Simple CRUD API for experiments
service ExperimentsAPI {
  // Create a new experiment using the provided experiment data. It fails if an experiment run
  // with the provided run identifier already exists. See `CreateExperimentData` for more details.
  rpc CreateExperiment(CreateExperimentRequest) returns (CreateExperimentResponse) {
    option (google.api.http) = {
      post : "/v1/chaos/experimentation/createExperiment"
      body : "*"
    };
    option (clutch.api.v1.action).type = CREATE;
  }
  // Create a new experiment using the provided experiment data. It succeeds even if an experiment run
  // with the provided run identifier already exists. In this case, the rest of request's payload is ignored
  // and an existing experiment with a matching run identifier is returned. See `CreateExperimentData` for more
  // details.
  rpc CreateOrGetExperiment(CreateOrGetExperimentRequest) returns (CreateOrGetExperimentResponse) {
    option (google.api.http) = {
      post : "/v1/chaos/experimentation/createOrGetExperiment"
      body : "*"
    };
    option (clutch.api.v1.action).type = CREATE;
  }
  // Cancel a running experiment run. The operation returns success even if a given experiment run has been
  // already completed or canceled and the operation does not have any effect.
  rpc CancelExperimentRun(CancelExperimentRunRequest) returns (CancelExperimentRunResponse) {
    option (google.api.http) = {
      post : "/v1/chaos/experimentation/cancelExperimentRun"
      body : "*"
    };
    option (clutch.api.v1.action).type = DELETE;
  }
  // Get the list of experiments fulfilling the specified criteria. See `GetExperimentsRequests` for more details.
  rpc GetExperiments(GetExperimentsRequest) returns (GetExperimentsResponse) {
    option (google.api.http) = {
      post : "/v1/chaos/experimentation/getExperiments"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
  // Get the list of experiments in the form that's optimized for displaying to the end user.
  rpc GetListView(GetListViewRequest) returns (GetListViewResponse) {
    option (google.api.http) = {
      post : "/v1/chaos/experimentation/getListView"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
  // Fetch the list of properties in the format that's optimized for displaying to the end user.
  rpc GetExperimentRunDetails(GetExperimentRunDetailsRequest) returns (GetExperimentRunDetailsResponse) {
    option (google.api.http) = {
      post : "/v1/chaos/experimentation/getExperimentRunDetails"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
}
