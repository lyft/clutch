syntax = "proto3";

package clutch.chaos.experimentation.v1;

import "api/v1/annotations.proto";
import "google/api/annotations.proto";

import "chaos/experimentation/v1/experiment.proto";
import "chaos/experimentation/v1/create_experiment_data.proto";
import "chaos/experimentation/v1/list_view_item.proto";
import "chaos/experimentation/v1/experiment_run_details.proto";

option go_package = "github.com/lyft/clutch/backend/api/chaos/experimentation/v1;experimentationv1";

message CreateExperimentRequest {
  CreateExperimentData data = 1;
}

message CreateExperimentResponse {
  Experiment experiment = 1;
}

message CreateOrGetExperimentRequest {
  CreateExperimentData data = 1;
}

message CreateOrGetExperimentResponse {
  Experiment experiment = 1;
}

message GetExperimentsRequest {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_RUNNING = 1;
  }

  string config_type = 1;
  Status status = 2;
}

message GetExperimentsResponse {
  repeated Experiment experiments = 1;
}

message CancelExperimentRunRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.chaos.experimentation.v1.CancelExperimentRunRequest",
    pattern : "{id}"
  };

  uint64 id = 1;
}

message CancelExperimentRunResponse {
}

message GetListViewRequest {
}

message GetListViewResponse {
  repeated ListViewItem items = 1;
}

message GetExperimentRunDetailsRequest {
  option (clutch.api.v1.id).patterns = {
    type_url : "clutch.chaos.experimentation.v1.GetExperimentRunDetailsRequest",
    pattern : "{id}"
  };

  uint64 id = 1;
}

message GetExperimentRunDetailsResponse {
  ExperimentRunDetails run_details = 1;
}

// Simple CRUD API for experiments
service ExperimentsAPI {
  rpc CreateExperiment(CreateExperimentRequest) returns (CreateExperimentResponse) {
    option (google.api.http) = {
      post : "/v1/chaos/experimentation/createExperiment"
      body : "*"
    };
    option (clutch.api.v1.action).type = CREATE;
  }
  rpc CreateOrGetExperiment(CreateOrGetExperimentRequest) returns (CreateOrGetExperimentResponse) {
    option (google.api.http) = {
      post : "/v1/chaos/experimentation/createOrGetExperiment"
      body : "*"
    };
    option (clutch.api.v1.action).type = CREATE;
  }
  rpc CancelExperimentRun(CancelExperimentRunRequest) returns (CancelExperimentRunResponse) {
    option (google.api.http) = {
      post : "/v1/chaos/experimentation/cancelExperimentRun"
      body : "*"
    };
    option (clutch.api.v1.action).type = DELETE;
  }
  rpc GetExperiments(GetExperimentsRequest) returns (GetExperimentsResponse) {
    option (google.api.http) = {
      post : "/v1/chaos/experimentation/getExperiments"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
  rpc GetListView(GetListViewRequest) returns (GetListViewResponse) {
    option (google.api.http) = {
      post : "/v1/chaos/experimentation/getListView"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
  rpc GetExperimentRunDetails(GetExperimentRunDetailsRequest) returns (GetExperimentRunDetailsResponse) {
    option (google.api.http) = {
      post : "/v1/chaos/experimentation/getExperimentRunDetails"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
}
