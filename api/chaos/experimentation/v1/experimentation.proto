syntax = "proto3";

package clutch.chaos.experimentation.v1;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "validate/validate.proto";

import "api/v1/annotations.proto";

option go_package = "experimentationv1";

message Experiment {
  fixed64 id = 1;
  google.protobuf.Any config = 2;
}

message CreateExperimentsRequest {
  repeated Experiment experiments = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message CreateExperimentsResponse {
  repeated Experiment experiments = 1;
}

message GetExperimentsRequest {
  repeated uint64 ids = 1;
}

message GetExperimentsResponse {
  repeated Experiment experiments = 3;
}

message StopExperimentsRequest {
  repeated uint64 ids = 1;
}

message StopExperimentsResponse {
}

// Simple CRUD API for experiments
service ExperimentsAPI {
  rpc CreateExperiments(CreateExperimentsRequest) returns (CreateExperimentsResponse) {
    option (google.api.http) = {
      post : "/v1/experiments/create"
      body : "*"
    };
    option (clutch.api.v1.action).type = CREATE;
  }
  rpc GetExperiments(GetExperimentsRequest) returns (GetExperimentsResponse) {
    option (google.api.http) = {
      post : "/v1/experiments/get"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
  rpc StopExperiments(StopExperimentsRequest) returns (StopExperimentsResponse) {
    option (google.api.http) = {
      post : "/v1/experiments/stop"
      body : "*"
    };
    option (clutch.api.v1.action).type = DELETE;
  }
}
