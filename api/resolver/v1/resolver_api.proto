syntax = "proto3";

package clutch.resolver.v1;

option go_package = "github.com/lyft/clutch/backend/api/resolver/v1;resolverv1";

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/rpc/status.proto";
import "validate/validate.proto";

import "api/v1/annotations.proto";
import "resolver/v1/schema.proto";

service ResolverAPI {
  rpc GetObjectSchemas(GetObjectSchemasRequest) returns (GetObjectSchemasResponse) {
    option (google.api.http) = {
      post : "/v1/resolver/getObjectSchemas"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
  rpc Search(SearchRequest) returns (SearchResponse) {
    option (google.api.http) = {
      post : "/v1/resolver/search"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
  rpc Resolve(ResolveRequest) returns (ResolveResponse) {
    option (google.api.http) = {
      post : "/v1/resolver/resolve"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
  rpc Autocomplete(AutocompleteRequest) returns (AutocompleteResponse) {
    option (google.api.http) = {
      post : "/v1/resolver/autocomplete"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
}

message AutocompleteResult {
  // The primary identifer of the resource
  // This value is used when rendering the autocomplete results on the frontend
  string id = 1;
  // The label can provide more detailed information about the result
  // This is dispalyed inline with the auto complete result
  // eg: what region an ec2 instance resides in
  string label = 2;
}

message AutocompleteRequest {
  // The type URL of the desired result.
  string want = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string search = 2 [ (validate.rules).string = {min_bytes : 1} ];
  uint64 limit = 3;
  // If true, the search will be case sensitive
  bool case_sensitive = 4;
}

message AutocompleteResponse {
  repeated AutocompleteResult results = 1;
}

message ResolveRequest {
  // The type URL of the desired result.
  string want = 1 [ (validate.rules).string = {min_bytes : 1} ];

  // Filled in object schemas.
  google.protobuf.Any have = 2 [ (validate.rules).any.required = true ];

  // The maximum number of results to return.
  uint32 limit = 3;
}

message ResolveResponse {
  repeated google.protobuf.Any results = 1;

  repeated google.rpc.Status partial_failures = 2;
}

message SearchRequest {
  // The type URL of the desired result.
  string want = 1 [ (validate.rules).string = {min_bytes : 1} ];

  // Free-form text query.
  string query = 2 [ (validate.rules).string = {min_bytes : 1} ];

  // The maximum number of results to return.
  uint32 limit = 3;
}

message SearchResponse {
  repeated google.protobuf.Any results = 1;
  repeated google.rpc.Status partial_failures = 2;
}

message GetObjectSchemasRequest {
  string type_url = 1 [ (validate.rules).string = {min_bytes : 1} ];
}

message GetObjectSchemasResponse {
  string type_url = 1;
  repeated Schema schemas = 2;
}
