syntax = "proto3";

package clutch.sourcecontrol.v1;

option go_package = "github.com/lyft/clutch/backend/api/sourcecontrol/v1;sourcecontrolv1";

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "validate/validate.proto";

import "api/v1/annotations.proto";
import "sourcecontrol/github/v1/github.proto";

enum Visibility {
  UNSPECIFIED = 0;
  PUBLIC = 1;
  PRIVATE = 2;
}

service SourceControlAPI {
  rpc GetRepositoryOptions(GetRepositoryOptionsRequest) returns (GetRepositoryOptionsResponse) {
    option (google.api.http) = {
      post : "/v1/sourcecontrol/getRepositoryOptions",
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
  rpc CreateRepository(CreateRepositoryRequest) returns (CreateRepositoryResponse) {
    option (google.api.http) = {
      post : "/v1/sourcecontrol/createRepository"
      body : "*"
    };
    option (clutch.api.v1.action).type = CREATE;
  }
}

message GetRepositoryOptionsRequest {
}

// An entity encompasses members and organizations who are both owners of or contributors to source code.
message Entity {
  string name = 1;
  string photo_url = 2;
}

message GetRepositoryOptionsResponse {
  repeated Entity available_owners = 1;
  repeated Visibility visibility_options = 2;
}

message CreateRepositoryRequest {
  string owner = 1 [ (validate.rules).string = {min_bytes : 1} ];
  string name = 2 [ (validate.rules).string = {min_bytes : 1} ];
  string description = 3;

  oneof options {
    option (validate.required) = true;

    google.protobuf.Any custom_options = 4;
    clutch.sourcecontrol.github.v1.CreateRepositoryOptions github_options = 5;
  }
}

message CreateRepositoryResponse {
  string url = 1;
}
