syntax = "proto3";

package clutch.metrics.v1;

option go_package = "github.com/lyft/clutch/backend/api/metrics/v1;metricsv1";

import "validate/validate.proto";
import "api/v1/annotations.proto";
import "google/api/annotations.proto";

service MetricsAPI {
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse) {
    option (google.api.http) = {
      post : "/v1/metrics/getMetrics"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
}

message Query {
  // Prometheus expression query string
  string query = 1 [ (validate.rules).string.min_len = 1 ];
  // inclusive
  int64 start_time_ms = 2;
  // inclusive
  int64 end_time_ms = 3;
  // time step that starts from, a nice default is 1 minute (60000)
  int64 step_ms = 4;
}

message GetMetricsRequest {
  repeated Query metric_queries = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message Metric {
  int64 value = 1;
  int64 timestamp_ms = 2;
}

message Metrics {
  repeated Metric metrics = 1;
}

message GetMetricsResponse {
  // Contains a mapping of individual queries to their respective results.
  map<string, Metrics> querystring_to_metrics = 1;
}
