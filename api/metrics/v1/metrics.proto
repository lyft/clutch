syntax = "proto3";

package clutch.metrics.v1;

option go_package = "github.com/lyft/clutch/backend/api/metrics/v1;metricsv1";

import "validate/validate.proto";
import "api/v1/annotations.proto";
import "google/api/annotations.proto";

/**
 * For the prometheus HTTP API see:
 * https://prometheus.io/docs/prometheus/latest/querying/api/#range-queries
 */

service MetricsAPI {
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse) {
    option (google.api.http) = {
      post : "/v1/metrics/query"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
}

message Query {
  /** query string */
  string expression = 1 [ (validate.rules).string.min_len = 1 ];
  /** inclusive */
  int64 start_time_ms = 2 [ (validate.rules).int64.gte = 0 ];
  /** inclusive */
  int64 end_time_ms = 3 [ (validate.rules).int64.gte = 0 ];
  /** default is 1 minute (60000) */
  int64 step_ms = 4;
}

message GetMetricsRequest {
  repeated Query metric_queries = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message DataPoint {
  double value = 1;
  int64 timestamp = 2;
}

message Metrics {
  repeated DataPoint data_points = 1;
  string label = 2;
  map<string, string> tags = 3;
}

message Result {
  repeated Metrics metrics = 1;
}

message GetMetricsResponse {
  /** A mapping of individual queries to their respective results */
  map<string, Result> query_results = 1;
}
