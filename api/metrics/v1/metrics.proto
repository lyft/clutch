syntax = "proto3";

package clutch.metrics.v1;

option go_package = "github.com/lyft/clutch/backend/api/metric/v1;metricsv1";

import "validate/validate.proto";
import "api/v1/annotations.proto";
import "google/api/annotations.proto";

service MetricsAPI {
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse) {
    option (google.api.http) = {
      post : "/v1/project/getMetrics"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
}

message GetMetricsRequest {
  // Could be PromQL, etc.
  repeated string metric_queries = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message Metric {
  int64 value = 1;
  int64 timestamp_ms = 2;
}

message Metrics {
  repeated Metric metrics = 1;
}

message GetMetricsResponse {
  // This map would contain a mapping of individual queries to their respective results.
  map<string, Metrics> querystring_to_metrics = 1;
}
