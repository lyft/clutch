syntax = "proto3";

package clutch.feedback.v1;

option go_package = "github.com/lyft/clutch/backend/api/feedback/v1;feedbackv1";

import "google/api/annotations.proto";
import "api/v1/annotations.proto";
import "validate/validate.proto";

service FeedbackAPI {
  rpc GetSurveys(GetSurveysRequest) returns (GetSurveysResponse) {
    option (google.api.http) = {
      post : "/v1/feedback/getSurveys"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
  rpc SubmitFeedback(SubmitFeedbackRequest) returns (SubmitFeedbackResponse) {
    option (google.api.http) = {
      post : "/v1/feedback/submitFeedback"
      body : "*"
    };
    option (clutch.api.v1.action).type = CREATE;
  }
}

enum Origin {
  // currently these are the supported placements for feedback
  ORIGIN_UNSPECIFIED = 0;
  HEADER = 1;
  WIZARD = 2;
}

// currently UI components and designs support a three-point emoji scale. as more use cases arise,
// we can expand to add more emoji options (i.e. for a 4-point scale) and
// new rating scales (i.e 2-point thumbs up/down scale).

enum EmojiRating {
  // these are used to compute a feedback score out of 100
  EMOJI_UNSPECIFIED = 0;
  SAD = 1;
  NEUTRAL = 2;
  HAPPY = 3;
}

// Rating labels are the raw text options that are presented to the user (i.e. bad/ok/great)
// whereas a rating scale gets normalized to a score out of a 100 to compute a NPS score.

message RatingLabel {
  oneof type {
    option (validate.required) = true;

    // the emoji type from the defined enums (i.e sad/neutral/happy)
    EmojiRating emoji = 1 [ (validate.rules).enum = {defined_only : true not_in : 0} ];
  }
  // the corresponding text to show to the user (i.e bad/ok/great)
  string label = 2 [ (validate.rules).string = {min_bytes : 1} ];
}

message RatingScale {
  oneof type {
    option (validate.required) = true;
    EmojiRating emoji = 1 [ (validate.rules).enum = {defined_only : true not_in : 0} ];
  }
}

message GetSurveysRequest {
  // the origin of the feedback entry. multiple origins can be passed in the request to return their specific survey
  repeated Origin origins = 1 [ (validate.rules).repeated = {
    min_items : 1,
    items : {enum : {defined_only : true, not_in : 0}}
  } ];
  // future: add a user field if rules are implemented for whether a user should see the feedback survey
}

message Survey {
  // the prompt for the rating options
  string prompt = 1;
  // the prompt for the freeform feedback
  string freeform_prompt = 2;
  // the options to show to the user (i.e. bad/ok/great) for the corresponding rating scale
  repeated RatingLabel rating_labels = 3;
}

message GetSurveysResponse {
  // the key will be the feedback origin name
  map<string, Survey> origin_survey = 1;
  // future: add a field to indicate if a user should see the feedback survey if rules are implemented
}

message FeedbackMetadata {
  // extra info on the feedback (i.e. the survey question, the rating options, the feedback origin, etc.)
  Origin origin = 1 [ (validate.rules).enum = {defined_only : true not_in : 0} ];
  Survey survey = 2 [ (validate.rules).message = {required : true} ];
  // TODO: remove if we decide to record feedback only when a user clicks the submit button
  bool user_submitted = 3;
  string url_search_params = 4;
}

message Feedback {
  // url path of where the feedback was submitted
  string url_path = 1 [ (validate.rules).string = {min_bytes : 1} ];
  // the text option the user selected (i.e. bad/ok/great)
  string rating_label = 2 [ (validate.rules).string = {min_bytes : 1} ];
  // the corresponding rating scale selection
  RatingScale rating_scale = 3 [ (validate.rules).message = {required : true} ];
  // (optional) freeform input
  string freeform_response = 4;
  // (optional) some UI components (i.e the header) will have a dropdown menu for choosing the type of
  // feedback to submit (i.e. "General", "K8s Delete Pod")
  string feedback_type = 5;
}

message SubmitFeedbackRequest {
  // client-genereated unique feedback id, which we will also use to update the feedback (essentially replace with the
  // latest)
  // TODO: remove if we decide to record feedback only when a user clicks the submit button
  string id = 1 [ (validate.rules).string.len = 36 ];
  // user's email
  string user_id = 2 [ (validate.rules).string = {min_bytes : 1} ];
  Feedback feedback = 3 [ (validate.rules).message = {required : true} ];
  FeedbackMetadata metadata = 4 [ (validate.rules).message = {required : true} ];
}

message SubmitFeedbackResponse {
}
