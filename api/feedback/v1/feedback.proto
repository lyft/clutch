syntax = "proto3";

package clutch.feedback.v1;

option go_package = "github.com/lyft/clutch/backend/api/feedback/v1;feedbackv1";

import "google/api/annotations.proto";
import "api/v1/annotations.proto";
import "validate/validate.proto";

service FeedbackAPI {
  rpc GetQuestions(GetQuestionsRequest) returns (GetQuestionsResponse) {
    option (google.api.http) = {
      post : "/v1/feedback/getQuestions"
      body : "*"
    };
    option (clutch.api.v1.action).type = READ;
  }
}

enum Origin {
  // currently these are the supported placements for feedback
  ORIGIN_UNSPECIFIED = 0;
  HEADER = 1;
  WIZARD = 2;
}

message GetQuestionsRequest {
  // the origin of the feedback entry which gets mapped to a origin-specific question
  // multiple origins can be passed in the request to return their specific question
  repeated Origin origins = 1 [ (validate.rules).repeated = {
    min_items : 1,
    items : {enum : {defined_only : true, not_in : 0}}
  } ];
  // future: have rules on whether a user should see the feedback questions
  string user = 2 [ (validate.rules).string = {min_bytes : 1} ];
}

message RatingOptions {
  // the text (i.e. "bad", "ok", "great") for each value in the rating system
  // currently a three-point rating system (and UI designs) are supported
  string one = 1;
  string two = 2;
  string three = 3;
}

message OriginQuestion {
  // the question for the rating options
  string question = 1;
  // the prompt for the freeform feedback
  string freeform_question = 2;
  // feedback options to present to the user (i.e. "bad", "ok", "great")
  RatingOptions rating_options = 3;
  // future: have rules on whether a user should see the feedback question
  bool show = 4;
}

message GetQuestionsResponse {
  // the key will be the feedback origin name
  map<string, OriginQuestion> origin_question = 1;
}
